import type { IProviderBase } from "../../../components";
export interface ExtendedWindow extends Window {
    elrondWallet?: {
        extensionId: string;
    };
    multiversxWallet?: {
        extensionId: string;
    };
    ethereum?: {
        isMetaMask?: boolean;
    };
}
export type SafeWindowType<InferredWindowType extends Window = ExtendedWindow> = {
    [Key in keyof InferredWindowType]?: InferredWindowType[Key];
};
export declare enum UnlockPanelEventsEnum {
    OPEN = "OPEN",
    CLOSE = "CLOSE",
    LOGIN = "LOGIN",
    CANCEL_LOGIN = "CANCEL_LOGIN",
    CANCEL_IN_PROVIDER = "CANCEL_IN_PROVIDER",
    /**
     * User clicks Close button inside mounted provider
     */
    ANCHOR_CLOSE = "ANCHOR_CLOSE"
}
export interface IUnlockPanelManagerData {
    providers: IProviderBase[] | null;
    walletAddress: string | null;
}
