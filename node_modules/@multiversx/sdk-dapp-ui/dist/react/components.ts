'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import React from 'react';
import { type MvxButtonCustomEvent } from "../../dist/types";
import { MvxAddressTable as MvxAddressTableElement, defineCustomElement as defineMvxAddressTable } from "../../dist/types/../web-components/mvx-address-table.js";
import { MvxAnglesLeftIcon as MvxAnglesLeftIconElement, defineCustomElement as defineMvxAnglesLeftIcon } from "../../dist/types/../web-components/mvx-angles-left-icon.js";
import { MvxAnglesRightIcon as MvxAnglesRightIconElement, defineCustomElement as defineMvxAnglesRightIcon } from "../../dist/types/../web-components/mvx-angles-right-icon.js";
import { MvxArcExtensionProviderIcon as MvxArcExtensionProviderIconElement, defineCustomElement as defineMvxArcExtensionProviderIcon } from "../../dist/types/../web-components/mvx-arc-extension-provider-icon.js";
import { MvxArrowRightIcon as MvxArrowRightIconElement, defineCustomElement as defineMvxArrowRightIcon } from "../../dist/types/../web-components/mvx-arrow-right-icon.js";
import { MvxArrowUpRightFromSquareIcon as MvxArrowUpRightFromSquareIconElement, defineCustomElement as defineMvxArrowUpRightFromSquareIcon } from "../../dist/types/../web-components/mvx-arrow-up-right-from-square-icon.js";
import { MvxArrowUpRightIcon as MvxArrowUpRightIconElement, defineCustomElement as defineMvxArrowUpRightIcon } from "../../dist/types/../web-components/mvx-arrow-up-right-icon.js";
import { MvxBackArrowIcon as MvxBackArrowIconElement, defineCustomElement as defineMvxBackArrowIcon } from "../../dist/types/../web-components/mvx-back-arrow-icon.js";
import { MvxBraveExtensionProviderIcon as MvxBraveExtensionProviderIconElement, defineCustomElement as defineMvxBraveExtensionProviderIcon } from "../../dist/types/../web-components/mvx-brave-extension-provider-icon.js";
import { MvxButton as MvxButtonElement, defineCustomElement as defineMvxButton } from "../../dist/types/../web-components/mvx-button.js";
import { MvxCheckIcon as MvxCheckIconElement, defineCustomElement as defineMvxCheckIcon } from "../../dist/types/../web-components/mvx-check-icon.js";
import { MvxCircleExclamationIcon as MvxCircleExclamationIconElement, defineCustomElement as defineMvxCircleExclamationIcon } from "../../dist/types/../web-components/mvx-circle-exclamation-icon.js";
import { MvxCloseIcon as MvxCloseIconElement, defineCustomElement as defineMvxCloseIcon } from "../../dist/types/../web-components/mvx-close-icon.js";
import { MvxCopyButton as MvxCopyButtonElement, defineCustomElement as defineMvxCopyButton } from "../../dist/types/../web-components/mvx-copy-button.js";
import { MvxCopyIcon as MvxCopyIconElement, defineCustomElement as defineMvxCopyIcon } from "../../dist/types/../web-components/mvx-copy-icon.js";
import { MvxDataWithExplorerLink as MvxDataWithExplorerLinkElement, defineCustomElement as defineMvxDataWithExplorerLink } from "../../dist/types/../web-components/mvx-data-with-explorer-link.js";
import { MvxDefaultTransactionIconLarge as MvxDefaultTransactionIconLargeElement, defineCustomElement as defineMvxDefaultTransactionIconLarge } from "../../dist/types/../web-components/mvx-default-transaction-icon-large.js";
import { MvxDefaultTransactionIconSmall as MvxDefaultTransactionIconSmallElement, defineCustomElement as defineMvxDefaultTransactionIconSmall } from "../../dist/types/../web-components/mvx-default-transaction-icon-small.js";
import { MvxEdgeExtensionProviderIcon as MvxEdgeExtensionProviderIconElement, defineCustomElement as defineMvxEdgeExtensionProviderIcon } from "../../dist/types/../web-components/mvx-edge-extension-provider-icon.js";
import { MvxExplorerLink as MvxExplorerLinkElement, defineCustomElement as defineMvxExplorerLink } from "../../dist/types/../web-components/mvx-explorer-link.js";
import { MvxExtensionProviderIcon as MvxExtensionProviderIconElement, defineCustomElement as defineMvxExtensionProviderIcon } from "../../dist/types/../web-components/mvx-extension-provider-icon.js";
import { MvxFaIcon as MvxFaIconElement, defineCustomElement as defineMvxFaIcon } from "../../dist/types/../web-components/mvx-fa-icon.js";
import { MvxFirefoxExtensionProviderIcon as MvxFirefoxExtensionProviderIconElement, defineCustomElement as defineMvxFirefoxExtensionProviderIcon } from "../../dist/types/../web-components/mvx-firefox-extension-provider-icon.js";
import { MvxFormatAmount as MvxFormatAmountElement, defineCustomElement as defineMvxFormatAmount } from "../../dist/types/../web-components/mvx-format-amount.js";
import { MvxLedgerIcon as MvxLedgerIconElement, defineCustomElement as defineMvxLedgerIcon } from "../../dist/types/../web-components/mvx-ledger-icon.js";
import { MvxLedgerProviderIcon as MvxLedgerProviderIconElement, defineCustomElement as defineMvxLedgerProviderIcon } from "../../dist/types/../web-components/mvx-ledger-provider-icon.js";
import { MvxMagnifyingGlassIcon as MvxMagnifyingGlassIconElement, defineCustomElement as defineMvxMagnifyingGlassIcon } from "../../dist/types/../web-components/mvx-magnifying-glass-icon.js";
import { MvxMetamaskProviderIcon as MvxMetamaskProviderIconElement, defineCustomElement as defineMvxMetamaskProviderIcon } from "../../dist/types/../web-components/mvx-metamask-provider-icon.js";
import { MvxMultiversxLogoIcon as MvxMultiversxLogoIconElement, defineCustomElement as defineMvxMultiversxLogoIcon } from "../../dist/types/../web-components/mvx-multiversx-logo-icon.js";
import { MvxMultiversxSymbolIcon as MvxMultiversxSymbolIconElement, defineCustomElement as defineMvxMultiversxSymbolIcon } from "../../dist/types/../web-components/mvx-multiversx-symbol-icon.js";
import { MvxPaginationEllipsisForm as MvxPaginationEllipsisFormElement, defineCustomElement as defineMvxPaginationEllipsisForm } from "../../dist/types/../web-components/mvx-pagination-ellipsis-form.js";
import { MvxPaginationEllipsis as MvxPaginationEllipsisElement, defineCustomElement as defineMvxPaginationEllipsis } from "../../dist/types/../web-components/mvx-pagination-ellipsis.js";
import { MvxPagination as MvxPaginationElement, defineCustomElement as defineMvxPagination } from "../../dist/types/../web-components/mvx-pagination.js";
import { MvxPasskeyProviderIcon as MvxPasskeyProviderIconElement, defineCustomElement as defineMvxPasskeyProviderIcon } from "../../dist/types/../web-components/mvx-passkey-provider-icon.js";
import { MvxPencilIcon as MvxPencilIconElement, defineCustomElement as defineMvxPencilIcon } from "../../dist/types/../web-components/mvx-pencil-icon.js";
import { MvxPreloader as MvxPreloaderElement, defineCustomElement as defineMvxPreloader } from "../../dist/types/../web-components/mvx-preloader.js";
import { MvxProviderIdleScreen as MvxProviderIdleScreenElement, defineCustomElement as defineMvxProviderIdleScreen } from "../../dist/types/../web-components/mvx-provider-idle-screen.js";
import { MvxSidePanelHeader as MvxSidePanelHeaderElement, defineCustomElement as defineMvxSidePanelHeader } from "../../dist/types/../web-components/mvx-side-panel-header.js";
import { MvxSidePanelSwiper as MvxSidePanelSwiperElement, defineCustomElement as defineMvxSidePanelSwiper } from "../../dist/types/../web-components/mvx-side-panel-swiper.js";
import { MvxSidePanel as MvxSidePanelElement, defineCustomElement as defineMvxSidePanel } from "../../dist/types/../web-components/mvx-side-panel.js";
import { MvxSingleAngleDownIcon as MvxSingleAngleDownIconElement, defineCustomElement as defineMvxSingleAngleDownIcon } from "../../dist/types/../web-components/mvx-single-angle-down-icon.js";
import { MvxSingleAngleLeftIcon as MvxSingleAngleLeftIconElement, defineCustomElement as defineMvxSingleAngleLeftIcon } from "../../dist/types/../web-components/mvx-single-angle-left-icon.js";
import { MvxSingleAngleRightIcon as MvxSingleAngleRightIconElement, defineCustomElement as defineMvxSingleAngleRightIcon } from "../../dist/types/../web-components/mvx-single-angle-right-icon.js";
import { MvxSpinnerIcon as MvxSpinnerIconElement, defineCustomElement as defineMvxSpinnerIcon } from "../../dist/types/../web-components/mvx-spinner-icon.js";
import { MvxTooltip as MvxTooltipElement, defineCustomElement as defineMvxTooltip } from "../../dist/types/../web-components/mvx-tooltip.js";
import { MvxTransactionAccountName as MvxTransactionAccountNameElement, defineCustomElement as defineMvxTransactionAccountName } from "../../dist/types/../web-components/mvx-transaction-account-name.js";
import { MvxTransactionAccount as MvxTransactionAccountElement, defineCustomElement as defineMvxTransactionAccount } from "../../dist/types/../web-components/mvx-transaction-account.js";
import { MvxTransactionAge as MvxTransactionAgeElement, defineCustomElement as defineMvxTransactionAge } from "../../dist/types/../web-components/mvx-transaction-age.js";
import { MvxTransactionAssetIcon as MvxTransactionAssetIconElement, defineCustomElement as defineMvxTransactionAssetIcon } from "../../dist/types/../web-components/mvx-transaction-asset-icon.js";
import { MvxTransactionDirectionBadge as MvxTransactionDirectionBadgeElement, defineCustomElement as defineMvxTransactionDirectionBadge } from "../../dist/types/../web-components/mvx-transaction-direction-badge.js";
import { MvxTransactionHash as MvxTransactionHashElement, defineCustomElement as defineMvxTransactionHash } from "../../dist/types/../web-components/mvx-transaction-hash.js";
import { MvxTransactionIcon as MvxTransactionIconElement, defineCustomElement as defineMvxTransactionIcon } from "../../dist/types/../web-components/mvx-transaction-icon.js";
import { MvxTransactionListItem as MvxTransactionListItemElement, defineCustomElement as defineMvxTransactionListItem } from "../../dist/types/../web-components/mvx-transaction-list-item.js";
import { MvxTransactionMethod as MvxTransactionMethodElement, defineCustomElement as defineMvxTransactionMethod } from "../../dist/types/../web-components/mvx-transaction-method.js";
import { MvxTransactionShards as MvxTransactionShardsElement, defineCustomElement as defineMvxTransactionShards } from "../../dist/types/../web-components/mvx-transaction-shards.js";
import { MvxTransactionValue as MvxTransactionValueElement, defineCustomElement as defineMvxTransactionValue } from "../../dist/types/../web-components/mvx-transaction-value.js";
import { MvxTransactionsTable as MvxTransactionsTableElement, defineCustomElement as defineMvxTransactionsTable } from "../../dist/types/../web-components/mvx-transactions-table.js";
import { MvxTriangularWarningIcon as MvxTriangularWarningIconElement, defineCustomElement as defineMvxTriangularWarningIcon } from "../../dist/types/../web-components/mvx-triangular-warning-icon.js";
import { MvxTrim as MvxTrimElement, defineCustomElement as defineMvxTrim } from "../../dist/types/../web-components/mvx-trim.js";
import { MvxUnlockButton as MvxUnlockButtonElement, defineCustomElement as defineMvxUnlockButton } from "../../dist/types/../web-components/mvx-unlock-button.js";
import { MvxWalletConnectAppGalleryIcon as MvxWalletConnectAppGalleryIconElement, defineCustomElement as defineMvxWalletConnectAppGalleryIcon } from "../../dist/types/../web-components/mvx-wallet-connect-app-gallery-icon.js";
import { MvxWalletConnectAppStoreIcon as MvxWalletConnectAppStoreIconElement, defineCustomElement as defineMvxWalletConnectAppStoreIcon } from "../../dist/types/../web-components/mvx-wallet-connect-app-store-icon.js";
import { MvxWalletConnectGooglePlayIcon as MvxWalletConnectGooglePlayIconElement, defineCustomElement as defineMvxWalletConnectGooglePlayIcon } from "../../dist/types/../web-components/mvx-wallet-connect-google-play-icon.js";
import { MvxWalletProviderIcon as MvxWalletProviderIconElement, defineCustomElement as defineMvxWalletProviderIcon } from "../../dist/types/../web-components/mvx-wallet-provider-icon.js";
import { MvxXaliasProviderIcon as MvxXaliasProviderIconElement, defineCustomElement as defineMvxXaliasProviderIcon } from "../../dist/types/../web-components/mvx-xalias-provider-icon.js";
import { MvxXportalDownloadQrIcon as MvxXportalDownloadQrIconElement, defineCustomElement as defineMvxXportalDownloadQrIcon } from "../../dist/types/../web-components/mvx-xportal-download-qr-icon.js";
import { MvxXportalQrCodePreloader as MvxXportalQrCodePreloaderElement, defineCustomElement as defineMvxXportalQrCodePreloader } from "../../dist/types/../web-components/mvx-xportal-qr-code-preloader.js";

export type MvxAddressTableEvents = {
    onAccessWallet: EventName<CustomEvent<any>>,
    onSelectAccount: EventName<CustomEvent<any>>,
    onPageChange: EventName<CustomEvent<number>>
};

export const MvxAddressTable: StencilReactComponent<MvxAddressTableElement, MvxAddressTableEvents> = /*@__PURE__*/ createComponent<MvxAddressTableElement, MvxAddressTableEvents>({
    tagName: 'mvx-address-table',
    elementClass: MvxAddressTableElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onAccessWallet: 'accessWallet',
        onSelectAccount: 'selectAccount',
        onPageChange: 'pageChange'
    } as MvxAddressTableEvents,
    defineCustomElement: defineMvxAddressTable
});

export type MvxAnglesLeftIconEvents = NonNullable<unknown>;

export const MvxAnglesLeftIcon: StencilReactComponent<MvxAnglesLeftIconElement, MvxAnglesLeftIconEvents> = /*@__PURE__*/ createComponent<MvxAnglesLeftIconElement, MvxAnglesLeftIconEvents>({
    tagName: 'mvx-angles-left-icon',
    elementClass: MvxAnglesLeftIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxAnglesLeftIconEvents,
    defineCustomElement: defineMvxAnglesLeftIcon
});

export type MvxAnglesRightIconEvents = NonNullable<unknown>;

export const MvxAnglesRightIcon: StencilReactComponent<MvxAnglesRightIconElement, MvxAnglesRightIconEvents> = /*@__PURE__*/ createComponent<MvxAnglesRightIconElement, MvxAnglesRightIconEvents>({
    tagName: 'mvx-angles-right-icon',
    elementClass: MvxAnglesRightIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxAnglesRightIconEvents,
    defineCustomElement: defineMvxAnglesRightIcon
});

export type MvxArcExtensionProviderIconEvents = NonNullable<unknown>;

export const MvxArcExtensionProviderIcon: StencilReactComponent<MvxArcExtensionProviderIconElement, MvxArcExtensionProviderIconEvents> = /*@__PURE__*/ createComponent<MvxArcExtensionProviderIconElement, MvxArcExtensionProviderIconEvents>({
    tagName: 'mvx-arc-extension-provider-icon',
    elementClass: MvxArcExtensionProviderIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxArcExtensionProviderIconEvents,
    defineCustomElement: defineMvxArcExtensionProviderIcon
});

export type MvxArrowRightIconEvents = NonNullable<unknown>;

export const MvxArrowRightIcon: StencilReactComponent<MvxArrowRightIconElement, MvxArrowRightIconEvents> = /*@__PURE__*/ createComponent<MvxArrowRightIconElement, MvxArrowRightIconEvents>({
    tagName: 'mvx-arrow-right-icon',
    elementClass: MvxArrowRightIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxArrowRightIconEvents,
    defineCustomElement: defineMvxArrowRightIcon
});

export type MvxArrowUpRightFromSquareIconEvents = NonNullable<unknown>;

export const MvxArrowUpRightFromSquareIcon: StencilReactComponent<MvxArrowUpRightFromSquareIconElement, MvxArrowUpRightFromSquareIconEvents> = /*@__PURE__*/ createComponent<MvxArrowUpRightFromSquareIconElement, MvxArrowUpRightFromSquareIconEvents>({
    tagName: 'mvx-arrow-up-right-from-square-icon',
    elementClass: MvxArrowUpRightFromSquareIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxArrowUpRightFromSquareIconEvents,
    defineCustomElement: defineMvxArrowUpRightFromSquareIcon
});

export type MvxArrowUpRightIconEvents = NonNullable<unknown>;

export const MvxArrowUpRightIcon: StencilReactComponent<MvxArrowUpRightIconElement, MvxArrowUpRightIconEvents> = /*@__PURE__*/ createComponent<MvxArrowUpRightIconElement, MvxArrowUpRightIconEvents>({
    tagName: 'mvx-arrow-up-right-icon',
    elementClass: MvxArrowUpRightIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxArrowUpRightIconEvents,
    defineCustomElement: defineMvxArrowUpRightIcon
});

export type MvxBackArrowIconEvents = NonNullable<unknown>;

export const MvxBackArrowIcon: StencilReactComponent<MvxBackArrowIconElement, MvxBackArrowIconEvents> = /*@__PURE__*/ createComponent<MvxBackArrowIconElement, MvxBackArrowIconEvents>({
    tagName: 'mvx-back-arrow-icon',
    elementClass: MvxBackArrowIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxBackArrowIconEvents,
    defineCustomElement: defineMvxBackArrowIcon
});

export type MvxBraveExtensionProviderIconEvents = NonNullable<unknown>;

export const MvxBraveExtensionProviderIcon: StencilReactComponent<MvxBraveExtensionProviderIconElement, MvxBraveExtensionProviderIconEvents> = /*@__PURE__*/ createComponent<MvxBraveExtensionProviderIconElement, MvxBraveExtensionProviderIconEvents>({
    tagName: 'mvx-brave-extension-provider-icon',
    elementClass: MvxBraveExtensionProviderIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxBraveExtensionProviderIconEvents,
    defineCustomElement: defineMvxBraveExtensionProviderIcon
});

export type MvxButtonEvents = { onButtonClick: EventName<MvxButtonCustomEvent<MouseEvent>> };

export const MvxButton: StencilReactComponent<MvxButtonElement, MvxButtonEvents> = /*@__PURE__*/ createComponent<MvxButtonElement, MvxButtonEvents>({
    tagName: 'mvx-button',
    elementClass: MvxButtonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onButtonClick: 'buttonClick' } as MvxButtonEvents,
    defineCustomElement: defineMvxButton
});

export type MvxCheckIconEvents = NonNullable<unknown>;

export const MvxCheckIcon: StencilReactComponent<MvxCheckIconElement, MvxCheckIconEvents> = /*@__PURE__*/ createComponent<MvxCheckIconElement, MvxCheckIconEvents>({
    tagName: 'mvx-check-icon',
    elementClass: MvxCheckIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxCheckIconEvents,
    defineCustomElement: defineMvxCheckIcon
});

export type MvxCircleExclamationIconEvents = NonNullable<unknown>;

export const MvxCircleExclamationIcon: StencilReactComponent<MvxCircleExclamationIconElement, MvxCircleExclamationIconEvents> = /*@__PURE__*/ createComponent<MvxCircleExclamationIconElement, MvxCircleExclamationIconEvents>({
    tagName: 'mvx-circle-exclamation-icon',
    elementClass: MvxCircleExclamationIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxCircleExclamationIconEvents,
    defineCustomElement: defineMvxCircleExclamationIcon
});

export type MvxCloseIconEvents = NonNullable<unknown>;

export const MvxCloseIcon: StencilReactComponent<MvxCloseIconElement, MvxCloseIconEvents> = /*@__PURE__*/ createComponent<MvxCloseIconElement, MvxCloseIconEvents>({
    tagName: 'mvx-close-icon',
    elementClass: MvxCloseIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxCloseIconEvents,
    defineCustomElement: defineMvxCloseIcon
});

export type MvxCopyButtonEvents = NonNullable<unknown>;

export const MvxCopyButton: StencilReactComponent<MvxCopyButtonElement, MvxCopyButtonEvents> = /*@__PURE__*/ createComponent<MvxCopyButtonElement, MvxCopyButtonEvents>({
    tagName: 'mvx-copy-button',
    elementClass: MvxCopyButtonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxCopyButtonEvents,
    defineCustomElement: defineMvxCopyButton
});

export type MvxCopyIconEvents = NonNullable<unknown>;

export const MvxCopyIcon: StencilReactComponent<MvxCopyIconElement, MvxCopyIconEvents> = /*@__PURE__*/ createComponent<MvxCopyIconElement, MvxCopyIconEvents>({
    tagName: 'mvx-copy-icon',
    elementClass: MvxCopyIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxCopyIconEvents,
    defineCustomElement: defineMvxCopyIcon
});

export type MvxDataWithExplorerLinkEvents = NonNullable<unknown>;

export const MvxDataWithExplorerLink: StencilReactComponent<MvxDataWithExplorerLinkElement, MvxDataWithExplorerLinkEvents> = /*@__PURE__*/ createComponent<MvxDataWithExplorerLinkElement, MvxDataWithExplorerLinkEvents>({
    tagName: 'mvx-data-with-explorer-link',
    elementClass: MvxDataWithExplorerLinkElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxDataWithExplorerLinkEvents,
    defineCustomElement: defineMvxDataWithExplorerLink
});

export type MvxDefaultTransactionIconLargeEvents = NonNullable<unknown>;

export const MvxDefaultTransactionIconLarge: StencilReactComponent<MvxDefaultTransactionIconLargeElement, MvxDefaultTransactionIconLargeEvents> = /*@__PURE__*/ createComponent<MvxDefaultTransactionIconLargeElement, MvxDefaultTransactionIconLargeEvents>({
    tagName: 'mvx-default-transaction-icon-large',
    elementClass: MvxDefaultTransactionIconLargeElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxDefaultTransactionIconLargeEvents,
    defineCustomElement: defineMvxDefaultTransactionIconLarge
});

export type MvxDefaultTransactionIconSmallEvents = NonNullable<unknown>;

export const MvxDefaultTransactionIconSmall: StencilReactComponent<MvxDefaultTransactionIconSmallElement, MvxDefaultTransactionIconSmallEvents> = /*@__PURE__*/ createComponent<MvxDefaultTransactionIconSmallElement, MvxDefaultTransactionIconSmallEvents>({
    tagName: 'mvx-default-transaction-icon-small',
    elementClass: MvxDefaultTransactionIconSmallElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxDefaultTransactionIconSmallEvents,
    defineCustomElement: defineMvxDefaultTransactionIconSmall
});

export type MvxEdgeExtensionProviderIconEvents = NonNullable<unknown>;

export const MvxEdgeExtensionProviderIcon: StencilReactComponent<MvxEdgeExtensionProviderIconElement, MvxEdgeExtensionProviderIconEvents> = /*@__PURE__*/ createComponent<MvxEdgeExtensionProviderIconElement, MvxEdgeExtensionProviderIconEvents>({
    tagName: 'mvx-edge-extension-provider-icon',
    elementClass: MvxEdgeExtensionProviderIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxEdgeExtensionProviderIconEvents,
    defineCustomElement: defineMvxEdgeExtensionProviderIcon
});

export type MvxExplorerLinkEvents = NonNullable<unknown>;

export const MvxExplorerLink: StencilReactComponent<MvxExplorerLinkElement, MvxExplorerLinkEvents> = /*@__PURE__*/ createComponent<MvxExplorerLinkElement, MvxExplorerLinkEvents>({
    tagName: 'mvx-explorer-link',
    elementClass: MvxExplorerLinkElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxExplorerLinkEvents,
    defineCustomElement: defineMvxExplorerLink
});

export type MvxExtensionProviderIconEvents = NonNullable<unknown>;

export const MvxExtensionProviderIcon: StencilReactComponent<MvxExtensionProviderIconElement, MvxExtensionProviderIconEvents> = /*@__PURE__*/ createComponent<MvxExtensionProviderIconElement, MvxExtensionProviderIconEvents>({
    tagName: 'mvx-extension-provider-icon',
    elementClass: MvxExtensionProviderIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxExtensionProviderIconEvents,
    defineCustomElement: defineMvxExtensionProviderIcon
});

export type MvxFaIconEvents = NonNullable<unknown>;

export const MvxFaIcon: StencilReactComponent<MvxFaIconElement, MvxFaIconEvents> = /*@__PURE__*/ createComponent<MvxFaIconElement, MvxFaIconEvents>({
    tagName: 'mvx-fa-icon',
    elementClass: MvxFaIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxFaIconEvents,
    defineCustomElement: defineMvxFaIcon
});

export type MvxFirefoxExtensionProviderIconEvents = NonNullable<unknown>;

export const MvxFirefoxExtensionProviderIcon: StencilReactComponent<MvxFirefoxExtensionProviderIconElement, MvxFirefoxExtensionProviderIconEvents> = /*@__PURE__*/ createComponent<MvxFirefoxExtensionProviderIconElement, MvxFirefoxExtensionProviderIconEvents>({
    tagName: 'mvx-firefox-extension-provider-icon',
    elementClass: MvxFirefoxExtensionProviderIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxFirefoxExtensionProviderIconEvents,
    defineCustomElement: defineMvxFirefoxExtensionProviderIcon
});

export type MvxFormatAmountEvents = NonNullable<unknown>;

export const MvxFormatAmount: StencilReactComponent<MvxFormatAmountElement, MvxFormatAmountEvents> = /*@__PURE__*/ createComponent<MvxFormatAmountElement, MvxFormatAmountEvents>({
    tagName: 'mvx-format-amount',
    elementClass: MvxFormatAmountElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxFormatAmountEvents,
    defineCustomElement: defineMvxFormatAmount
});

export type MvxLedgerIconEvents = NonNullable<unknown>;

export const MvxLedgerIcon: StencilReactComponent<MvxLedgerIconElement, MvxLedgerIconEvents> = /*@__PURE__*/ createComponent<MvxLedgerIconElement, MvxLedgerIconEvents>({
    tagName: 'mvx-ledger-icon',
    elementClass: MvxLedgerIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxLedgerIconEvents,
    defineCustomElement: defineMvxLedgerIcon
});

export type MvxLedgerProviderIconEvents = NonNullable<unknown>;

export const MvxLedgerProviderIcon: StencilReactComponent<MvxLedgerProviderIconElement, MvxLedgerProviderIconEvents> = /*@__PURE__*/ createComponent<MvxLedgerProviderIconElement, MvxLedgerProviderIconEvents>({
    tagName: 'mvx-ledger-provider-icon',
    elementClass: MvxLedgerProviderIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxLedgerProviderIconEvents,
    defineCustomElement: defineMvxLedgerProviderIcon
});

export type MvxMagnifyingGlassIconEvents = NonNullable<unknown>;

export const MvxMagnifyingGlassIcon: StencilReactComponent<MvxMagnifyingGlassIconElement, MvxMagnifyingGlassIconEvents> = /*@__PURE__*/ createComponent<MvxMagnifyingGlassIconElement, MvxMagnifyingGlassIconEvents>({
    tagName: 'mvx-magnifying-glass-icon',
    elementClass: MvxMagnifyingGlassIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxMagnifyingGlassIconEvents,
    defineCustomElement: defineMvxMagnifyingGlassIcon
});

export type MvxMetamaskProviderIconEvents = NonNullable<unknown>;

export const MvxMetamaskProviderIcon: StencilReactComponent<MvxMetamaskProviderIconElement, MvxMetamaskProviderIconEvents> = /*@__PURE__*/ createComponent<MvxMetamaskProviderIconElement, MvxMetamaskProviderIconEvents>({
    tagName: 'mvx-metamask-provider-icon',
    elementClass: MvxMetamaskProviderIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxMetamaskProviderIconEvents,
    defineCustomElement: defineMvxMetamaskProviderIcon
});

export type MvxMultiversxLogoIconEvents = NonNullable<unknown>;

export const MvxMultiversxLogoIcon: StencilReactComponent<MvxMultiversxLogoIconElement, MvxMultiversxLogoIconEvents> = /*@__PURE__*/ createComponent<MvxMultiversxLogoIconElement, MvxMultiversxLogoIconEvents>({
    tagName: 'mvx-multiversx-logo-icon',
    elementClass: MvxMultiversxLogoIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxMultiversxLogoIconEvents,
    defineCustomElement: defineMvxMultiversxLogoIcon
});

export type MvxMultiversxSymbolIconEvents = NonNullable<unknown>;

export const MvxMultiversxSymbolIcon: StencilReactComponent<MvxMultiversxSymbolIconElement, MvxMultiversxSymbolIconEvents> = /*@__PURE__*/ createComponent<MvxMultiversxSymbolIconElement, MvxMultiversxSymbolIconEvents>({
    tagName: 'mvx-multiversx-symbol-icon',
    elementClass: MvxMultiversxSymbolIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxMultiversxSymbolIconEvents,
    defineCustomElement: defineMvxMultiversxSymbolIcon
});

export type MvxPaginationEvents = { onPageChange: EventName<CustomEvent<number>> };

export const MvxPagination: StencilReactComponent<MvxPaginationElement, MvxPaginationEvents> = /*@__PURE__*/ createComponent<MvxPaginationElement, MvxPaginationEvents>({
    tagName: 'mvx-pagination',
    elementClass: MvxPaginationElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onPageChange: 'pageChange' } as MvxPaginationEvents,
    defineCustomElement: defineMvxPagination
});

export type MvxPaginationEllipsisEvents = NonNullable<unknown>;

export const MvxPaginationEllipsis: StencilReactComponent<MvxPaginationEllipsisElement, MvxPaginationEllipsisEvents> = /*@__PURE__*/ createComponent<MvxPaginationEllipsisElement, MvxPaginationEllipsisEvents>({
    tagName: 'mvx-pagination-ellipsis',
    elementClass: MvxPaginationEllipsisElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxPaginationEllipsisEvents,
    defineCustomElement: defineMvxPaginationEllipsis
});

export type MvxPaginationEllipsisFormEvents = { onSearch: EventName<CustomEvent<number>> };

export const MvxPaginationEllipsisForm: StencilReactComponent<MvxPaginationEllipsisFormElement, MvxPaginationEllipsisFormEvents> = /*@__PURE__*/ createComponent<MvxPaginationEllipsisFormElement, MvxPaginationEllipsisFormEvents>({
    tagName: 'mvx-pagination-ellipsis-form',
    elementClass: MvxPaginationEllipsisFormElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onSearch: 'search' } as MvxPaginationEllipsisFormEvents,
    defineCustomElement: defineMvxPaginationEllipsisForm
});

export type MvxPasskeyProviderIconEvents = NonNullable<unknown>;

export const MvxPasskeyProviderIcon: StencilReactComponent<MvxPasskeyProviderIconElement, MvxPasskeyProviderIconEvents> = /*@__PURE__*/ createComponent<MvxPasskeyProviderIconElement, MvxPasskeyProviderIconEvents>({
    tagName: 'mvx-passkey-provider-icon',
    elementClass: MvxPasskeyProviderIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxPasskeyProviderIconEvents,
    defineCustomElement: defineMvxPasskeyProviderIcon
});

export type MvxPencilIconEvents = NonNullable<unknown>;

export const MvxPencilIcon: StencilReactComponent<MvxPencilIconElement, MvxPencilIconEvents> = /*@__PURE__*/ createComponent<MvxPencilIconElement, MvxPencilIconEvents>({
    tagName: 'mvx-pencil-icon',
    elementClass: MvxPencilIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxPencilIconEvents,
    defineCustomElement: defineMvxPencilIcon
});

export type MvxPreloaderEvents = NonNullable<unknown>;

export const MvxPreloader: StencilReactComponent<MvxPreloaderElement, MvxPreloaderEvents> = /*@__PURE__*/ createComponent<MvxPreloaderElement, MvxPreloaderEvents>({
    tagName: 'mvx-preloader',
    elementClass: MvxPreloaderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxPreloaderEvents,
    defineCustomElement: defineMvxPreloader
});

export type MvxProviderIdleScreenEvents = {
    onClose: EventName<CustomEvent<any>>,
    onAccess: EventName<CustomEvent<any>>
};

export const MvxProviderIdleScreen: StencilReactComponent<MvxProviderIdleScreenElement, MvxProviderIdleScreenEvents> = /*@__PURE__*/ createComponent<MvxProviderIdleScreenElement, MvxProviderIdleScreenEvents>({
    tagName: 'mvx-provider-idle-screen',
    elementClass: MvxProviderIdleScreenElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onClose: 'close',
        onAccess: 'access'
    } as MvxProviderIdleScreenEvents,
    defineCustomElement: defineMvxProviderIdleScreen
});

export type MvxSidePanelEvents = {
    onClose: EventName<CustomEvent<void>>,
    onBack: EventName<CustomEvent<void>>
};

export const MvxSidePanel: StencilReactComponent<MvxSidePanelElement, MvxSidePanelEvents> = /*@__PURE__*/ createComponent<MvxSidePanelElement, MvxSidePanelEvents>({
    tagName: 'mvx-side-panel',
    elementClass: MvxSidePanelElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onClose: 'close',
        onBack: 'back'
    } as MvxSidePanelEvents,
    defineCustomElement: defineMvxSidePanel
});

export type MvxSidePanelHeaderEvents = {
    onRightButtonClick: EventName<CustomEvent<any>>,
    onLeftButtonClick: EventName<CustomEvent<any>>
};

export const MvxSidePanelHeader: StencilReactComponent<MvxSidePanelHeaderElement, MvxSidePanelHeaderEvents> = /*@__PURE__*/ createComponent<MvxSidePanelHeaderElement, MvxSidePanelHeaderEvents>({
    tagName: 'mvx-side-panel-header',
    elementClass: MvxSidePanelHeaderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onRightButtonClick: 'rightButtonClick',
        onLeftButtonClick: 'leftButtonClick'
    } as MvxSidePanelHeaderEvents,
    defineCustomElement: defineMvxSidePanelHeader
});

export type MvxSidePanelSwiperEvents = {
    onSheetDismiss: EventName<CustomEvent<void>>,
    onSheetSnapChange: EventName<CustomEvent<{ index: number; snapPoint: string }>>
};

export const MvxSidePanelSwiper: StencilReactComponent<MvxSidePanelSwiperElement, MvxSidePanelSwiperEvents> = /*@__PURE__*/ createComponent<MvxSidePanelSwiperElement, MvxSidePanelSwiperEvents>({
    tagName: 'mvx-side-panel-swiper',
    elementClass: MvxSidePanelSwiperElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {
        onSheetDismiss: 'sheetDismiss',
        onSheetSnapChange: 'sheetSnapChange'
    } as MvxSidePanelSwiperEvents,
    defineCustomElement: defineMvxSidePanelSwiper
});

export type MvxSingleAngleDownIconEvents = NonNullable<unknown>;

export const MvxSingleAngleDownIcon: StencilReactComponent<MvxSingleAngleDownIconElement, MvxSingleAngleDownIconEvents> = /*@__PURE__*/ createComponent<MvxSingleAngleDownIconElement, MvxSingleAngleDownIconEvents>({
    tagName: 'mvx-single-angle-down-icon',
    elementClass: MvxSingleAngleDownIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxSingleAngleDownIconEvents,
    defineCustomElement: defineMvxSingleAngleDownIcon
});

export type MvxSingleAngleLeftIconEvents = NonNullable<unknown>;

export const MvxSingleAngleLeftIcon: StencilReactComponent<MvxSingleAngleLeftIconElement, MvxSingleAngleLeftIconEvents> = /*@__PURE__*/ createComponent<MvxSingleAngleLeftIconElement, MvxSingleAngleLeftIconEvents>({
    tagName: 'mvx-single-angle-left-icon',
    elementClass: MvxSingleAngleLeftIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxSingleAngleLeftIconEvents,
    defineCustomElement: defineMvxSingleAngleLeftIcon
});

export type MvxSingleAngleRightIconEvents = NonNullable<unknown>;

export const MvxSingleAngleRightIcon: StencilReactComponent<MvxSingleAngleRightIconElement, MvxSingleAngleRightIconEvents> = /*@__PURE__*/ createComponent<MvxSingleAngleRightIconElement, MvxSingleAngleRightIconEvents>({
    tagName: 'mvx-single-angle-right-icon',
    elementClass: MvxSingleAngleRightIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxSingleAngleRightIconEvents,
    defineCustomElement: defineMvxSingleAngleRightIcon
});

export type MvxSpinnerIconEvents = NonNullable<unknown>;

export const MvxSpinnerIcon: StencilReactComponent<MvxSpinnerIconElement, MvxSpinnerIconEvents> = /*@__PURE__*/ createComponent<MvxSpinnerIconElement, MvxSpinnerIconEvents>({
    tagName: 'mvx-spinner-icon',
    elementClass: MvxSpinnerIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxSpinnerIconEvents,
    defineCustomElement: defineMvxSpinnerIcon
});

export type MvxTooltipEvents = { onTriggerRender: EventName<CustomEvent<boolean>> };

export const MvxTooltip: StencilReactComponent<MvxTooltipElement, MvxTooltipEvents> = /*@__PURE__*/ createComponent<MvxTooltipElement, MvxTooltipEvents>({
    tagName: 'mvx-tooltip',
    elementClass: MvxTooltipElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: { onTriggerRender: 'triggerRender' } as MvxTooltipEvents,
    defineCustomElement: defineMvxTooltip
});

export type MvxTransactionAccountEvents = NonNullable<unknown>;

export const MvxTransactionAccount: StencilReactComponent<MvxTransactionAccountElement, MvxTransactionAccountEvents> = /*@__PURE__*/ createComponent<MvxTransactionAccountElement, MvxTransactionAccountEvents>({
    tagName: 'mvx-transaction-account',
    elementClass: MvxTransactionAccountElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTransactionAccountEvents,
    defineCustomElement: defineMvxTransactionAccount
});

export type MvxTransactionAccountNameEvents = NonNullable<unknown>;

export const MvxTransactionAccountName: StencilReactComponent<MvxTransactionAccountNameElement, MvxTransactionAccountNameEvents> = /*@__PURE__*/ createComponent<MvxTransactionAccountNameElement, MvxTransactionAccountNameEvents>({
    tagName: 'mvx-transaction-account-name',
    elementClass: MvxTransactionAccountNameElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTransactionAccountNameEvents,
    defineCustomElement: defineMvxTransactionAccountName
});

export type MvxTransactionAgeEvents = NonNullable<unknown>;

export const MvxTransactionAge: StencilReactComponent<MvxTransactionAgeElement, MvxTransactionAgeEvents> = /*@__PURE__*/ createComponent<MvxTransactionAgeElement, MvxTransactionAgeEvents>({
    tagName: 'mvx-transaction-age',
    elementClass: MvxTransactionAgeElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTransactionAgeEvents,
    defineCustomElement: defineMvxTransactionAge
});

export type MvxTransactionAssetIconEvents = NonNullable<unknown>;

export const MvxTransactionAssetIcon: StencilReactComponent<MvxTransactionAssetIconElement, MvxTransactionAssetIconEvents> = /*@__PURE__*/ createComponent<MvxTransactionAssetIconElement, MvxTransactionAssetIconEvents>({
    tagName: 'mvx-transaction-asset-icon',
    elementClass: MvxTransactionAssetIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTransactionAssetIconEvents,
    defineCustomElement: defineMvxTransactionAssetIcon
});

export type MvxTransactionDirectionBadgeEvents = NonNullable<unknown>;

export const MvxTransactionDirectionBadge: StencilReactComponent<MvxTransactionDirectionBadgeElement, MvxTransactionDirectionBadgeEvents> = /*@__PURE__*/ createComponent<MvxTransactionDirectionBadgeElement, MvxTransactionDirectionBadgeEvents>({
    tagName: 'mvx-transaction-direction-badge',
    elementClass: MvxTransactionDirectionBadgeElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTransactionDirectionBadgeEvents,
    defineCustomElement: defineMvxTransactionDirectionBadge
});

export type MvxTransactionHashEvents = NonNullable<unknown>;

export const MvxTransactionHash: StencilReactComponent<MvxTransactionHashElement, MvxTransactionHashEvents> = /*@__PURE__*/ createComponent<MvxTransactionHashElement, MvxTransactionHashEvents>({
    tagName: 'mvx-transaction-hash',
    elementClass: MvxTransactionHashElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTransactionHashEvents,
    defineCustomElement: defineMvxTransactionHash
});

export type MvxTransactionIconEvents = NonNullable<unknown>;

export const MvxTransactionIcon: StencilReactComponent<MvxTransactionIconElement, MvxTransactionIconEvents> = /*@__PURE__*/ createComponent<MvxTransactionIconElement, MvxTransactionIconEvents>({
    tagName: 'mvx-transaction-icon',
    elementClass: MvxTransactionIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTransactionIconEvents,
    defineCustomElement: defineMvxTransactionIcon
});

export type MvxTransactionListItemEvents = NonNullable<unknown>;

export const MvxTransactionListItem: StencilReactComponent<MvxTransactionListItemElement, MvxTransactionListItemEvents> = /*@__PURE__*/ createComponent<MvxTransactionListItemElement, MvxTransactionListItemEvents>({
    tagName: 'mvx-transaction-list-item',
    elementClass: MvxTransactionListItemElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTransactionListItemEvents,
    defineCustomElement: defineMvxTransactionListItem
});

export type MvxTransactionMethodEvents = NonNullable<unknown>;

export const MvxTransactionMethod: StencilReactComponent<MvxTransactionMethodElement, MvxTransactionMethodEvents> = /*@__PURE__*/ createComponent<MvxTransactionMethodElement, MvxTransactionMethodEvents>({
    tagName: 'mvx-transaction-method',
    elementClass: MvxTransactionMethodElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTransactionMethodEvents,
    defineCustomElement: defineMvxTransactionMethod
});

export type MvxTransactionShardsEvents = NonNullable<unknown>;

export const MvxTransactionShards: StencilReactComponent<MvxTransactionShardsElement, MvxTransactionShardsEvents> = /*@__PURE__*/ createComponent<MvxTransactionShardsElement, MvxTransactionShardsEvents>({
    tagName: 'mvx-transaction-shards',
    elementClass: MvxTransactionShardsElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTransactionShardsEvents,
    defineCustomElement: defineMvxTransactionShards
});

export type MvxTransactionValueEvents = NonNullable<unknown>;

export const MvxTransactionValue: StencilReactComponent<MvxTransactionValueElement, MvxTransactionValueEvents> = /*@__PURE__*/ createComponent<MvxTransactionValueElement, MvxTransactionValueEvents>({
    tagName: 'mvx-transaction-value',
    elementClass: MvxTransactionValueElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTransactionValueEvents,
    defineCustomElement: defineMvxTransactionValue
});

export type MvxTransactionsTableEvents = NonNullable<unknown>;

export const MvxTransactionsTable: StencilReactComponent<MvxTransactionsTableElement, MvxTransactionsTableEvents> = /*@__PURE__*/ createComponent<MvxTransactionsTableElement, MvxTransactionsTableEvents>({
    tagName: 'mvx-transactions-table',
    elementClass: MvxTransactionsTableElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTransactionsTableEvents,
    defineCustomElement: defineMvxTransactionsTable
});

export type MvxTriangularWarningIconEvents = NonNullable<unknown>;

export const MvxTriangularWarningIcon: StencilReactComponent<MvxTriangularWarningIconElement, MvxTriangularWarningIconEvents> = /*@__PURE__*/ createComponent<MvxTriangularWarningIconElement, MvxTriangularWarningIconEvents>({
    tagName: 'mvx-triangular-warning-icon',
    elementClass: MvxTriangularWarningIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTriangularWarningIconEvents,
    defineCustomElement: defineMvxTriangularWarningIcon
});

export type MvxTrimEvents = NonNullable<unknown>;

export const MvxTrim: StencilReactComponent<MvxTrimElement, MvxTrimEvents> = /*@__PURE__*/ createComponent<MvxTrimElement, MvxTrimEvents>({
    tagName: 'mvx-trim',
    elementClass: MvxTrimElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxTrimEvents,
    defineCustomElement: defineMvxTrim
});

export type MvxUnlockButtonEvents = NonNullable<unknown>;

export const MvxUnlockButton: StencilReactComponent<MvxUnlockButtonElement, MvxUnlockButtonEvents> = /*@__PURE__*/ createComponent<MvxUnlockButtonElement, MvxUnlockButtonEvents>({
    tagName: 'mvx-unlock-button',
    elementClass: MvxUnlockButtonElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxUnlockButtonEvents,
    defineCustomElement: defineMvxUnlockButton
});

export type MvxWalletConnectAppGalleryIconEvents = NonNullable<unknown>;

export const MvxWalletConnectAppGalleryIcon: StencilReactComponent<MvxWalletConnectAppGalleryIconElement, MvxWalletConnectAppGalleryIconEvents> = /*@__PURE__*/ createComponent<MvxWalletConnectAppGalleryIconElement, MvxWalletConnectAppGalleryIconEvents>({
    tagName: 'mvx-wallet-connect-app-gallery-icon',
    elementClass: MvxWalletConnectAppGalleryIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxWalletConnectAppGalleryIconEvents,
    defineCustomElement: defineMvxWalletConnectAppGalleryIcon
});

export type MvxWalletConnectAppStoreIconEvents = NonNullable<unknown>;

export const MvxWalletConnectAppStoreIcon: StencilReactComponent<MvxWalletConnectAppStoreIconElement, MvxWalletConnectAppStoreIconEvents> = /*@__PURE__*/ createComponent<MvxWalletConnectAppStoreIconElement, MvxWalletConnectAppStoreIconEvents>({
    tagName: 'mvx-wallet-connect-app-store-icon',
    elementClass: MvxWalletConnectAppStoreIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxWalletConnectAppStoreIconEvents,
    defineCustomElement: defineMvxWalletConnectAppStoreIcon
});

export type MvxWalletConnectGooglePlayIconEvents = NonNullable<unknown>;

export const MvxWalletConnectGooglePlayIcon: StencilReactComponent<MvxWalletConnectGooglePlayIconElement, MvxWalletConnectGooglePlayIconEvents> = /*@__PURE__*/ createComponent<MvxWalletConnectGooglePlayIconElement, MvxWalletConnectGooglePlayIconEvents>({
    tagName: 'mvx-wallet-connect-google-play-icon',
    elementClass: MvxWalletConnectGooglePlayIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxWalletConnectGooglePlayIconEvents,
    defineCustomElement: defineMvxWalletConnectGooglePlayIcon
});

export type MvxWalletProviderIconEvents = NonNullable<unknown>;

export const MvxWalletProviderIcon: StencilReactComponent<MvxWalletProviderIconElement, MvxWalletProviderIconEvents> = /*@__PURE__*/ createComponent<MvxWalletProviderIconElement, MvxWalletProviderIconEvents>({
    tagName: 'mvx-wallet-provider-icon',
    elementClass: MvxWalletProviderIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxWalletProviderIconEvents,
    defineCustomElement: defineMvxWalletProviderIcon
});

export type MvxXaliasProviderIconEvents = NonNullable<unknown>;

export const MvxXaliasProviderIcon: StencilReactComponent<MvxXaliasProviderIconElement, MvxXaliasProviderIconEvents> = /*@__PURE__*/ createComponent<MvxXaliasProviderIconElement, MvxXaliasProviderIconEvents>({
    tagName: 'mvx-xalias-provider-icon',
    elementClass: MvxXaliasProviderIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxXaliasProviderIconEvents,
    defineCustomElement: defineMvxXaliasProviderIcon
});

export type MvxXportalDownloadQrIconEvents = NonNullable<unknown>;

export const MvxXportalDownloadQrIcon: StencilReactComponent<MvxXportalDownloadQrIconElement, MvxXportalDownloadQrIconEvents> = /*@__PURE__*/ createComponent<MvxXportalDownloadQrIconElement, MvxXportalDownloadQrIconEvents>({
    tagName: 'mvx-xportal-download-qr-icon',
    elementClass: MvxXportalDownloadQrIconElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxXportalDownloadQrIconEvents,
    defineCustomElement: defineMvxXportalDownloadQrIcon
});

export type MvxXportalQrCodePreloaderEvents = NonNullable<unknown>;

export const MvxXportalQrCodePreloader: StencilReactComponent<MvxXportalQrCodePreloaderElement, MvxXportalQrCodePreloaderEvents> = /*@__PURE__*/ createComponent<MvxXportalQrCodePreloaderElement, MvxXportalQrCodePreloaderEvents>({
    tagName: 'mvx-xportal-qr-code-preloader',
    elementClass: MvxXportalQrCodePreloaderElement,
    // @ts-ignore - ignore potential React type mismatches between the Stencil Output Target and your project.
    react: React,
    events: {} as MvxXportalQrCodePreloaderEvents,
    defineCustomElement: defineMvxXportalQrCodePreloader
});
