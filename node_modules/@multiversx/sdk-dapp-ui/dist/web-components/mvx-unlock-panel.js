import { p as proxyCustomElement, H, h } from './index2.js';
import { A as ANIMATION_DELAY_PROMISE } from './side-panel.constants.js';
import { P as ProviderTypeEnum } from './provider.types.js';
import { E as EventBus, C as ConnectionMonitor } from './EventBus.js';
import { U as UnlockPanelGroupSlotEnum, d as defineCustomElement$3 } from './unlock-panel-group.js';
import { g as getIsExtensionAvailable, a as getIsMetaMaskAvailable } from './index4.js';
import { d as defineCustomElement$g } from './arrow-up-right-icon.js';
import { d as defineCustomElement$f } from './back-arrow-icon.js';
import { d as defineCustomElement$e } from './button.js';
import { d as defineCustomElement$d } from './close-icon.js';
import { d as defineCustomElement$c } from './ledger-icon.js';
import { d as defineCustomElement$b } from './ledger-intro.js';
import { d as defineCustomElement$a } from './provider-idle-screen.js';
import { d as defineCustomElement$9 } from './side-panel.js';
import { d as defineCustomElement$8 } from './side-panel-header.js';
import { d as defineCustomElement$7 } from './side-panel-swiper.js';
import { d as defineCustomElement$6 } from './spinner-icon.js';
import { d as defineCustomElement$5 } from './unlock-button.js';
import { d as defineCustomElement$4 } from './unlock-panel-footer.js';
import { d as defineCustomElement$2 } from './unlock-provider-button.js';

var UnlockPanelEventsEnum;
(function (UnlockPanelEventsEnum) {
    UnlockPanelEventsEnum["OPEN"] = "OPEN";
    UnlockPanelEventsEnum["CLOSE"] = "CLOSE";
    UnlockPanelEventsEnum["LOGIN"] = "LOGIN";
    UnlockPanelEventsEnum["CANCEL_LOGIN"] = "CANCEL_LOGIN";
    UnlockPanelEventsEnum["CANCEL_IN_PROVIDER"] = "CANCEL_IN_PROVIDER";
    /**
     * User clicks Close button inside mounted provider
     */
    UnlockPanelEventsEnum["ANCHOR_CLOSE"] = "ANCHOR_CLOSE";
})(UnlockPanelEventsEnum || (UnlockPanelEventsEnum = {}));

const unlockPanelCss = "/*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer theme{:host,:root{--mvx-color-accent:var(--mvx-text-accent-color);--mvx-spacing:.25rem;--mvx-radius-lg:.5rem;--mvx-font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--mvx-font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--mvx-default-font-family:var(--mvx-font-sans);--mvx-default-mono-font-family:var(--mvx-font-mono)}}@layer base{*,::backdrop,:after,:before{border:0 solid;box-sizing:border-box;margin:0;padding:0}::file-selector-button{appearance:button;background-color:#0000;border:0 solid;border-radius:0;box-sizing:border-box;color:inherit;font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;margin:0;margin-inline-end:4px;opacity:1;padding:0}:host,html{-webkit-text-size-adjust:100%;font-family:var(--mvx-default-font-family,ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\");font-feature-settings:var(--mvx-default-font-feature-settings,normal);font-variation-settings:var(--mvx-default-font-variation-settings,normal);line-height:1.5;tab-size:4;-webkit-tap-highlight-color:transparent}hr{border-top-width:1px;color:inherit;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:var(--mvx-default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace);font-feature-settings:var(--mvx-default-mono-font-feature-settings,normal);font-size:1em;font-variation-settings:var(--mvx-default-mono-font-variation-settings,normal)}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}menu,ol,ul{list-style:none}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}button,input,optgroup,select,textarea{background-color:#0000;border-radius:0;color:inherit;font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;opacity:1}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::placeholder{opacity:1}@supports (not ((-webkit-appearance:-apple-pay-button))) or (contain-intrinsic-size:1px){::placeholder{color:currentColor}@supports (color:color-mix(in lab,red,red)){::placeholder{color:color-mix(in oklab,currentColor 50%,transparent)}}}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{display:inline-flex;padding-block:0}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field,::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-meridiem-field,::-webkit-datetime-edit-millisecond-field{padding-block:0}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){appearance:button}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}}@layer components;@layer utilities{.mvx\\:mt-auto{margin-top:auto}.mvx\\:ml-auto{margin-left:auto}.mvx\\:hidden{display:none}.mvx\\:h-auto\\!{height:auto!important}.mvx\\:w-4\\!{width:calc(var(--mvx-spacing)*4)!important}.mvx\\:w-full{width:100%}.mvx\\:overflow-hidden{overflow:hidden}.mvx\\:rounded-br-lg{border-bottom-right-radius:var(--mvx-radius-lg)}.mvx\\:rounded-bl-lg{border-bottom-left-radius:var(--mvx-radius-lg)}.mvx\\:fill-accent\\!{fill:var(--mvx-color-accent)!important}} /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components;@layer utilities{} /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components,utilities /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer theme{:host,:root{--mvx-font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--mvx-font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--mvx-spacing:.25rem;--mvx-radius-lg:.5rem;--mvx-default-font-family:var(--mvx-font-sans);--mvx-default-mono-font-family:var(--mvx-font-mono)}}@layer base{}@layer components;@layer utilities{.mvx\\:h-auto{height:auto}.mvx\\:w-48{width:calc(var(--mvx-spacing)*48)}.mvx\\:w-50{width:calc(var(--mvx-spacing)*50)}} /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer base{}@layer base{}@layer components;.unlock-panel-anchor{display:flex;flex:1;flex-direction:column;overflow:hidden}.unlock-panel{display:flex;flex-direction:column;height:100%;justify-content:space-between;overflow:auto;padding-bottom:calc(var(--mvx-spacing)*6)}.unlock-panel .unlock-panel-groups{display:flex;flex-direction:column;gap:calc(var(--mvx-spacing)*4);padding-top:calc(var(--mvx-spacing)*6)}.unlock-panel::-webkit-scrollbar{display:none}@media (min-width:30rem){.mvx\\:xs\\:flex{display:flex}.mvx\\:xs\\:mt-5{margin-top:calc(var(--mvx-spacing)*5)}.mvx\\:xs\\:h-85{height:calc(var(--mvx-spacing)*85)}.mvx\\:xs\\:w-100{width:calc(var(--mvx-spacing)*100)}}@media (min-width:40rem){.mvx\\:sm\\:block{display:block}.mvx\\:sm\\:flex{display:flex}.mvx\\:sm\\:hidden{display:none}}";

const unlockPanelClasses = {
    detectedPanelGroup: 'mvx:hidden mvx:sm:flex',
    desktopPanelGroupTitle: 'mvx:hidden mvx:sm:flex',
    mobilePanelGroupTitle: 'mvx:sm:hidden',
};
const UnlockPanel = /*@__PURE__*/ proxyCustomElement(class UnlockPanel extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.eventBus = new EventBus();
        this.unsubscribeFunctions = [];
        this.anchor = null;
        this.connectionMonitor = new ConnectionMonitor();
        this.isOpen = false;
        this.walletAddress = null;
        this.allowedProviders = [];
        this.isLoggingIn = false;
        this.isIntroScreenVisible = false;
        this.selectedMethod = null;
        this.unlockPanelUpdate = ({ providers, walletAddress }) => {
            this.isOpen = true;
            this.walletAddress = walletAddress;
            this.allowedProviders = providers;
        };
        this.handleResetLoginState = () => {
            this.isLoggingIn = false;
            this.isIntroScreenVisible = false;
            this.selectedMethod = null;
            if (!this.anchor) {
                return;
            }
            while (this.anchor.firstChild) {
                this.anchor.removeChild(this.anchor.firstChild);
            }
            this.eventBus.publish(UnlockPanelEventsEnum.CANCEL_LOGIN);
        };
        this.handleClose = () => {
            if (this.selectedMethod) {
                this.eventBus.publish(UnlockPanelEventsEnum.CANCEL_LOGIN);
            }
            this.eventBus.publish(UnlockPanelEventsEnum.CLOSE);
        };
        this.handleAccess = () => {
            this.isIntroScreenVisible = false;
            this.isLoggingIn = true;
            this.eventBus.publish(UnlockPanelEventsEnum.LOGIN, { type: this.selectedMethod.type, anchor: this.anchor });
        };
    }
    async getEventBus() {
        await this.connectionMonitor.waitForConnection();
        return this.eventBus;
    }
    async closeWithAnimation() {
        this.isOpen = false;
        const animationDelay = await ANIMATION_DELAY_PROMISE;
        return animationDelay;
    }
    componentDidLoad() {
        const unsubDataUpdate = this.eventBus.subscribe(UnlockPanelEventsEnum.OPEN, this.unlockPanelUpdate);
        const unsubCancelInProvider = this.eventBus.subscribe(UnlockPanelEventsEnum.CANCEL_IN_PROVIDER, this.handleResetLoginState);
        this.unsubscribeFunctions.push(unsubDataUpdate, unsubCancelInProvider);
        this.connectionMonitor.connect();
    }
    async disconnectedCallback() {
        this.unsubscribeFunctions.forEach(unsub => unsub());
        this.unsubscribeFunctions = [];
        this.isLoggingIn = false;
        this.selectedMethod = null;
        this.isOpen = false;
        this.isIntroScreenVisible = false;
        this.allowedProviders = [];
    }
    isExtensionInstalled(currentProvider) {
        return currentProvider === ProviderTypeEnum.extension && getIsExtensionAvailable();
    }
    isMetaMaskInstalled(currentProvider) {
        return currentProvider === ProviderTypeEnum.metamask && getIsMetaMaskAvailable();
    }
    isCustomProvider(currentProvider) {
        return !Object.values(ProviderTypeEnum).includes(currentProvider);
    }
    setAnchor(element) {
        if (!element) {
            return;
        }
        this.anchor = element;
        this.anchor.addEventListener(UnlockPanelEventsEnum.ANCHOR_CLOSE, this.handleResetLoginState);
    }
    handleLogin(provider) {
        this.selectedMethod = provider;
        switch (provider.type) {
            case ProviderTypeEnum.ledger:
                this.isIntroScreenVisible = true;
                break;
            case ProviderTypeEnum.crossWindow:
            case ProviderTypeEnum.extension:
            case ProviderTypeEnum.metamask:
            case ProviderTypeEnum.passkey:
                this.isIntroScreenVisible = true;
                this.isLoggingIn = true;
                this.eventBus.publish(UnlockPanelEventsEnum.LOGIN, { type: provider.type, anchor: this.anchor });
                break;
            default:
                this.handleAccess();
        }
    }
    render() {
        const detectedProviders = this.allowedProviders.filter(allowedProvider => this.isExtensionInstalled(allowedProvider.type) || this.isMetaMaskInstalled(allowedProvider.type));
        const otherProviders = this.allowedProviders.filter(allowedProvider => !detectedProviders.includes(allowedProvider));
        const panelTitle = this.selectedMethod ? this.selectedMethod.name : 'Connect a wallet';
        const hasDetectedProviders = detectedProviders.length > 0;
        const isProviderScreenVisible = !this.isLoggingIn && !this.isIntroScreenVisible;
        const isCustomProviderActive = this.selectedMethod && this.isCustomProvider(this.selectedMethod.type);
        return (h("mvx-side-panel", { key: '6017b5e1a68431315052e3592705dcd5683803b7', isOpen: this.isOpen, panelTitle: panelTitle, onClose: this.handleClose, onBack: this.handleResetLoginState, hasBackButton: isCustomProviderActive, showHeader: isProviderScreenVisible || isCustomProviderActive }, h("div", { key: '9c446e4f052f44f93256533719cd22504c1a04f6', id: "anchor", ref: (element) => this.setAnchor(element), class: { 'unlock-panel-anchor': this.isLoggingIn || this.isIntroScreenVisible } }, this.isIntroScreenVisible && (h("mvx-provider-idle-screen", { key: '87e12f96851154ae987614c470d81e3b9a79518b', onAccess: this.handleAccess, provider: this.selectedMethod, onClose: this.handleResetLoginState }))), isProviderScreenVisible && (h("div", { key: 'ad6c04fec9f60200205f0c46c496b62421c26afe', class: "unlock-panel" }, h("div", { key: '90cd69b8ab3c192a650aa65a8db40b0d39490ff0', class: "unlock-panel-groups" }, hasDetectedProviders && (h("mvx-unlock-panel-group", { key: 'e0ac35c930826af8cbf72e17d9e78f1f34cd25e4', providers: detectedProviders, onLogin: (event) => this.handleLogin(event.detail), class: unlockPanelClasses.detectedPanelGroup }, h("div", { key: '3a7213dd2b01b53a77613b93dda5aeab6ef9d7dc', slot: UnlockPanelGroupSlotEnum.groupLabel }, "Detected"))), h("mvx-unlock-panel-group", { key: '206d11214a7ed3db56b64e1b326a3fa40e312cd1', providers: otherProviders, onLogin: (event) => this.handleLogin(event.detail) }, h("div", { key: 'bc13b15b7b1cde7d7eeebee9fe91dd170a1ce831', slot: UnlockPanelGroupSlotEnum.groupLabel }, h("div", { key: '5afdda746f1068b14903475f0bde29b05c2f14f7', class: unlockPanelClasses.mobilePanelGroupTitle }, "Options"), h("div", { key: 'b9dddd3e4237b3ededa9716aff051562a5866bd0', class: unlockPanelClasses.desktopPanelGroupTitle }, hasDetectedProviders ? 'Other Options' : 'Options')), h("slot", { key: 'e387059b69c33aa2bf68590a3c1597539c896afc' }))), h("mvx-unlock-panel-footer", { key: '112eb9f974604c840a794cd9db63095b1c81db2d', walletAddress: this.walletAddress })))));
    }
    get hostElement() { return this; }
    static get style() { return unlockPanelCss; }
}, [257, "mvx-unlock-panel", {
        "isOpen": [32],
        "walletAddress": [32],
        "allowedProviders": [32],
        "isLoggingIn": [32],
        "isIntroScreenVisible": [32],
        "selectedMethod": [32],
        "getEventBus": [64],
        "closeWithAnimation": [64]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["mvx-unlock-panel", "mvx-arrow-up-right-icon", "mvx-back-arrow-icon", "mvx-button", "mvx-close-icon", "mvx-ledger-icon", "mvx-ledger-intro", "mvx-provider-idle-screen", "mvx-side-panel", "mvx-side-panel-header", "mvx-side-panel-swiper", "mvx-spinner-icon", "mvx-unlock-button", "mvx-unlock-panel-footer", "mvx-unlock-panel-group", "mvx-unlock-provider-button"];
    components.forEach(tagName => { switch (tagName) {
        case "mvx-unlock-panel":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, UnlockPanel);
            }
            break;
        case "mvx-arrow-up-right-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$g();
            }
            break;
        case "mvx-back-arrow-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$f();
            }
            break;
        case "mvx-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$e();
            }
            break;
        case "mvx-close-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$d();
            }
            break;
        case "mvx-ledger-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$c();
            }
            break;
        case "mvx-ledger-intro":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "mvx-provider-idle-screen":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "mvx-side-panel":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "mvx-side-panel-header":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "mvx-side-panel-swiper":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "mvx-spinner-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "mvx-unlock-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "mvx-unlock-panel-footer":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "mvx-unlock-panel-group":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "mvx-unlock-provider-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const MvxUnlockPanel = UnlockPanel;
const defineCustomElement = defineCustomElement$1;

export { MvxUnlockPanel, defineCustomElement };
