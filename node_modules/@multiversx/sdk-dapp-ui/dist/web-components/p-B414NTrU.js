import { p as proxyCustomElement, H, h } from './p-CX8jKKkc.js';
import { c as classNames } from './p-DMLRPGid.js';
import { d as defineCustomElement$2 } from './p-BIRZIeg3.js';
import { d as defineCustomElement$1 } from './p-DIq3jD3F.js';

const isWindowAvailable = () => typeof window != 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.location) != 'undefined';

function fallbackCopyTextToClipboard(text) {
    let success = false;
    if (!document || !document.body) {
        console.error('Document or document.body is not available');
        return success;
    }
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.left = '-9999px';
    textArea.style.top = '0';
    document.body.appendChild(textArea);
    try {
        textArea.focus();
        textArea.setSelectionRange(0, textArea.value.length);
        success = document.execCommand('copy');
    }
    catch (err) {
        console.error('Fallback: Oops, unable to copy', err);
    }
    finally {
        document.body.removeChild(textArea);
    }
    return success;
}
async function copyToClipboard(text) {
    if (!isWindowAvailable()) {
        return false;
    }
    let success = false;
    if (!navigator.clipboard) {
        success = fallbackCopyTextToClipboard(text);
    }
    else {
        success = await navigator.clipboard.writeText(text).then(function done() {
            return true;
        }, function error(err) {
            console.error('Async: Could not copy text: ', err);
            return false;
        });
    }
    return success;
}

// prettier-ignore
const styles = {
    copyButton: 'copy-button mvx:flex',
    copyButtonIcon: 'copy-button-icon mvx:flex mvx:cursor-pointer mvx:justify-center mvx:transition-opacity mvx:duration-200 mvx:ease-in-out mvx:hover:opacity-80',
};
const CopyButton = /*@__PURE__*/ proxyCustomElement(class CopyButton extends H {
    constructor() {
        super();
        this.__registerHost();
        this.timeoutId = null;
        this.isSuccess = false;
    }
    async handleClick(event) {
        const trimmedText = this.text ? this.text.trim() : this.text;
        const success = await copyToClipboard(trimmedText);
        const setSuccessStateTo = (newSuccessState) => {
            this.isSuccess = newSuccessState;
        };
        event.preventDefault();
        event.stopPropagation();
        setSuccessStateTo(success);
        if (success) {
            this.timeoutId = window.setTimeout(() => setSuccessStateTo(false), 2000);
        }
    }
    disconnectedCallback() {
        if (this.timeoutId) {
            clearTimeout(this.timeoutId);
            this.timeoutId = null;
        }
    }
    render() {
        return (h("div", { key: '9a35d39d53a5442c7e17f62a7339cd727b94fc34', onClick: this.handleClick.bind(this), class: {
                [styles.copyButton]: true,
                [this.class]: Boolean(this.class),
            } }, this.isSuccess ? (h("mvx-check-icon", { class: this.iconClass })) : (h("mvx-copy-icon", { class: classNames({
                [styles.copyButtonIcon]: true,
                [this.iconClass]: Boolean(this.iconClass),
            }) }))));
    }
}, [256, "mvx-copy-button", {
        "iconClass": [1, "icon-class"],
        "class": [1],
        "text": [1],
        "isSuccess": [32]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["mvx-copy-button", "mvx-check-icon", "mvx-copy-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "mvx-copy-button":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, CopyButton);
            }
            break;
        case "mvx-check-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "mvx-copy-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { CopyButton as C, defineCustomElement as d };
