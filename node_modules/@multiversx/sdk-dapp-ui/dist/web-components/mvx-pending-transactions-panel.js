import { p as proxyCustomElement, H, h } from './index2.js';
import { A as ANIMATION_DELAY_PROMISE } from './side-panel.constants.js';
import { P as ProviderTypeEnum } from './provider.types.js';
import { E as EventBus, C as ConnectionMonitor } from './EventBus.js';
import { d as defineCustomElement$b } from './back-arrow-icon.js';
import { d as defineCustomElement$a } from './button.js';
import { d as defineCustomElement$9 } from './close-icon.js';
import { d as defineCustomElement$8 } from './ledger-icon.js';
import { d as defineCustomElement$7 } from './ledger-intro.js';
import { d as defineCustomElement$6 } from './provider-idle-screen.js';
import { d as defineCustomElement$5 } from './side-panel.js';
import { d as defineCustomElement$4 } from './side-panel-header.js';
import { d as defineCustomElement$3 } from './side-panel-swiper.js';
import { d as defineCustomElement$2 } from './spinner-icon.js';

// types here need to be synced with the types in sdk-dapp pendingTransactions.types.ts
var PendingTransactionsEventsEnum;
(function (PendingTransactionsEventsEnum) {
    PendingTransactionsEventsEnum["CLOSE"] = "CLOSE_PENDING_TRANSACTIONS";
    PendingTransactionsEventsEnum["DATA_UPDATE"] = "DATA_UPDATE_PENDING_TRANSACTIONS";
})(PendingTransactionsEventsEnum || (PendingTransactionsEventsEnum = {}));

const pendingTransactionsPanelCss = "/*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer theme{:host,:root{--mvx-font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--mvx-font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--mvx-default-font-family:var(--mvx-font-sans);--mvx-default-mono-font-family:var(--mvx-font-mono)}}@layer base{*,::backdrop,:after,:before{border:0 solid;box-sizing:border-box;margin:0;padding:0}::file-selector-button{appearance:button;background-color:#0000;border:0 solid;border-radius:0;box-sizing:border-box;color:inherit;font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;margin:0;margin-inline-end:4px;opacity:1;padding:0}:host,html{-webkit-text-size-adjust:100%;font-family:var(--mvx-default-font-family,ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\");font-feature-settings:var(--mvx-default-font-feature-settings,normal);font-variation-settings:var(--mvx-default-font-variation-settings,normal);line-height:1.5;tab-size:4;-webkit-tap-highlight-color:transparent}hr{border-top-width:1px;color:inherit;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:var(--mvx-default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace);font-feature-settings:var(--mvx-default-mono-font-feature-settings,normal);font-size:1em;font-variation-settings:var(--mvx-default-mono-font-variation-settings,normal)}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}menu,ol,ul{list-style:none}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}button,input,optgroup,select,textarea{background-color:#0000;border-radius:0;color:inherit;font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;opacity:1}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::placeholder{opacity:1}@supports (not ((-webkit-appearance:-apple-pay-button))) or (contain-intrinsic-size:1px){::placeholder{color:currentColor}@supports (color:color-mix(in lab,red,red)){::placeholder{color:color-mix(in oklab,currentColor 50%,transparent)}}}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{display:inline-flex;padding-block:0}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field,::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-meridiem-field,::-webkit-datetime-edit-millisecond-field{padding-block:0}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){appearance:button}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}}@layer components,utilities /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer theme{:host,:root{--mvx-spacing:.25rem;--mvx-font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--mvx-font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--mvx-default-font-family:var(--mvx-font-sans);--mvx-default-mono-font-family:var(--mvx-font-mono)}}@layer base{}@layer base{}@layer components;@layer utilities{.mvx\\:h-auto{height:auto}.mvx\\:w-48{width:calc(var(--mvx-spacing)*48)}.mvx\\:w-50{width:calc(var(--mvx-spacing)*50)}} /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer base{}@layer base{}@layer components,utilities;.modal-body{align-items:center;display:flex;justify-content:center;padding:16px}.close-button{background-color:var(--mvx-bg-color-primary);border:1px solid #0000;border-radius:.25rem;color:var(--mvx-text-color-primary);cursor:pointer;padding:.375rem .75rem}.pending-transactions-content{display:flex;flex-direction:column;height:100%;padding:24px}.pending-transactions-body{align-items:center;display:flex;flex:1;justify-content:center;padding:16px}@media (min-width:30rem){.mvx\\:xs\\:mt-5{margin-top:calc(var(--mvx-spacing)*5)}.mvx\\:xs\\:h-85{height:calc(var(--mvx-spacing)*85)}.mvx\\:xs\\:w-100{width:calc(var(--mvx-spacing)*100)}}";

const getProviderIntroText = (providerType) => {
    switch (providerType) {
        case ProviderTypeEnum.extension:
            return 'Check  the MultiversX Browser Extension to connect to your wallet.';
        case ProviderTypeEnum.metamask:
            return 'Open the MetaMask Browser Extension to connect to your wallet.';
        case ProviderTypeEnum.passkey:
            return 'Use your predefined passkey to connect to your wallet.';
        case ProviderTypeEnum.crossWindow:
            return 'Follow the steps on MultiversX Web Wallet to connect to your wallet.';
        default:
            return 'Follow the steps on your selected provider to connect to your wallet.';
    }
};
const PendingTransactionsPanel = /*@__PURE__*/ proxyCustomElement(class PendingTransactionsPanel extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.eventBus = new EventBus();
        this.unsubscribeFunctions = [];
        this.connectionMonitor = new ConnectionMonitor();
        this.provider = null;
        this.isOpen = false;
        this.handleClose = () => {
            this.eventBus.publish(PendingTransactionsEventsEnum.CLOSE);
        };
        this.dataUpdate = (newData) => {
            this.provider = newData;
            this.isOpen = true;
        };
    }
    async getEventBus() {
        await this.connectionMonitor.waitForConnection();
        return this.eventBus;
    }
    async closeWithAnimation() {
        this.isOpen = false;
        const animationDelay = await ANIMATION_DELAY_PROMISE;
        return animationDelay;
    }
    componentDidLoad() {
        const unsubDataUpdate = this.eventBus.subscribe(PendingTransactionsEventsEnum.DATA_UPDATE, this.dataUpdate);
        this.unsubscribeFunctions.push(unsubDataUpdate);
        this.connectionMonitor.connect();
    }
    disconnectedCallback() {
        this.resetState();
        this.unsubscribeFunctions.forEach(unsub => unsub());
        this.unsubscribeFunctions = [];
    }
    resetState() {
        this.provider = null;
        this.isOpen = false;
    }
    render() {
        var _a, _b;
        return (h("mvx-side-panel", { key: 'fd35a7f8e3f54f073980a0f59040baea8dc759cc', isOpen: this.isOpen, panelTitle: (_a = this === null || this === void 0 ? void 0 : this.provider) === null || _a === void 0 ? void 0 : _a.name, showHeader: false }, h("mvx-provider-idle-screen", { key: '2a59eb6d34297848d282f9f3af8fdc42a5affbbf', provider: this.provider, onClose: this.handleClose, introTitle: "Signing Transaction", introText: getProviderIntroText((_b = this.provider) === null || _b === void 0 ? void 0 : _b.type) }, h("button", { key: 'ef2bb150b0b73684197cc5fb7ff79e269def81a9', onClick: this.handleClose, slot: "close-button" }, "Close"))));
    }
    static get style() { return pendingTransactionsPanelCss; }
}, [257, "mvx-pending-transactions-panel", {
        "provider": [32],
        "isOpen": [32],
        "getEventBus": [64],
        "closeWithAnimation": [64]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["mvx-pending-transactions-panel", "mvx-back-arrow-icon", "mvx-button", "mvx-close-icon", "mvx-ledger-icon", "mvx-ledger-intro", "mvx-provider-idle-screen", "mvx-side-panel", "mvx-side-panel-header", "mvx-side-panel-swiper", "mvx-spinner-icon"];
    components.forEach(tagName => { switch (tagName) {
        case "mvx-pending-transactions-panel":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, PendingTransactionsPanel);
            }
            break;
        case "mvx-back-arrow-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "mvx-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "mvx-close-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "mvx-ledger-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "mvx-ledger-intro":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "mvx-provider-idle-screen":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "mvx-side-panel":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "mvx-side-panel-header":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "mvx-side-panel-swiper":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "mvx-spinner-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const MvxPendingTransactionsPanel = PendingTransactionsPanel;
const defineCustomElement = defineCustomElement$1;

export { MvxPendingTransactionsPanel, defineCustomElement };
