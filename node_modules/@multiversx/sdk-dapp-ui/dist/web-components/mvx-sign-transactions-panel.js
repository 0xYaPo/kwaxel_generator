import { p as proxyCustomElement, H, h } from './index2.js';
import { A as ANIMATION_DELAY_PROMISE } from './side-panel.constants.js';
import { D as DataTestIdsEnum } from './dataTestIds.enum.js';
import { E as EventBus, C as ConnectionMonitor } from './EventBus.js';
import { T as TransactionTabsEnum, a as SignEventsEnum, d as defineCustomElement$b } from './sign-transactions-advanced-data-decode.js';
import { r as resetState, s as state } from './signTransactionsPanelStore.js';
import { d as defineCustomElement$r } from './arrow-right-icon.js';
import { d as defineCustomElement$q } from './arrow-up-right-from-square-icon.js';
import { d as defineCustomElement$p } from './back-arrow-icon.js';
import { d as defineCustomElement$o } from './button.js';
import { d as defineCustomElement$n } from './check-icon.js';
import { d as defineCustomElement$m } from './close-icon.js';
import { d as defineCustomElement$l } from './copy-button.js';
import { d as defineCustomElement$k } from './copy-icon.js';
import { d as defineCustomElement$j } from './explorer-link.js';
import { d as defineCustomElement$i } from './fa-icon.js';
import { d as defineCustomElement$h } from './pencil-icon.js';
import { d as defineCustomElement$g } from './side-panel.js';
import { d as defineCustomElement$f } from './side-panel-header.js';
import { d as defineCustomElement$e } from './side-panel-swiper.js';
import { d as defineCustomElement$d } from './sign-transactions-advanced.js';
import { d as defineCustomElement$c } from './sign-transactions-advanced-data.js';
import { d as defineCustomElement$a } from './sign-transactions-footer.js';
import { d as defineCustomElement$9 } from './sign-transactions-header.js';
import { d as defineCustomElement$8 } from './sign-transactions-overview.js';
import { d as defineCustomElement$7 } from './single-angle-down-icon.js';
import { d as defineCustomElement$6 } from './single-angle-left-icon.js';
import { d as defineCustomElement$5 } from './single-angle-right-icon.js';
import { d as defineCustomElement$4 } from './spinner-icon.js';
import { d as defineCustomElement$3 } from './tooltip.js';
import { d as defineCustomElement$2 } from './trim.js';

const signTransactionsPanelCss = "/*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer properties{@supports (((-webkit-hyphens:none)) and (not (margin-trim:inline))) or ((-moz-orient:inline) and (not (color:rgb(from red r g b)))){*,::backdrop,:after,:before{--tw-duration:initial;--tw-ease:initial;--tw-leading:initial}}}@layer theme{:host,:root{--mvx-font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--mvx-font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--mvx-spacing:.25rem;--mvx-text-base:1rem;--mvx-text-base--line-height:1.5;--mvx-radius-3xl:1.5rem;--mvx-ease-in-out:cubic-bezier(.4,0,.2,1);--mvx-default-transition-duration:.15s;--mvx-default-transition-timing-function:cubic-bezier(.4,0,.2,1);--mvx-default-font-family:var(--mvx-font-sans);--mvx-default-mono-font-family:var(--mvx-font-mono);--mvx-color-link:var(--mvx-link-color)}}@layer base{*,::backdrop,:after,:before{border:0 solid;box-sizing:border-box;margin:0;padding:0}::file-selector-button{appearance:button;background-color:#0000;border:0 solid;border-radius:0;box-sizing:border-box;color:inherit;font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;margin:0;margin-inline-end:4px;opacity:1;padding:0}:host,html{-webkit-text-size-adjust:100%;font-family:var(--mvx-default-font-family,ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\");font-feature-settings:var(--mvx-default-font-feature-settings,normal);font-variation-settings:var(--mvx-default-font-variation-settings,normal);line-height:1.5;tab-size:4;-webkit-tap-highlight-color:transparent}hr{border-top-width:1px;color:inherit;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:var(--mvx-default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace);font-feature-settings:var(--mvx-default-mono-font-feature-settings,normal);font-size:1em;font-variation-settings:var(--mvx-default-mono-font-variation-settings,normal)}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}menu,ol,ul{list-style:none}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}button,input,optgroup,select,textarea{background-color:#0000;border-radius:0;color:inherit;font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;opacity:1}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::placeholder{opacity:1}@supports (not ((-webkit-appearance:-apple-pay-button))) or (contain-intrinsic-size:1px){::placeholder{color:currentColor}@supports (color:color-mix(in lab,red,red)){::placeholder{color:color-mix(in oklab,currentColor 50%,transparent)}}}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{display:inline-flex;padding-block:0}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field,::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-meridiem-field,::-webkit-datetime-edit-millisecond-field{padding-block:0}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){appearance:button}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}}@layer components;@layer utilities{.mvx\\:absolute{position:absolute}.mvx\\:relative{position:relative}.mvx\\:top-0{top:calc(var(--mvx-spacing)*0)}.mvx\\:right-0{right:calc(var(--mvx-spacing)*0)}.mvx\\:left-0{left:calc(var(--mvx-spacing)*0)}.mvx\\:h-3\\!{height:calc(var(--mvx-spacing)*3)!important}.mvx\\:h-5\\!{height:calc(var(--mvx-spacing)*5)!important}.mvx\\:h-12{height:calc(var(--mvx-spacing)*12)}.mvx\\:w-auto\\!{width:auto!important}.mvx\\:w-full{width:100%}.mvx\\:rotate-90{rotate:90deg}.mvx\\:fill-link\\!{fill:var(--mvx-color-link)!important}.mvx\\:text-base\\!{font-size:var(--mvx-text-base)!important;line-height:var(--tw-leading,var(--mvx-text-base--line-height))!important}.mvx\\:transition-all{transition-duration:var(--tw-duration,var(--mvx-default-transition-duration));transition-property:all;transition-timing-function:var(--tw-ease,var(--mvx-default-transition-timing-function))}.mvx\\:duration-200{--tw-duration:.2s;transition-duration:.2s}.mvx\\:ease-in-out{--tw-ease:var(--mvx-ease-in-out);transition-timing-function:var(--mvx-ease-in-out)}} /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer properties{}@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components,utilities /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer theme{:host,:root{--mvx-font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--mvx-font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--mvx-default-font-family:var(--mvx-font-sans);--mvx-default-mono-font-family:var(--mvx-font-mono)}}@layer base{}@layer base{}@layer components,utilities /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer properties{}@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer properties{}@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer properties{}@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer properties{}@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer properties{}@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer properties{}@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer properties{}@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer properties{}@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer properties{}@layer base{}@layer components;.header{align-items:flex-start;align-self:stretch;justify-content:space-between;min-width:0;padding:24px 24px 12px}.frame,.header{display:flex;flex-shrink:0;flex-wrap:nowrap;position:relative}.frame{align-items:center;height:30px;justify-content:flex-end;padding:0;width:30px}.frame-1{flex:1 0 0;flex-flow:column;gap:4px}.frame-1,.frame-2{align-items:center;display:flex;position:relative}.frame-2{flex-shrink:0;flex-wrap:nowrap;justify-content:flex-end;width:30px}.mx-icon{align-items:center;height:30px;width:30px}.mx-icon,.transaction-navigation{display:flex;flex-shrink:0;flex-wrap:nowrap;justify-content:center;position:relative}.transaction-navigation{align-items:flex-start;align-self:stretch;gap:10px;min-width:0;padding:0 24px}.navigation-icon{flex-wrap:nowrap;height:25px;justify-content:center;width:25px}.navigation-icon,.sign-transaction-content{align-items:center;display:flex;flex-shrink:0;position:relative}.sign-transaction-content{align-self:stretch;flex-flow:column;gap:calc(var(--mvx-spacing)*2);min-width:calc(var(--mvx-spacing)*0)}.sign-transaction-content .sign-transactions-tabs{display:flex;gap:calc(var(--mvx-spacing)*2);margin-right:auto;padding-inline:calc(var(--mvx-spacing)*4)}.sign-transaction-content .sign-transactions-tabs .sign-transactions-tab{height:calc(var(--mvx-spacing)*8);padding-inline:calc(var(--mvx-spacing)*4);--tw-leading:1;transition-duration:var(--tw-duration,var(--mvx-default-transition-duration));transition-property:all;transition-timing-function:var(--tw-ease,var(--mvx-default-transition-timing-function));--tw-duration:.2s;border-radius:var(--mvx-radius-3xl);cursor:pointer;--tw-ease:var(--mvx-ease-in-out);align-items:center;color:var(--mvx-text-color-secondary);display:flex;justify-content:center;line-height:1;position:relative;transition-duration:.2s;transition-timing-function:var(--mvx-ease-in-out)}.sign-transaction-content .sign-transactions-tabs .sign-transactions-tab.active,.sign-transaction-content .sign-transactions-tabs .sign-transactions-tab:hover{background-color:var(--mvx-bg-color-secondary);color:var(--mvx-text-accent-color)}.sign-transaction-content .sign-transactions-tabs .sign-transactions-tab .sign-transactions-tab-text{font-size:var(--mvx-text-base);line-height:var(--tw-leading,var(--mvx-text-base--line-height));position:relative;text-transform:capitalize;z-index:1}.sign-transactions-panel{display:flex;flex:1;flex-direction:column;padding-bottom:calc(var(--mvx-spacing)*6)}@property --tw-duration{syntax:\"*\";inherits:false}@property --tw-ease{syntax:\"*\";inherits:false}@property --tw-leading{syntax:\"*\";inherits:false}@media (max-width:480px){.main-container{margin:0;width:100%}}";

const SignTransactionsPanel = /*@__PURE__*/ proxyCustomElement(class SignTransactionsPanel extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.eventBus = new EventBus();
        this.unsubscribeFunctions = [];
        this.connectionMonitor = new ConnectionMonitor();
        this.isOpen = false;
        this.activeTab = TransactionTabsEnum.overview;
        this.handleClose = () => {
            this.isOpen = false;
            resetState();
            this.eventBus.publish(SignEventsEnum.CLOSE);
        };
        this.dataUpdate = (payload) => {
            this.isOpen = true;
            for (const key in payload) {
                if (Object.prototype.hasOwnProperty.call(state, key)) {
                    state[key] = payload[key];
                }
            }
            state.isWaitingForSignature = false;
        };
        this.handleBack = () => {
            if (state.commonData.currentIndex > 0) {
                state.commonData.currentIndex -= 1;
            }
        };
    }
    async closeWithAnimation() {
        this.isOpen = false;
        const animationDelay = await ANIMATION_DELAY_PROMISE;
        return animationDelay;
    }
    async getEventBus() {
        await this.connectionMonitor.waitForConnection();
        return this.eventBus;
    }
    componentWillLoad() {
        state.onCancel = () => {
            this.handleClose();
        };
        state.onNext = () => {
            this.eventBus.publish(SignEventsEnum.NEXT);
        };
        state.onConfirm = () => {
            this.eventBus.publish(SignEventsEnum.CONFIRM);
        };
        state.onBack = () => {
            this.eventBus.publish(SignEventsEnum.BACK);
        };
        state.setPpuOption = (ppu) => {
            this.eventBus.publish(SignEventsEnum.SET_PPU, ppu);
        };
    }
    componentDidLoad() {
        const unsubDataUpdate = this.eventBus.subscribe(SignEventsEnum.DATA_UPDATE, this.dataUpdate);
        const unsubBack = this.eventBus.subscribe(SignEventsEnum.BACK, this.handleBack);
        this.unsubscribeFunctions.push(unsubDataUpdate, unsubBack);
        this.connectionMonitor.connect();
    }
    disconnectedCallback() {
        resetState();
        this.isOpen = false;
        this.unsubscribeFunctions.forEach(unsub => unsub());
        this.unsubscribeFunctions = [];
    }
    setActiveTab(tab) {
        this.activeTab = tab;
    }
    get overviewProps() {
        var _a, _b, _c, _d, _e;
        const { tokenTransaction, sftTransaction, nftTransaction } = state;
        const txData = sftTransaction || nftTransaction || tokenTransaction;
        return {
            identifier: txData === null || txData === void 0 ? void 0 : txData.identifier,
            usdValue: tokenTransaction === null || tokenTransaction === void 0 ? void 0 : tokenTransaction.usdValue,
            amount: (txData === null || txData === void 0 ? void 0 : txData.amount) || '0',
            tokenIconUrl: txData === null || txData === void 0 ? void 0 : txData.imageURL,
            interactor: (_a = state.commonData) === null || _a === void 0 ? void 0 : _a.receiver,
            interactorIconUrl: (_b = state.commonData) === null || _b === void 0 ? void 0 : _b.receiverIcon,
            action: (_c = state.commonData) === null || _c === void 0 ? void 0 : _c.scCall,
            networkFee: (_d = state.commonData) === null || _d === void 0 ? void 0 : _d.feeInFiatLimit,
            isApp: Boolean((_e = state.commonData) === null || _e === void 0 ? void 0 : _e.scCall),
        };
    }
    render() {
        const transactionTabs = Object.values(TransactionTabsEnum);
        const { commonData } = state;
        const { data, highlight } = commonData;
        return (h("mvx-side-panel", { key: '2b33da51d9aafccc03a7541a82f432b604f9770b', isOpen: this.isOpen, onClose: this.handleClose, panelTitle: "Confirm Transaction", hasBackButton: false }, h("div", { key: 'b8cc872b96ccf3ccff97f46bf9ff3dffbba6fe17', class: "sign-transactions-panel", "data-testid": DataTestIdsEnum.signTransactionsPanel }, h("mvx-sign-transactions-header", { key: '8e59c1080ddccbdfe705b4635a2c03af5672afbb' }), h("div", { key: 'ca2ee4597036effe19d8eac55b0fa711893d3b73', class: "sign-transaction-content" }, h("div", { key: '725e863084656e472d09c2f0a7e5a860ed172a9e', class: "sign-transactions-tabs" }, transactionTabs.map(transactionTab => (h("div", { class: { 'sign-transactions-tab': true, 'active': transactionTab === this.activeTab }, "data-testid": `${DataTestIdsEnum.signTransactionsTab}-${transactionTab.toLowerCase()}`, onClick: () => this.setActiveTab(transactionTab) }, h("div", { class: "sign-transactions-tab-text", "data-testid": DataTestIdsEnum.signTransactionsTabText }, transactionTab))))), this.activeTab === TransactionTabsEnum.overview ? (h("mvx-sign-transactions-overview", Object.assign({ style: { width: '100%' } }, this.overviewProps))) : (h("mvx-sign-transactions-advanced", { style: { width: '100%' }, data: data, highlight: highlight }))), h("mvx-sign-transactions-footer", { key: '9511cfb9b0b96efd66ab98a441abcfaeaaff0e72' }))));
    }
    static get style() { return signTransactionsPanelCss; }
}, [257, "mvx-sign-transactions-panel", {
        "isOpen": [32],
        "activeTab": [32],
        "closeWithAnimation": [64],
        "getEventBus": [64]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["mvx-sign-transactions-panel", "mvx-arrow-right-icon", "mvx-arrow-up-right-from-square-icon", "mvx-back-arrow-icon", "mvx-button", "mvx-check-icon", "mvx-close-icon", "mvx-copy-button", "mvx-copy-icon", "mvx-explorer-link", "mvx-fa-icon", "mvx-pencil-icon", "mvx-side-panel", "mvx-side-panel-header", "mvx-side-panel-swiper", "mvx-sign-transactions-advanced", "mvx-sign-transactions-advanced-data", "mvx-sign-transactions-advanced-data-decode", "mvx-sign-transactions-footer", "mvx-sign-transactions-header", "mvx-sign-transactions-overview", "mvx-single-angle-down-icon", "mvx-single-angle-left-icon", "mvx-single-angle-right-icon", "mvx-spinner-icon", "mvx-tooltip", "mvx-trim"];
    components.forEach(tagName => { switch (tagName) {
        case "mvx-sign-transactions-panel":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, SignTransactionsPanel);
            }
            break;
        case "mvx-arrow-right-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$r();
            }
            break;
        case "mvx-arrow-up-right-from-square-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$q();
            }
            break;
        case "mvx-back-arrow-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$p();
            }
            break;
        case "mvx-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$o();
            }
            break;
        case "mvx-check-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$n();
            }
            break;
        case "mvx-close-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$m();
            }
            break;
        case "mvx-copy-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$l();
            }
            break;
        case "mvx-copy-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$k();
            }
            break;
        case "mvx-explorer-link":
            if (!customElements.get(tagName)) {
                defineCustomElement$j();
            }
            break;
        case "mvx-fa-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$i();
            }
            break;
        case "mvx-pencil-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$h();
            }
            break;
        case "mvx-side-panel":
            if (!customElements.get(tagName)) {
                defineCustomElement$g();
            }
            break;
        case "mvx-side-panel-header":
            if (!customElements.get(tagName)) {
                defineCustomElement$f();
            }
            break;
        case "mvx-side-panel-swiper":
            if (!customElements.get(tagName)) {
                defineCustomElement$e();
            }
            break;
        case "mvx-sign-transactions-advanced":
            if (!customElements.get(tagName)) {
                defineCustomElement$d();
            }
            break;
        case "mvx-sign-transactions-advanced-data":
            if (!customElements.get(tagName)) {
                defineCustomElement$c();
            }
            break;
        case "mvx-sign-transactions-advanced-data-decode":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "mvx-sign-transactions-footer":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "mvx-sign-transactions-header":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "mvx-sign-transactions-overview":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "mvx-single-angle-down-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "mvx-single-angle-left-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "mvx-single-angle-right-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "mvx-spinner-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "mvx-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "mvx-trim":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const MvxSignTransactionsPanel = SignTransactionsPanel;
const defineCustomElement = defineCustomElement$1;

export { MvxSignTransactionsPanel, defineCustomElement };
