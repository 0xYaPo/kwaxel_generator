import { p as proxyCustomElement, H, h } from './p-CX8jKKkc.js';
import { c as classNames } from './p-DMLRPGid.js';
import { g as getProviderButtonIcon } from './p-BUi-J6Pu.js';
import { d as defineCustomElement$2 } from './p-BBy9GThl.js';
import { d as defineCustomElement$1 } from './p-CoFqCpv6.js';

const unlockProviderButtonClasses = {
    button: 'mvx:w-full',
};
const UnlockProviderButton = /*@__PURE__*/ proxyCustomElement(class UnlockProviderButton extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
    }
    render() {
        if (!this.provider) {
            return null;
        }
        const icon = !this.provider.iconUrl
            ? getProviderButtonIcon({ providerType: this.provider.type })
            : null;
        return (h("mvx-unlock-button", { iconUrl: this.provider.iconUrl, label: this.provider.name, type: this.provider.type, class: classNames(this.class, unlockProviderButtonClasses.button), icon: icon, dataTestId: this.provider.type.toString() }));
    }
}, [257, "mvx-unlock-provider-button", {
        "provider": [16],
        "class": [1]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["mvx-unlock-provider-button", "mvx-arrow-up-right-icon", "mvx-unlock-button"];
    components.forEach(tagName => { switch (tagName) {
        case "mvx-unlock-provider-button":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, UnlockProviderButton);
            }
            break;
        case "mvx-arrow-up-right-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "mvx-unlock-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { UnlockProviderButton as U, defineCustomElement as d };
