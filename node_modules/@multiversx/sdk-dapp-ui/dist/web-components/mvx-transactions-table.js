import { p as proxyCustomElement, H, h } from './index2.js';
import { c as classNames } from './index3.js';
import { D as DataTestIdsEnum } from './dataTestIds.enum.js';
import { d as defineCustomElement$g } from './arrow-right-icon.js';
import { d as defineCustomElement$f } from './arrow-up-right-from-square-icon.js';
import { d as defineCustomElement$e } from './explorer-link.js';
import { d as defineCustomElement$d } from './fa-icon.js';
import { d as defineCustomElement$c } from './format-amount.js';
import { d as defineCustomElement$b } from './multiversx-symbol-icon.js';
import { d as defineCustomElement$a } from './transaction-account.js';
import { d as defineCustomElement$9 } from './transaction-account-name.js';
import { d as defineCustomElement$8 } from './transaction-age.js';
import { d as defineCustomElement$7 } from './transaction-hash.js';
import { d as defineCustomElement$6 } from './transaction-icon.js';
import { d as defineCustomElement$5 } from './transaction-method.js';
import { d as defineCustomElement$4 } from './transaction-shards.js';
import { d as defineCustomElement$3 } from './transaction-value.js';
import { d as defineCustomElement$2 } from './trim.js';

const transactionsTableCss = "/*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer theme{:host,:root{--mvx-color-primary:var(--mvx-text-color-primary);--mvx-color-pending:var(--mvx-pending-color);--mvx-color-error:var(--mvx-error-color);--mvx-font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--mvx-font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--mvx-default-font-family:var(--mvx-font-sans);--mvx-default-mono-font-family:var(--mvx-font-mono)}}@layer base{*,::backdrop,:after,:before{border:0 solid;box-sizing:border-box;margin:0;padding:0}::file-selector-button{appearance:button;background-color:#0000;border:0 solid;border-radius:0;box-sizing:border-box;color:inherit;font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;margin:0;margin-inline-end:4px;opacity:1;padding:0}:host,html{-webkit-text-size-adjust:100%;font-family:var(--mvx-default-font-family,ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\");font-feature-settings:var(--mvx-default-font-feature-settings,normal);font-variation-settings:var(--mvx-default-font-variation-settings,normal);line-height:1.5;tab-size:4;-webkit-tap-highlight-color:transparent}hr{border-top-width:1px;color:inherit;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:var(--mvx-default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace);font-feature-settings:var(--mvx-default-mono-font-feature-settings,normal);font-size:1em;font-variation-settings:var(--mvx-default-mono-font-variation-settings,normal)}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}menu,ol,ul{list-style:none}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}button,input,optgroup,select,textarea{background-color:#0000;border-radius:0;color:inherit;font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;opacity:1}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::placeholder{opacity:1}@supports (not ((-webkit-appearance:-apple-pay-button))) or (contain-intrinsic-size:1px){::placeholder{color:currentColor}@supports (color:color-mix(in lab,red,red)){::placeholder{color:color-mix(in oklab,currentColor 50%,transparent)}}}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{display:inline-flex;padding-block:0}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field,::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-meridiem-field,::-webkit-datetime-edit-millisecond-field{padding-block:0}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){appearance:button}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}}@layer components;@layer utilities{.mvx\\:flex{display:flex}.mvx\\:items-center{align-items:center}.mvx\\:justify-center{justify-content:center}.mvx\\:text-error{color:var(--mvx-color-error)}.mvx\\:text-pending{color:var(--mvx-color-pending)}.mvx\\:text-primary{color:var(--mvx-color-primary)}.mvx\\:text-primary\\!{color:var(--mvx-color-primary)!important}} /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components,utilities /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer theme{:host,:root{--mvx-font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--mvx-font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--mvx-default-font-family:var(--mvx-font-sans);--mvx-default-mono-font-family:var(--mvx-font-mono);--mvx-color-primary:var(--mvx-text-color-primary);--mvx-color-pending:var(--mvx-pending-color);--mvx-color-error:var(--mvx-error-color)}}@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer base{}@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer base{}@layer components;.transactions-table{overflow:auto;table-layout:auto;width:100%}.transactions-table-header{background-color:var(--mvx-bg-color-secondary)}.transactions-table-header-cell{color:var(--mvx-text-color-secondary);font-size:.875rem;font-weight:400;letter-spacing:.05em;line-height:1rem;padding:1rem;text-align:left;width:16.6667%}.transactions-table-body{background-color:var(--mvx-bg-color-primary);border-bottom-width:1px;border-color:var(--mvx-border-color-secondary);border-top-width:1px}.transactions-table-body-row{border-bottom-color:var(--mvx-border-color-secondary);border-bottom-width:1px;color:var(--mvx-label-color)}.transactions-table-body-cell{padding:1rem;width:max-content}.transactions-table-body-cell>*{display:flex;width:max-content}";

const COLUMNS = ['Txn Hash', 'Age', 'Shard', 'From', 'To', 'Method', 'Value'];
const TransactionsTable = /*@__PURE__*/ proxyCustomElement(class TransactionsTable extends H {
    constructor() {
        super();
        this.__registerHost();
    }
    render() {
        return (h("table", { key: '6a272ad654a924a2138ef779dff8e91899814353', class: classNames(this.class, 'transactions-table') }, h("thead", { key: 'bce5e080280d1d9534722e2b4923ed474eb812f1', class: "transactions-table-header" }, h("tr", { key: '981cb14e56aa72646445bb58bee9edb3289a5ea2' }, COLUMNS.map(column => (h("th", { key: column, scope: "col", class: "transactions-table-header-cell" }, column))))), h("tbody", { key: 'b27a674f8f0a7c3555948f420e669321018b1b90', class: "transactions-table-body" }, this.transactions.map(transaction => (h("tr", { class: "transactions-table-body-row" }, h("td", { class: "transactions-table-body-cell" }, h("mvx-transaction-hash", { transaction: transaction })), h("td", { class: "transactions-table-body-cell" }, h("mvx-transaction-age", { age: transaction.age.timeAgo, tooltip: transaction.age.tooltip })), h("td", { class: "transactions-table-body-cell" }, h("mvx-transaction-shards", { transaction: transaction })), h("td", { class: "transactions-table-body-cell" }, h("mvx-transaction-account", { account: transaction.sender, dataTestId: DataTestIdsEnum.transactionSender, scope: "sender", showLockedAccounts: true })), h("td", { class: "transactions-table-body-cell" }, h("mvx-transaction-account", { account: transaction.receiver, dataTestId: DataTestIdsEnum.transactionReceiver, scope: "receiver", showLockedAccounts: true })), h("td", { class: "transactions-table-body-cell" }, h("mvx-transaction-method", { method: transaction.method.name, actionDescription: transaction.method.actionDescription })), h("td", { class: "transactions-table-body-cell" }, h("mvx-transaction-value", { value: transaction.value }))))))));
    }
    static get style() { return transactionsTableCss; }
}, [256, "mvx-transactions-table", {
        "class": [1],
        "transactions": [16]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["mvx-transactions-table", "mvx-arrow-right-icon", "mvx-arrow-up-right-from-square-icon", "mvx-explorer-link", "mvx-fa-icon", "mvx-format-amount", "mvx-multiversx-symbol-icon", "mvx-transaction-account", "mvx-transaction-account-name", "mvx-transaction-age", "mvx-transaction-hash", "mvx-transaction-icon", "mvx-transaction-method", "mvx-transaction-shards", "mvx-transaction-value", "mvx-trim"];
    components.forEach(tagName => { switch (tagName) {
        case "mvx-transactions-table":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, TransactionsTable);
            }
            break;
        case "mvx-arrow-right-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$g();
            }
            break;
        case "mvx-arrow-up-right-from-square-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$f();
            }
            break;
        case "mvx-explorer-link":
            if (!customElements.get(tagName)) {
                defineCustomElement$e();
            }
            break;
        case "mvx-fa-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$d();
            }
            break;
        case "mvx-format-amount":
            if (!customElements.get(tagName)) {
                defineCustomElement$c();
            }
            break;
        case "mvx-multiversx-symbol-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "mvx-transaction-account":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "mvx-transaction-account-name":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "mvx-transaction-age":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "mvx-transaction-hash":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "mvx-transaction-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "mvx-transaction-method":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "mvx-transaction-shards":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "mvx-transaction-value":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "mvx-trim":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const MvxTransactionsTable = TransactionsTable;
const defineCustomElement = defineCustomElement$1;

export { MvxTransactionsTable, defineCustomElement };
