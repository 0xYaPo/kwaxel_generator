import { p as proxyCustomElement, H, h, F as Fragment } from './index2.js';
import { p as providerLabels } from './providerFactory.constants.js';
import { E as EventBus, C as ConnectionMonitor } from './EventBus.js';
import { d as defineCustomElement$r } from './address-table.js';
import { d as defineCustomElement$q } from './angles-left-icon.js';
import { d as defineCustomElement$p } from './angles-right-icon.js';
import { d as defineCustomElement$o } from './arrow-up-right-from-square-icon.js';
import { d as defineCustomElement$n } from './back-arrow-icon.js';
import { d as defineCustomElement$m } from './button.js';
import { d as defineCustomElement$l } from './check-icon.js';
import { d as defineCustomElement$k } from './close-icon.js';
import { d as defineCustomElement$j } from './copy-button.js';
import { d as defineCustomElement$i } from './copy-icon.js';
import { d as defineCustomElement$h } from './explorer-link.js';
import { d as defineCustomElement$g } from './ledger-confirm.js';
import { d as defineCustomElement$f } from './ledger-icon.js';
import { d as defineCustomElement$e } from './ledger-intro.js';
import { d as defineCustomElement$d } from './magnifying-glass-icon.js';
import { d as defineCustomElement$c } from './pagination.js';
import { d as defineCustomElement$b } from './pagination-ellipsis.js';
import { d as defineCustomElement$a } from './pagination-ellipsis-form.js';
import { d as defineCustomElement$9 } from './preloader.js';
import { d as defineCustomElement$8 } from './side-panel-header.js';
import { d as defineCustomElement$7 } from './single-angle-left-icon.js';
import { d as defineCustomElement$6 } from './single-angle-right-icon.js';
import { d as defineCustomElement$5 } from './spinner-icon.js';
import { d as defineCustomElement$4 } from './tooltip.js';
import { d as defineCustomElement$3 } from './triangular-warning-icon.js';
import { d as defineCustomElement$2 } from './trim.js';

const getLedgerAddressByIndex = ({ accounts, selectedIndex }) => { var _a; return ((_a = accounts === null || accounts === void 0 ? void 0 : accounts.find(({ index }) => index === selectedIndex)) === null || _a === void 0 ? void 0 : _a.address) || ''; };

var LedgerConnectEventsEnum;
(function (LedgerConnectEventsEnum) {
    LedgerConnectEventsEnum["CONNECT_DEVICE"] = "CONNECT_DEVICE";
    LedgerConnectEventsEnum["ACCESS_WALLET"] = "ACCESS_WALLET";
    LedgerConnectEventsEnum["GO_TO_PAGE"] = "GO_TO_PAGE";
    LedgerConnectEventsEnum["CLOSE"] = "CLOSE";
    LedgerConnectEventsEnum["DATA_UPDATE"] = "DATA_UPDATE";
    LedgerConnectEventsEnum["UI_DISCONNECTED"] = "UI_DISCONNECTED";
})(LedgerConnectEventsEnum || (LedgerConnectEventsEnum = {}));

const ledgerConnectCss = "/*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer theme{:host,:root{--mvx-radius-lg:.5rem;--mvx-spacing:.25rem;--mvx-font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--mvx-font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--mvx-default-font-family:var(--mvx-font-sans);--mvx-default-mono-font-family:var(--mvx-font-mono)}}@layer base{*,::backdrop,:after,:before{border:0 solid;box-sizing:border-box;margin:0;padding:0}::file-selector-button{appearance:button;background-color:#0000;border:0 solid;border-radius:0;box-sizing:border-box;color:inherit;font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;margin:0;margin-inline-end:4px;opacity:1;padding:0}:host,html{-webkit-text-size-adjust:100%;font-family:var(--mvx-default-font-family,ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\");font-feature-settings:var(--mvx-default-font-feature-settings,normal);font-variation-settings:var(--mvx-default-font-variation-settings,normal);line-height:1.5;tab-size:4;-webkit-tap-highlight-color:transparent}hr{border-top-width:1px;color:inherit;height:0}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;-webkit-text-decoration:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:var(--mvx-default-mono-font-family,ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace);font-feature-settings:var(--mvx-default-mono-font-feature-settings,normal);font-size:1em;font-variation-settings:var(--mvx-default-mono-font-variation-settings,normal)}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{border-collapse:collapse;border-color:inherit;text-indent:0}:-moz-focusring{outline:auto}progress{vertical-align:baseline}summary{display:list-item}menu,ol,ul{list-style:none}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{height:auto;max-width:100%}button,input,optgroup,select,textarea{background-color:#0000;border-radius:0;color:inherit;font:inherit;font-feature-settings:inherit;font-variation-settings:inherit;letter-spacing:inherit;opacity:1}:where(select:is([multiple],[size])) optgroup{font-weight:bolder}:where(select:is([multiple],[size])) optgroup option{padding-inline-start:20px}::placeholder{opacity:1}@supports (not ((-webkit-appearance:-apple-pay-button))) or (contain-intrinsic-size:1px){::placeholder{color:currentColor}@supports (color:color-mix(in lab,red,red)){::placeholder{color:color-mix(in oklab,currentColor 50%,transparent)}}}textarea{resize:vertical}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-date-and-time-value{min-height:1lh;text-align:inherit}::-webkit-datetime-edit{display:inline-flex;padding-block:0}::-webkit-datetime-edit-fields-wrapper{padding:0}::-webkit-datetime-edit-month-field,::-webkit-datetime-edit-year-field{padding-block:0}::-webkit-datetime-edit-day-field,::-webkit-datetime-edit-hour-field{padding-block:0}::-webkit-datetime-edit-minute-field,::-webkit-datetime-edit-second-field{padding-block:0}::-webkit-datetime-edit-meridiem-field,::-webkit-datetime-edit-millisecond-field{padding-block:0}:-moz-ui-invalid{box-shadow:none}button,input:where([type=button],[type=reset],[type=submit]){appearance:button}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[hidden]:where(:not([hidden=until-found])){display:none!important}}@layer components;@layer utilities{.mvx\\:h-auto{height:auto}.mvx\\:w-48{width:calc(var(--mvx-spacing)*48)}.mvx\\:w-50{width:calc(var(--mvx-spacing)*50)}.mvx\\:rounded-lg\\!{border-radius:var(--mvx-radius-lg)!important}.mvx\\:whitespace-nowrap{white-space:nowrap}} /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components; /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer components,utilities /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer theme{:host,:root{--mvx-color-teal-400:oklch(.777 .152 181.912);--mvx-font-sans:ui-sans-serif,system-ui,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\",\"Noto Color Emoji\";--mvx-font-mono:ui-monospace,SFMono-Regular,Menlo,Monaco,Consolas,\"Liberation Mono\",\"Courier New\",monospace;--mvx-spacing:.25rem;--mvx-radius-lg:.5rem;--mvx-default-font-family:var(--mvx-font-sans);--mvx-default-mono-font-family:var(--mvx-font-mono)}}@layer base{}@layer components;@layer utilities{.mvx\\:p-\\[10px\\]{padding:10px}} /*! tailwindcss v4.1.3 | MIT License | https://tailwindcss.com */@layer base{}@layer base{}@layer components;:host{display:flex;flex:1;flex-direction:column;overflow:hidden}@media (min-width:30rem){.mvx\\:xs\\:mt-5{margin-top:calc(var(--mvx-spacing)*5)}.mvx\\:xs\\:h-85{height:calc(var(--mvx-spacing)*85)}.mvx\\:xs\\:w-100{width:calc(var(--mvx-spacing)*100)}}@media (hover:hover){.mvx\\:hover\\:\\!fill-teal-400:hover{fill:var(--mvx-color-teal-400)!important}}";

const LedgerConnect = /*@__PURE__*/ proxyCustomElement(class LedgerConnect extends H {
    constructor() {
        super();
        this.__registerHost();
        this.__attachShadow();
        this.eventBus = new EventBus();
        this.connectionMonitor = new ConnectionMonitor();
        this.data = {
            accountScreenData: null,
            confirmScreenData: null,
            connectScreenData: {},
        };
        this.selectedIndex = 0;
        this.selectedAddress = '';
        this.ledgerDataState = this.data;
    }
    handleDataChange(newValue) {
        this.ledgerDataState = Object.assign({}, newValue);
    }
    async getEventBus() {
        await this.connectionMonitor.waitForConnection();
        return this.eventBus;
    }
    componentDidLoad() {
        this.eventBus.subscribe(LedgerConnectEventsEnum.DATA_UPDATE, this.dataUpdate.bind(this));
        this.connectionMonitor.connect();
    }
    disconnectedCallback() {
        this.eventBus.publish(LedgerConnectEventsEnum.UI_DISCONNECTED);
        this.eventBus.unsubscribe(LedgerConnectEventsEnum.DATA_UPDATE, this.dataUpdate.bind(this));
    }
    selectAccount(index) {
        var _a;
        this.selectedIndex = index;
        this.selectedAddress = getLedgerAddressByIndex({
            accounts: (_a = this.ledgerDataState.accountScreenData) === null || _a === void 0 ? void 0 : _a.accounts,
            selectedIndex: this.selectedIndex,
        });
    }
    dataUpdate(payload) {
        this.ledgerDataState = Object.assign({}, payload);
    }
    accessWallet() {
        var _a;
        this.eventBus.publish(LedgerConnectEventsEnum.ACCESS_WALLET, {
            addressIndex: this.selectedIndex,
            selectedAddress: this.selectedAddress ||
                getLedgerAddressByIndex({
                    accounts: (_a = this.ledgerDataState.accountScreenData) === null || _a === void 0 ? void 0 : _a.accounts,
                    selectedIndex: this.selectedIndex,
                }),
        });
    }
    handleIntroConnect(event) {
        event.preventDefault();
        this.eventBus.publish(LedgerConnectEventsEnum.CONNECT_DEVICE);
    }
    handleClose() {
        this.eventBus.publish(LedgerConnectEventsEnum.CLOSE);
    }
    render() {
        if (this.ledgerDataState.accountScreenData) {
            return (h(Fragment, null, h("mvx-side-panel-header", { panelTitle: providerLabels.ledger, hasLeftButton: false, onRightButtonClick: this.handleClose.bind(this) }), h("mvx-address-table", { selectedIndex: this.selectedIndex, accountScreenData: this.ledgerDataState.accountScreenData, onAccessWallet: () => this.accessWallet(), onSelectAccount: (event) => this.selectAccount(event.detail), onPageChange: (event) => this.eventBus.publish(LedgerConnectEventsEnum.GO_TO_PAGE, event.detail) })));
        }
        if (this.ledgerDataState.confirmScreenData) {
            return (h(Fragment, null, h("mvx-side-panel-header", { panelTitle: providerLabels.ledger, hasLeftButton: false, onRightButtonClick: this.handleClose.bind(this) }), h("mvx-ledger-confirm", { confirmScreenData: this.ledgerDataState.confirmScreenData })));
        }
        return (h(Fragment, null, h("mvx-side-panel-header", { panelTitle: providerLabels.ledger, hasLeftButton: false, onRightButtonClick: this.handleClose.bind(this) }), h("mvx-ledger-intro", { connectScreenData: this.ledgerDataState.connectScreenData, onConnect: this.handleIntroConnect.bind(this) })));
    }
    get hostElement() { return this; }
    static get watchers() { return {
        "data": ["handleDataChange"]
    }; }
    static get style() { return ledgerConnectCss; }
}, [257, "mvx-ledger-connect", {
        "data": [16],
        "selectedIndex": [32],
        "selectedAddress": [32],
        "ledgerDataState": [32],
        "getEventBus": [64]
    }, undefined, {
        "data": ["handleDataChange"]
    }]);
function defineCustomElement$1() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["mvx-ledger-connect", "mvx-address-table", "mvx-angles-left-icon", "mvx-angles-right-icon", "mvx-arrow-up-right-from-square-icon", "mvx-back-arrow-icon", "mvx-button", "mvx-check-icon", "mvx-close-icon", "mvx-copy-button", "mvx-copy-icon", "mvx-explorer-link", "mvx-ledger-confirm", "mvx-ledger-icon", "mvx-ledger-intro", "mvx-magnifying-glass-icon", "mvx-pagination", "mvx-pagination-ellipsis", "mvx-pagination-ellipsis-form", "mvx-preloader", "mvx-side-panel-header", "mvx-single-angle-left-icon", "mvx-single-angle-right-icon", "mvx-spinner-icon", "mvx-tooltip", "mvx-triangular-warning-icon", "mvx-trim"];
    components.forEach(tagName => { switch (tagName) {
        case "mvx-ledger-connect":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, LedgerConnect);
            }
            break;
        case "mvx-address-table":
            if (!customElements.get(tagName)) {
                defineCustomElement$r();
            }
            break;
        case "mvx-angles-left-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$q();
            }
            break;
        case "mvx-angles-right-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$p();
            }
            break;
        case "mvx-arrow-up-right-from-square-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$o();
            }
            break;
        case "mvx-back-arrow-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$n();
            }
            break;
        case "mvx-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$m();
            }
            break;
        case "mvx-check-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$l();
            }
            break;
        case "mvx-close-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$k();
            }
            break;
        case "mvx-copy-button":
            if (!customElements.get(tagName)) {
                defineCustomElement$j();
            }
            break;
        case "mvx-copy-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$i();
            }
            break;
        case "mvx-explorer-link":
            if (!customElements.get(tagName)) {
                defineCustomElement$h();
            }
            break;
        case "mvx-ledger-confirm":
            if (!customElements.get(tagName)) {
                defineCustomElement$g();
            }
            break;
        case "mvx-ledger-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$f();
            }
            break;
        case "mvx-ledger-intro":
            if (!customElements.get(tagName)) {
                defineCustomElement$e();
            }
            break;
        case "mvx-magnifying-glass-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$d();
            }
            break;
        case "mvx-pagination":
            if (!customElements.get(tagName)) {
                defineCustomElement$c();
            }
            break;
        case "mvx-pagination-ellipsis":
            if (!customElements.get(tagName)) {
                defineCustomElement$b();
            }
            break;
        case "mvx-pagination-ellipsis-form":
            if (!customElements.get(tagName)) {
                defineCustomElement$a();
            }
            break;
        case "mvx-preloader":
            if (!customElements.get(tagName)) {
                defineCustomElement$9();
            }
            break;
        case "mvx-side-panel-header":
            if (!customElements.get(tagName)) {
                defineCustomElement$8();
            }
            break;
        case "mvx-single-angle-left-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$7();
            }
            break;
        case "mvx-single-angle-right-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$6();
            }
            break;
        case "mvx-spinner-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$5();
            }
            break;
        case "mvx-tooltip":
            if (!customElements.get(tagName)) {
                defineCustomElement$4();
            }
            break;
        case "mvx-triangular-warning-icon":
            if (!customElements.get(tagName)) {
                defineCustomElement$3();
            }
            break;
        case "mvx-trim":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
    } });
}

const MvxLedgerConnect = LedgerConnect;
const defineCustomElement = defineCustomElement$1;

export { MvxLedgerConnect, defineCustomElement };
