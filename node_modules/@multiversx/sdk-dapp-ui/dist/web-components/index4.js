import { h } from './index2.js';
import { P as ProviderTypeEnum } from './provider.types.js';

const getIsExtensionAvailable = () => {
    const safeWindow = typeof window !== 'undefined' ? window : {};
    // Check if either elrondWallet or multiversxWallet exists and has an extensionId
    return Boolean(safeWindow === null || safeWindow === void 0 ? void 0 : safeWindow.elrondWallet) || Boolean(safeWindow === null || safeWindow === void 0 ? void 0 : safeWindow.multiversxWallet);
};

// Helper to check if MetaMask is available
const getIsMetaMaskAvailable = () => {
    const safeWindow = typeof window !== 'undefined' ? window : {};
    // Check if MetaMask is available through the ethereum object and that isMetaMask is true
    return Boolean((safeWindow === null || safeWindow === void 0 ? void 0 : safeWindow.ethereum) && safeWindow.ethereum.isMetaMask);
};

var BrowserEnum;
(function (BrowserEnum) {
    BrowserEnum["Chrome"] = "Chrome";
    BrowserEnum["Firefox"] = "Firefox";
    BrowserEnum["Edge"] = "Edge";
    BrowserEnum["Brave"] = "Brave";
    BrowserEnum["Arc"] = "Arc";
})(BrowserEnum || (BrowserEnum = {}));

const safeWindow = typeof window !== 'undefined' ? window : {};

const getDetectedBrowser = () => {
    const nav = safeWindow === null || safeWindow === void 0 ? void 0 : safeWindow.navigator;
    const userAgent = (nav === null || nav === void 0 ? void 0 : nav.userAgent) || '';
    if (/Edg/.test(userAgent)) {
        return BrowserEnum.Edge;
    }
    if (/Firefox/.test(userAgent)) {
        return BrowserEnum.Firefox;
    }
    if (nav && typeof nav.brave !== 'undefined') {
        return BrowserEnum.Brave;
    }
    if (userAgent.toLowerCase().includes('brave')) {
        return BrowserEnum.Brave;
    }
    const el = document.createElement('div');
    document.body.appendChild(el);
    const computedStyle = getComputedStyle(el);
    const hasArcPalette = computedStyle.getPropertyValue('--arc-palette-background') !== '';
    document.body.removeChild(el);
    if (hasArcPalette) {
        return BrowserEnum.Arc;
    }
    if (/Chrome/.test(userAgent)) {
        return BrowserEnum.Chrome;
    }
};

const getProviderButtonIcon = ({ providerType, extensionProviderIconWidth, extensionProviderIconHeight, }) => {
    const detectedBrowser = getDetectedBrowser();
    switch (providerType) {
        case ProviderTypeEnum.extension:
            switch (detectedBrowser) {
                case BrowserEnum.Edge:
                    return (h("mvx-edge-extension-provider-icon", { width: extensionProviderIconWidth, height: extensionProviderIconHeight }));
                case BrowserEnum.Firefox:
                    return (h("mvx-firefox-extension-provider-icon", { width: extensionProviderIconWidth, height: extensionProviderIconHeight }));
                case BrowserEnum.Brave:
                    return (h("mvx-brave-extension-provider-icon", { width: extensionProviderIconWidth, height: extensionProviderIconHeight }));
                case BrowserEnum.Arc:
                    return (h("mvx-arc-extension-provider-icon", { width: extensionProviderIconWidth, height: extensionProviderIconHeight }));
                case BrowserEnum.Chrome:
                    return (h("mvx-extension-provider-icon", { width: extensionProviderIconWidth, height: extensionProviderIconHeight }));
                default:
                    return h("mvx-wallet-provider-icon", null);
            }
        case ProviderTypeEnum.metamask:
            return h("mvx-metamask-provider-icon", null);
        case ProviderTypeEnum.passkey:
            return h("mvx-passkey-provider-icon", null);
        case ProviderTypeEnum.walletConnect:
            return h("mvx-multiversx-logo-icon", null);
        case ProviderTypeEnum.ledger:
            return h("mvx-ledger-provider-icon", null);
        case ProviderTypeEnum.crossWindow:
            return h("mvx-wallet-provider-icon", null);
        default:
            return h("mvx-multiversx-logo-icon", null);
    }
};

export { BrowserEnum as B, getIsMetaMaskAvailable as a, getProviderButtonIcon as b, getDetectedBrowser as c, getIsExtensionAvailable as g, safeWindow as s };
