import { p as proxyCustomElement, H, d as createEvent, h } from './index2.js';
import { d as defineCustomElement$2 } from './custom-toast.js';
import { d as defineCustomElement$1 } from './simple-toast.js';

const GenericToast = /*@__PURE__*/ proxyCustomElement(class GenericToast extends H {
    constructor() {
        super();
        this.__registerHost();
        this.deleteToast = createEvent(this, "deleteToast", 7);
    }
    render() {
        const isComponentToast = 'instantiateToastElement' in this.toast;
        if (isComponentToast) {
            return h("mvx-custom-toast", { toast: this.toast, onDeleteToast: () => this.deleteToast.emit(this.toast.toastId) });
        }
        return h("mvx-simple-toast", { toast: this.toast, onDeleteToast: () => this.deleteToast.emit(this.toast.toastId) });
    }
}, [256, "mvx-generic-toast", {
        "toast": [16]
    }]);
function defineCustomElement() {
    if (typeof customElements === "undefined") {
        return;
    }
    const components = ["mvx-generic-toast", "mvx-custom-toast", "mvx-simple-toast"];
    components.forEach(tagName => { switch (tagName) {
        case "mvx-generic-toast":
            if (!customElements.get(tagName)) {
                customElements.define(tagName, GenericToast);
            }
            break;
        case "mvx-custom-toast":
            if (!customElements.get(tagName)) {
                defineCustomElement$2();
            }
            break;
        case "mvx-simple-toast":
            if (!customElements.get(tagName)) {
                defineCustomElement$1();
            }
            break;
    } });
}

export { GenericToast as G, defineCustomElement as d };
