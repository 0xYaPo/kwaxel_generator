import { Message, Transaction } from '@multiversx/sdk-core';
import { WindowProviderRequestEnums } from '@multiversx/sdk-web-wallet-cross-window-provider/out/enums';
import { PostMessageParamsType, PostMessageReturnType } from '@multiversx/sdk-web-wallet-cross-window-provider/out/types';
interface IWebviewProviderOptions {
    resetStateCallback?: () => void;
}
export interface IProviderAccount {
    address: string;
    signature?: string;
    accessToken?: string;
}
export declare class WebviewProvider {
    private static _instance;
    private initialized;
    private account;
    private handshakeResponseTimeout;
    private allowedOrigin;
    static getInstance(options?: IWebviewProviderOptions): WebviewProvider;
    constructor(options?: IWebviewProviderOptions);
    private resetState;
    private disconnect;
    /**
     * Initiates a handshake request with a window provider and waits for a response.
     *
     * This function sends a `finalizeHandshakeRequest` message and races it against a timeout.
     * If the handshake does not complete within the specified `HANDSHAKE_RESPONSE_TIMEOUT`,
     * the promise is rejected with a timeout error.
     */
    private initiateHandshake;
    private initiateReactNativeHandshake;
    init: (version?: string) => Promise<boolean>;
    login: (options?: {
        token?: string;
    }) => Promise<IProviderAccount | null>;
    logout: () => Promise<boolean>;
    relogin: () => Promise<string | null>;
    signTransactions: (transactionsToSign: Transaction[]) => Promise<Transaction[] | null>;
    signTransaction: (transaction: Transaction) => Promise<Transaction | undefined>;
    signMessage: (messageToSign: Message) => Promise<Message | null>;
    cancelAction: () => Promise<PostMessageReturnType<WindowProviderRequestEnums.cancelAction>>;
    finalizeResetState: () => Promise<PostMessageReturnType<WindowProviderRequestEnums.finalizeResetStateRequest>>;
    setHandshakeResponseTimeout(timeout: number): void;
    isInitialized(): boolean;
    isConnected(): boolean;
    getAccount(): IProviderAccount | null;
    setAccount(account: IProviderAccount): void;
    sendPostMessage: <T extends WindowProviderRequestEnums>(message: PostMessageParamsType<T>) => Promise<PostMessageReturnType<T>>;
    private waitingForResponse;
}
export {};
