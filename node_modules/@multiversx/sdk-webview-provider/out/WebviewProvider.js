"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebviewProvider = void 0;
const sdk_core_1 = require("@multiversx/sdk-core");
const windowProviderConstants_1 = require("@multiversx/sdk-web-wallet-cross-window-provider/out/constants/windowProviderConstants");
const enums_1 = require("@multiversx/sdk-web-wallet-cross-window-provider/out/enums");
const getSafeDocument_1 = require("./helpers/getSafeDocument");
const getSafeWindow_1 = require("./helpers/getSafeWindow");
const webviewProviderEventHandler_1 = require("./webviewProviderEventHandler");
const HANDSHAKE_RESPONSE_TIMEOUT = 1000;
class WebviewProvider {
    static getInstance(options) {
        if (!WebviewProvider._instance) {
            WebviewProvider._instance = new WebviewProvider(options);
        }
        return WebviewProvider._instance;
    }
    constructor(options) {
        this.initialized = false;
        this.account = { address: '' };
        this.handshakeResponseTimeout = HANDSHAKE_RESPONSE_TIMEOUT;
        this.allowedOrigin = '*';
        this.resetState = (resetStateCallback) => {
            var _a, _b;
            (_b = (_a = (0, getSafeWindow_1.getSafeWindow)()).addEventListener) === null || _b === void 0 ? void 0 : _b.call(_a, 'message', (0, webviewProviderEventHandler_1.webviewProviderEventHandler)(enums_1.WindowProviderResponseEnums.resetStateResponse, (data) => {
                if (data.type === enums_1.WindowProviderResponseEnums.resetStateResponse) {
                    resetStateCallback === null || resetStateCallback === void 0 ? void 0 : resetStateCallback();
                    setTimeout(() => {
                        this.finalizeResetState();
                    }, 500);
                }
            }, this.allowedOrigin));
        };
        /**
         * Initiates a handshake request with a window provider and waits for a response.
         *
         * This function sends a `finalizeHandshakeRequest` message and races it against a timeout.
         * If the handshake does not complete within the specified `HANDSHAKE_RESPONSE_TIMEOUT`,
         * the promise is rejected with a timeout error.
         */
        this.initiateHandshake = (version) => __awaiter(this, void 0, void 0, function* () {
            let timeoutId;
            const handshakePromise = new Promise((resolve, reject) => {
                const handler = (event) => {
                    var _a;
                    if (((_a = event.data) === null || _a === void 0 ? void 0 : _a.type) ===
                        enums_1.WindowProviderResponseEnums.finalizeHandshakeResponse) {
                        this.allowedOrigin = event.origin;
                        (0, getSafeWindow_1.getSafeWindow)().removeEventListener('message', handler);
                        resolve(event.data);
                    }
                };
                (0, getSafeWindow_1.getSafeWindow)().addEventListener('message', handler);
                this.sendPostMessage({
                    type: enums_1.WindowProviderRequestEnums.finalizeHandshakeRequest,
                    payload: version
                });
                timeoutId = setTimeout(() => {
                    (0, getSafeWindow_1.getSafeWindow)().removeEventListener('message', handler);
                    reject(new Error(`Timeout: Handshake took more than ${this.handshakeResponseTimeout}ms`));
                }, this.handshakeResponseTimeout);
            });
            return yield handshakePromise;
        });
        this.init = (version) => __awaiter(this, void 0, void 0, function* () {
            const safeWindow = (0, getSafeWindow_1.getSafeWindow)();
            // Backwards compatible for ReactNative
            if (safeWindow.ReactNativeWebView) {
                return this.initiateReactNativeHandshake();
            }
            try {
                const { type, payload } = yield this.initiateHandshake(version);
                if (type === enums_1.WindowProviderResponseEnums.finalizeHandshakeResponse &&
                    payload.data) {
                    this.initialized = true;
                }
            }
            catch (_a) {
                // No handshake response received
            }
            return this.initialized;
        });
        this.login = (options) => __awaiter(this, void 0, void 0, function* () {
            var _b;
            if (!this.initialized) {
                throw new Error('Provider not initialized');
            }
            const response = yield this.sendPostMessage({
                type: enums_1.WindowProviderRequestEnums.loginRequest,
                payload: (options === null || options === void 0 ? void 0 : options.token) ? { token: options.token } : undefined
            });
            if (response.type == enums_1.WindowProviderResponseEnums.cancelResponse) {
                console.warn('Cancelled the login action');
                yield this.cancelAction();
                return null;
            }
            if (!response.payload.data) {
                console.error('Error logging in', (_b = response.payload.error) !== null && _b !== void 0 ? _b : 'No data received');
                return null;
            }
            this.account = response.payload.data;
            return this.account;
        });
        this.logout = () => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendPostMessage({
                type: enums_1.WindowProviderRequestEnums.logoutRequest,
                payload: undefined
            });
            this.initialized = false;
            this.disconnect();
            return Boolean(response.payload.data);
        });
        this.relogin = () => __awaiter(this, void 0, void 0, function* () {
            var _c;
            const response = yield this.sendPostMessage({
                type: enums_1.WindowProviderRequestEnums.reloginRequest,
                payload: undefined
            });
            if (response.type == enums_1.WindowProviderResponseEnums.cancelResponse) {
                console.warn('Cancelled the re-login action');
                yield this.cancelAction();
                return null;
            }
            if (!response.payload.data) {
                console.error('Re-login Error', (_c = response.payload.error) !== null && _c !== void 0 ? _c : 'No data received');
                return null;
            }
            const { data, error } = response.payload;
            if (error || !data) {
                throw new Error('Unable to re-login');
            }
            const { accessToken } = data;
            if (!accessToken) {
                console.error('Unable to re-login. Missing accessToken.');
                return null;
            }
            this.account.accessToken = accessToken;
            return accessToken;
        });
        this.signTransactions = (transactionsToSign) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendPostMessage({
                type: enums_1.WindowProviderRequestEnums.signTransactionsRequest,
                payload: transactionsToSign.map((tx) => tx.toPlainObject())
            });
            const { data: signedTransactions, error } = response.payload;
            if (error || !signedTransactions) {
                console.error('Unable to sign transactions');
                return null;
            }
            if (response.type == enums_1.WindowProviderResponseEnums.cancelResponse) {
                console.warn('Cancelled the transactions signing action');
                this.cancelAction();
                return null;
            }
            return signedTransactions.map((tx) => sdk_core_1.Transaction.newFromPlainObject(tx));
        });
        this.signTransaction = (transaction) => __awaiter(this, void 0, void 0, function* () {
            const response = yield this.signTransactions([transaction]);
            return response === null || response === void 0 ? void 0 : response[0];
        });
        this.signMessage = (messageToSign) => __awaiter(this, void 0, void 0, function* () {
            var _d;
            const response = yield this.sendPostMessage({
                type: enums_1.WindowProviderRequestEnums.signMessageRequest,
                payload: { message: Buffer.from(messageToSign.data).toString() }
            });
            const { data, error } = response.payload;
            if (error || !data) {
                console.error('Unable to sign message');
                return null;
            }
            if (response.type == enums_1.WindowProviderResponseEnums.cancelResponse) {
                console.warn('Cancelled the message signing action');
                this.cancelAction();
                return null;
            }
            if (data.status !== enums_1.SignMessageStatusEnum.signed) {
                console.error('Could not sign message');
                return null;
            }
            return new sdk_core_1.Message({
                data: Buffer.from(messageToSign.data),
                address: (_d = messageToSign.address) !== null && _d !== void 0 ? _d : sdk_core_1.Address.newFromBech32(this.account.address),
                signer: 'webview',
                version: messageToSign.version,
                signature: Buffer.from(String(data.signature), 'hex')
            });
        });
        this.cancelAction = () => __awaiter(this, void 0, void 0, function* () {
            return this.sendPostMessage({
                type: enums_1.WindowProviderRequestEnums.cancelAction,
                payload: undefined
            });
        });
        this.finalizeResetState = () => __awaiter(this, void 0, void 0, function* () {
            return this.sendPostMessage({
                type: enums_1.WindowProviderRequestEnums.finalizeResetStateRequest,
                payload: undefined
            });
        });
        this.sendPostMessage = (message) => __awaiter(this, void 0, void 0, function* () {
            var _e, _f;
            const safeWindow = (0, getSafeWindow_1.getSafeWindow)();
            if (safeWindow.ReactNativeWebView) {
                safeWindow.ReactNativeWebView.postMessage(JSON.stringify(message));
            }
            else if (safeWindow.webkit) {
                (_f = (_e = safeWindow.webkit.messageHandlers) === null || _e === void 0 ? void 0 : _e.jsHandler) === null || _f === void 0 ? void 0 : _f.postMessage(JSON.stringify(message), this.allowedOrigin);
            }
            else if (safeWindow.parent) {
                safeWindow.parent.postMessage(message, this.allowedOrigin);
            }
            return yield this.waitingForResponse(windowProviderConstants_1.responseTypeMap[message.type]);
        });
        this.waitingForResponse = (action) => __awaiter(this, void 0, void 0, function* () {
            return yield new Promise((resolve) => {
                const handler = (0, webviewProviderEventHandler_1.webviewProviderEventHandler)(action, (data) => {
                    resolve(data);
                    (0, getSafeWindow_1.getSafeWindow)().removeEventListener('message', handler);
                    (0, getSafeDocument_1.getSafeDocument)().removeEventListener('message', handler);
                }, this.allowedOrigin);
                (0, getSafeWindow_1.getSafeWindow)().addEventListener('message', handler);
                (0, getSafeDocument_1.getSafeDocument)().addEventListener('message', handler);
            });
        });
        if (options === null || options === void 0 ? void 0 : options.resetStateCallback) {
            this.resetState(options.resetStateCallback);
        }
    }
    disconnect() {
        this.account = { address: '' };
    }
    initiateReactNativeHandshake() {
        this.initialized = true;
        this.sendPostMessage({
            type: enums_1.WindowProviderRequestEnums.finalizeHandshakeRequest,
            payload: undefined
        });
        return this.initialized;
    }
    setHandshakeResponseTimeout(timeout) {
        this.handshakeResponseTimeout = timeout;
    }
    isInitialized() {
        return this.initialized;
    }
    isConnected() {
        return Boolean(this.account.address);
    }
    getAccount() {
        return this.account;
    }
    setAccount(account) {
        this.account = account;
    }
}
exports.WebviewProvider = WebviewProvider;
//# sourceMappingURL=WebviewProvider.js.map