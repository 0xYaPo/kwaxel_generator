"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var nativeAuth_exports = {};
__export(nativeAuth_exports, {
  nativeAuth: () => nativeAuth
});
module.exports = __toCommonJS(nativeAuth_exports);
var import_sdk_native_auth_client = require("@multiversx/sdk-native-auth-client");
var import_getLatestBlockHash = require("./helpers/getLatestBlockHash");
var import_methods = require("./methods");
const nativeAuth = (config) => {
  const {
    origin,
    apiAddress,
    expirySeconds,
    blockHashShard,
    extraInfo: extraInfoFromConfig,
    gatewayUrl,
    extraRequestHeaders
  } = (0, import_methods.buildNativeAuthConfig)(config);
  const nativeAuthClient = new import_sdk_native_auth_client.NativeAuthClient({
    origin,
    apiUrl: apiAddress,
    expirySeconds,
    blockHashShard,
    gatewayUrl,
    extraRequestHeaders
  });
  const initialize = async (initProps) => {
    if (!apiAddress || !origin) {
      return "";
    }
    const getBlockHash = () => nativeAuthClient.getCurrentBlockHash();
    let latestBlockInfo = initProps?.latestBlockInfo;
    latestBlockInfo ??= await (0, import_getLatestBlockHash.getLatestBlockHash)({
      apiAddress,
      blockHashShard,
      getBlockHash,
      noCache: initProps?.noCache
    });
    const { hash, timestamp } = latestBlockInfo;
    const encodedExtraInfo = nativeAuthClient.encodeValue(
      JSON.stringify({
        ...initProps?.extraInfo ?? extraInfoFromConfig,
        ...timestamp ? { timestamp } : {}
      })
    );
    const encodedOrigin = nativeAuthClient.encodeValue(origin);
    return `${encodedOrigin}.${hash}.${expirySeconds}.${encodedExtraInfo}`;
  };
  const getToken = ({
    address,
    token,
    signature
  }) => nativeAuthClient.getToken(address, token, signature);
  return {
    initialize,
    getToken,
    getTokenExpiration: import_methods.getTokenExpiration
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  nativeAuth
});
//# sourceMappingURL=nativeAuth.cjs.map
