"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var decodeLoginToken_exports = {};
__export(decodeLoginToken_exports, {
  decodeLoginToken: () => decodeLoginToken
});
module.exports = __toCommonJS(decodeLoginToken_exports);
var import_lodash = __toESM(require("lodash.isstring"));
var import_base64Utils = require("../../../utils/decoders/base64Utils");
const decodeLoginToken = (loginToken) => {
  if (!loginToken || !(0, import_lodash.default)(loginToken)) {
    return null;
  }
  const parts = loginToken.split(".");
  if (parts.length !== 4) {
    return null;
  }
  try {
    const [origin, blockHash, ttl, extraInfo] = parts;
    const parsedExtraInfo = JSON.parse((0, import_base64Utils.decodeBase64)(extraInfo));
    const parsedOrigin = (0, import_base64Utils.decodeBase64)(origin);
    return {
      ttl: Number(ttl),
      extraInfo: parsedExtraInfo,
      origin: parsedOrigin,
      blockHash
    };
  } catch (e) {
    console.error(`Error trying to decode ${loginToken}:`, e);
    return null;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decodeLoginToken
});
//# sourceMappingURL=decodeLoginToken.cjs.map
