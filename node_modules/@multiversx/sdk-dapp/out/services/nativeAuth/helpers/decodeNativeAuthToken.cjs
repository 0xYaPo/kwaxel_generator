"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var decodeNativeAuthToken_exports = {};
__export(decodeNativeAuthToken_exports, {
  decodeNativeAuthToken: () => decodeNativeAuthToken
});
module.exports = __toCommonJS(decodeNativeAuthToken_exports);
var import_base64Utils = require("../../../utils/decoders/base64Utils");
var import_decodeLoginToken = require("./decodeLoginToken");
function isString(x) {
  return Object.prototype.toString.call(x) === "[object String]";
}
const decodeNativeAuthToken = (accessToken) => {
  if (!accessToken || !isString(accessToken)) {
    return null;
  }
  const parts = accessToken.split(".");
  if (parts.length !== 3) {
    console.error(
      "Invalid nativeAuthToken. You may be trying to decode a loginToken. Try using decodeLoginToken method instead"
    );
    return null;
  }
  try {
    const [address, body, signature] = parts;
    const parsedAddress = (0, import_base64Utils.decodeBase64)(address);
    const parsedBody = (0, import_base64Utils.decodeBase64)(body);
    const parsedInitToken = (0, import_decodeLoginToken.decodeLoginToken)(parsedBody);
    if (!parsedInitToken) {
      return {
        address: parsedAddress,
        body: parsedBody,
        signature,
        blockHash: "",
        origin: "",
        ttl: 0
      };
    }
    const result = {
      ...parsedInitToken,
      address: parsedAddress,
      body: parsedBody,
      signature
    };
    if (!parsedInitToken.extraInfo?.timestamp) {
      delete result.extraInfo;
    }
    return result;
  } catch (_err) {
    return null;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decodeNativeAuthToken
});
//# sourceMappingURL=decodeNativeAuthToken.cjs.map
