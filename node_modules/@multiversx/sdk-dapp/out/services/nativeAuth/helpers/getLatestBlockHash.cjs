"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getLatestBlockHash_exports = {};
__export(getLatestBlockHash_exports, {
  getLatestBlockHash: () => getLatestBlockHash
});
module.exports = __toCommonJS(getLatestBlockHash_exports);
var import_axios = __toESM(require("axios"));
var import_endpoints = require("../../../apiCalls/endpoints");
var import_retryMultipleTimes = require("../../../utils/retryMultipleTimes");
const getBlockFromPosition = 4;
const cachingDurationMs = 3e4;
const cachedResponse = {
  current: null
};
const requestPromise = {
  current: null
};
const getLatestBlockHashFromServer = (0, import_retryMultipleTimes.retryMultipleTimes)(
  async (apiUrl, blockHashShard, getBlockHash) => {
    if (getBlockHash) {
      const timestamp = Math.floor(Date.now() / 1e3);
      const hash = await getBlockHash();
      return { hash, timestamp };
    }
    const { data } = await import_axios.default.get(
      `${apiUrl}/${import_endpoints.BLOCKS_ENDPOINT}?from=${getBlockFromPosition}&size=1&fields=hash,timestamp${blockHashShard ? "&shard=" + blockHashShard : ""}`
    );
    const [latestBlock] = data;
    return latestBlock;
  }
);
async function getLatestBlockHash({
  apiAddress,
  noCache,
  blockHashShard,
  getBlockHash
}) {
  if (apiAddress == null) {
    throw new Error("missing api url");
  }
  const currentTimestampMs = Date.now();
  if (cachedResponse.current != null && currentTimestampMs < cachedResponse.current.timestamp * 1e3 + cachingDurationMs && !noCache) {
    return cachedResponse.current;
  }
  if (requestPromise.current != null) {
    return await requestPromise.current;
  }
  requestPromise.current = getLatestBlockHashFromServer(
    apiAddress,
    blockHashShard,
    getBlockHash
  );
  try {
    const response = await requestPromise.current;
    if (response == null) {
      requestPromise.current = null;
      throw new Error("could not get block hash");
    }
    cachedResponse.current = {
      hash: response.hash,
      timestamp: response.timestamp
    };
    requestPromise.current = null;
    return response;
  } catch (_error) {
    requestPromise.current = null;
    return null;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getLatestBlockHash
});
//# sourceMappingURL=getLatestBlockHash.cjs.map
