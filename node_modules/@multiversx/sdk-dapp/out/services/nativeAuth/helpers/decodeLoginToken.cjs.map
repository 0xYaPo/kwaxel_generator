{
  "version": 3,
  "sources": ["../../../../src/services/nativeAuth/helpers/decodeLoginToken.ts"],
  "sourcesContent": ["import isString from 'lodash.isstring';\nimport { decodeBase64 } from 'utils/decoders/base64Utils';\n\nexport interface DecodedLoginTokenType {\n  blockHash: string;\n  extraInfo?: { timestamp: number };\n  origin: string;\n  ttl: number;\n}\n\nexport const decodeLoginToken = (\n  loginToken: string\n): DecodedLoginTokenType | null => {\n  if (!loginToken || !isString(loginToken)) {\n    return null;\n  }\n\n  const parts = loginToken.split('.');\n\n  if (parts.length !== 4) {\n    return null;\n  }\n\n  try {\n    const [origin, blockHash, ttl, extraInfo] = parts;\n    const parsedExtraInfo = JSON.parse(decodeBase64(extraInfo));\n    const parsedOrigin = decodeBase64(origin);\n\n    return {\n      ttl: Number(ttl),\n      extraInfo: parsedExtraInfo,\n      origin: parsedOrigin,\n      blockHash\n    };\n  } catch (e) {\n    console.error(`Error trying to decode ${loginToken}:`, e);\n\n    return null;\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAqB;AACrB,yBAA6B;AAStB,MAAM,mBAAmB,CAC9B,eACiC;AACjC,MAAI,CAAC,cAAc,KAAC,cAAAA,SAAS,UAAU,GAAG;AACxC,WAAO;AAAA,EACT;AAEA,QAAM,QAAQ,WAAW,MAAM,GAAG;AAElC,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO;AAAA,EACT;AAEA,MAAI;AACF,UAAM,CAAC,QAAQ,WAAW,KAAK,SAAS,IAAI;AAC5C,UAAM,kBAAkB,KAAK,UAAM,iCAAa,SAAS,CAAC;AAC1D,UAAM,mBAAe,iCAAa,MAAM;AAExC,WAAO;AAAA,MACL,KAAK,OAAO,GAAG;AAAA,MACf,WAAW;AAAA,MACX,QAAQ;AAAA,MACR;AAAA,IACF;AAAA,EACF,SAAS,GAAG;AACV,YAAQ,MAAM,0BAA0B,UAAU,KAAK,CAAC;AAExD,WAAO;AAAA,EACT;AACF;",
  "names": ["isString"]
}
