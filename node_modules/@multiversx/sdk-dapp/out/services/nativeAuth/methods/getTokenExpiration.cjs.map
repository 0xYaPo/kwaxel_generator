{
  "version": 3,
  "sources": ["../../../../src/services/nativeAuth/methods/getTokenExpiration.ts"],
  "sourcesContent": ["import { getUnixTimestamp } from 'utils/dateTime/getUnixTimestamp';\nimport { decodeNativeAuthToken } from '../helpers/decodeNativeAuthToken';\n\nexport interface GetTokenExpirationReturnType {\n  isExpired: boolean;\n  expiresAt?: number;\n  secondsUntilExpires?: number;\n}\n\nconst notFound = {\n  isExpired: false\n};\n\nexport const getTokenExpiration = (\n  token?: string\n): GetTokenExpirationReturnType => {\n  if (!token) {\n    return notFound;\n  }\n\n  const decodedToken = decodeNativeAuthToken(token);\n\n  if (!decodedToken) {\n    return notFound;\n  }\n\n  const unixNow = getUnixTimestamp();\n  const { ttl, extraInfo } = decodedToken;\n\n  const timestamp = extraInfo?.timestamp;\n\n  if (!timestamp) {\n    return notFound;\n  }\n\n  const expiresAt = timestamp + ttl;\n\n  const isExpired = unixNow > expiresAt;\n\n  const secondsUntilExpires = expiresAt - unixNow;\n\n  return { isExpired, expiresAt, secondsUntilExpires };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAiC;AACjC,mCAAsC;AAQtC,MAAM,WAAW;AAAA,EACf,WAAW;AACb;AAEO,MAAM,qBAAqB,CAChC,UACiC;AACjC,MAAI,CAAC,OAAO;AACV,WAAO;AAAA,EACT;AAEA,QAAM,mBAAe,oDAAsB,KAAK;AAEhD,MAAI,CAAC,cAAc;AACjB,WAAO;AAAA,EACT;AAEA,QAAM,cAAU,0CAAiB;AACjC,QAAM,EAAE,KAAK,UAAU,IAAI;AAE3B,QAAM,YAAY,WAAW;AAE7B,MAAI,CAAC,WAAW;AACd,WAAO;AAAA,EACT;AAEA,QAAM,YAAY,YAAY;AAE9B,QAAM,YAAY,UAAU;AAE5B,QAAM,sBAAsB,YAAY;AAExC,SAAO,EAAE,WAAW,WAAW,oBAAoB;AACrD;",
  "names": []
}
