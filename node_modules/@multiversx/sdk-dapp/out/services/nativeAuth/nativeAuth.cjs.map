{
  "version": 3,
  "sources": ["../../../src/services/nativeAuth/nativeAuth.ts"],
  "sourcesContent": ["import { NativeAuthClient } from '@multiversx/sdk-native-auth-client';\n\nimport {\n  getLatestBlockHash,\n  LatestBlockHashType\n} from './helpers/getLatestBlockHash';\n\nimport { buildNativeAuthConfig, getTokenExpiration } from './methods';\nimport { NativeAuthConfigType } from './nativeAuth.types';\n\ninterface NativeAuthInitType {\n  extraInfo?: { [key: string]: string };\n  latestBlockInfo?: LatestBlockHashType;\n  noCache?: boolean;\n}\n\nexport const nativeAuth = (config?: NativeAuthConfigType) => {\n  const {\n    origin,\n    apiAddress,\n    expirySeconds,\n    blockHashShard,\n    extraInfo: extraInfoFromConfig,\n    gatewayUrl,\n    extraRequestHeaders\n  } = buildNativeAuthConfig(config);\n\n  const nativeAuthClient = new NativeAuthClient({\n    origin,\n    apiUrl: apiAddress,\n    expirySeconds,\n    blockHashShard,\n    gatewayUrl,\n    extraRequestHeaders\n  });\n\n  const initialize = async (\n    initProps?: NativeAuthInitType\n  ): Promise<string> => {\n    if (!apiAddress || !origin) {\n      return '';\n    }\n\n    const getBlockHash = (): Promise<string> =>\n      nativeAuthClient.getCurrentBlockHash();\n\n    let latestBlockInfo = initProps?.latestBlockInfo;\n\n    latestBlockInfo ??= await getLatestBlockHash({\n      apiAddress,\n      blockHashShard,\n      getBlockHash,\n      noCache: initProps?.noCache\n    });\n\n    const { hash, timestamp } = latestBlockInfo;\n    const encodedExtraInfo = nativeAuthClient.encodeValue(\n      JSON.stringify({\n        ...(initProps?.extraInfo ?? extraInfoFromConfig),\n        ...(timestamp ? { timestamp } : {})\n      })\n    );\n    const encodedOrigin = nativeAuthClient.encodeValue(origin);\n\n    return `${encodedOrigin}.${hash}.${expirySeconds}.${encodedExtraInfo}`;\n  };\n\n  const getToken = ({\n    address,\n    token,\n    signature\n  }: {\n    address: string;\n    token: string;\n    signature: string;\n  }): string => nativeAuthClient.getToken(address, token, signature);\n\n  return {\n    initialize,\n    getToken,\n    getTokenExpiration\n  };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAAiC;AAEjC,gCAGO;AAEP,qBAA0D;AASnD,MAAM,aAAa,CAAC,WAAkC;AAC3D,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,WAAW;AAAA,IACX;AAAA,IACA;AAAA,EACF,QAAI,sCAAsB,MAAM;AAEhC,QAAM,mBAAmB,IAAI,+CAAiB;AAAA,IAC5C;AAAA,IACA,QAAQ;AAAA,IACR;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,QAAM,aAAa,OACjB,cACoB;AACpB,QAAI,CAAC,cAAc,CAAC,QAAQ;AAC1B,aAAO;AAAA,IACT;AAEA,UAAM,eAAe,MACnB,iBAAiB,oBAAoB;AAEvC,QAAI,kBAAkB,WAAW;AAEjC,wBAAoB,UAAM,8CAAmB;AAAA,MAC3C;AAAA,MACA;AAAA,MACA;AAAA,MACA,SAAS,WAAW;AAAA,IACtB,CAAC;AAED,UAAM,EAAE,MAAM,UAAU,IAAI;AAC5B,UAAM,mBAAmB,iBAAiB;AAAA,MACxC,KAAK,UAAU;AAAA,QACb,GAAI,WAAW,aAAa;AAAA,QAC5B,GAAI,YAAY,EAAE,UAAU,IAAI,CAAC;AAAA,MACnC,CAAC;AAAA,IACH;AACA,UAAM,gBAAgB,iBAAiB,YAAY,MAAM;AAEzD,WAAO,GAAG,aAAa,IAAI,IAAI,IAAI,aAAa,IAAI,gBAAgB;AAAA,EACtE;AAEA,QAAM,WAAW,CAAC;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,EACF,MAIc,iBAAiB,SAAS,SAAS,OAAO,SAAS;AAEjE,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
