"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var TransactionsTableController_exports = {};
__export(TransactionsTableController_exports, {
  TransactionsTableController: () => TransactionsTableController
});
module.exports = __toCommonJS(TransactionsTableController_exports);
var import_sdkDappUtils = require("../../lib/sdkDappUtils");
var import_serverTransactions = require("../../types/serverTransactions.types");
var import_tokens = require("../../types/tokens.types");
var import_getInterpretedTransaction = require("../../utils/transactions/getInterpretedTransaction");
var import_getTransactionValue = require("../../utils/transactions/getInterpretedTransaction/getTransactionValue/getTransactionValue");
var import_getLockedAccountName = require("../../utils/transactions/getInterpretedTransaction/helpers/getLockedAccountName");
var import_getShardText = require("../../utils/transactions/getInterpretedTransaction/helpers/getShardText");
var import_isContract = require("../../utils/validation/isContract");
var import_FormatAmountController = require("../FormatAmountController");
class TransactionsTableController {
  static async processTransactions({
    address,
    egldLabel,
    explorerAddress,
    transactions
  }) {
    const interpretedTransactions = transactions.map(
      (transaction) => (0, import_getInterpretedTransaction.getInterpretedTransaction)({
        address,
        explorerAddress,
        transaction
      })
    );
    const transactionRows = await Promise.all(
      interpretedTransactions.map(async (transaction) => {
        const receiverName = transaction.receiverAssets?.name.replace(
          /\p{Emoji}/gu,
          ""
        );
        const senderName = transaction.senderAssets?.name.replace(
          /\p{Emoji}/gu,
          ""
        );
        const { senderLockedAccount, receiverLockedAccount } = await (0, import_getLockedAccountName.getLockedAccountName)({
          receiver: transaction.receiver,
          sender: transaction.sender,
          tokenId: transaction.tokenIdentifier
        });
        const { egldValueData, tokenValueData, nftValueData } = (0, import_getTransactionValue.getTransactionValue)({
          transaction
        });
        const hideBadgeForMetaESDT = nftValueData?.token.type === import_tokens.NftEnumType.MetaESDT;
        const badge = hideBadgeForMetaESDT ? void 0 : nftValueData?.badgeText;
        const formattedAmount = import_FormatAmountController.FormatAmountController.getData({
          input: egldValueData?.value ?? tokenValueData?.value ?? nftValueData?.value ?? "",
          decimals: egldValueData?.decimals ?? tokenValueData?.decimals ?? nftValueData?.decimals ?? import_sdkDappUtils.DECIMALS,
          digits: 2
        });
        const transactionValue = {
          badge: badge ?? void 0,
          collection: tokenValueData?.token.collection ?? nftValueData?.token.collection,
          egldLabel: egldValueData ? egldLabel : "",
          link: tokenValueData?.tokenExplorerLink ?? nftValueData?.tokenExplorerLink,
          linkText: tokenValueData?.tokenLinkText ?? nftValueData?.tokenLinkText,
          name: tokenValueData?.token.name ?? nftValueData?.token.name,
          showFormattedAmount: Boolean(
            egldValueData || tokenValueData?.tokenFormattedAmount || nftValueData?.tokenFormattedAmount
          ),
          svgUrl: tokenValueData?.token.svgUrl ?? nftValueData?.token.svgUrl,
          ticker: tokenValueData?.token.ticker ?? nftValueData?.token.ticker,
          titleText: tokenValueData?.titleText ?? nftValueData?.titleText,
          valueDecimal: formattedAmount.valueDecimal,
          valueInteger: formattedAmount.valueInteger
        };
        const receiverShard = (0, import_getShardText.getShardText)(transaction.receiverShard);
        const senderShard = (0, import_getShardText.getShardText)(transaction.senderShard);
        const transactionRow = {
          age: transaction.transactionDetails.age,
          direction: transaction.transactionDetails.direction,
          method: transaction.transactionDetails.method,
          iconInfo: transaction.transactionDetails.iconInfo,
          link: transaction.links.transactionLink ?? "",
          txHash: transaction.txHash,
          receiver: {
            address: transaction.receiver,
            name: receiverName ?? "",
            description: `${receiverName ?? transaction.receiver} (${transaction.receiver})`,
            isContract: (0, import_isContract.isContract)(transaction.receiver),
            isTokenLocked: Boolean(receiverLockedAccount),
            link: transaction.links.receiverLink ?? "",
            shard: receiverShard,
            shardLink: transaction.links.receiverLink,
            showLink: transaction.transactionDetails.direction !== import_serverTransactions.TransactionDirectionEnum.IN
          },
          sender: {
            address: transaction.sender,
            name: senderName ?? "",
            description: `${senderName ?? transaction.sender} (${transaction.sender})`,
            isContract: (0, import_isContract.isContract)(transaction.sender),
            isTokenLocked: Boolean(senderLockedAccount),
            link: transaction.links.senderLink ?? "",
            shard: senderShard,
            shardLink: transaction.links.senderShardLink,
            showLink: transaction.transactionDetails.direction !== import_serverTransactions.TransactionDirectionEnum.OUT
          },
          value: transactionValue
        };
        return transactionRow;
      })
    );
    return transactionRows;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TransactionsTableController
});
//# sourceMappingURL=TransactionsTableController.cjs.map
