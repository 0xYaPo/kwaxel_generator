{
  "version": 3,
  "sources": ["../../../src/controllers/TransactionsTableController/TransactionsTableController.ts"],
  "sourcesContent": ["import { DECIMALS } from 'lib/sdkDappUtils';\nimport {\n  ServerTransactionType,\n  TransactionDirectionEnum\n} from 'types/serverTransactions.types';\nimport { NftEnumType } from 'types/tokens.types';\nimport { getInterpretedTransaction } from 'utils/transactions/getInterpretedTransaction';\nimport { getTransactionValue } from 'utils/transactions/getInterpretedTransaction/getTransactionValue/getTransactionValue';\nimport { getLockedAccountName } from 'utils/transactions/getInterpretedTransaction/helpers/getLockedAccountName';\nimport { getShardText } from 'utils/transactions/getInterpretedTransaction/helpers/getShardText';\nimport { isContract } from 'utils/validation/isContract';\nimport {\n  TransactionsRowType,\n  TransactionValueType\n} from './transactionsTableController.types';\nimport { FormatAmountController } from '../FormatAmountController';\n\ninterface TransactionsTableProcessTransactionsParamsType {\n  address: string;\n  egldLabel: string;\n  explorerAddress: string;\n  transactions: ServerTransactionType[];\n}\n\nexport class TransactionsTableController {\n  public static async processTransactions({\n    address,\n    egldLabel,\n    explorerAddress,\n    transactions\n  }: TransactionsTableProcessTransactionsParamsType): Promise<\n    TransactionsRowType[]\n  > {\n    const interpretedTransactions = transactions.map((transaction) =>\n      getInterpretedTransaction({\n        address,\n        explorerAddress,\n        transaction\n      })\n    );\n\n    const transactionRows = await Promise.all(\n      interpretedTransactions.map(async (transaction) => {\n        const receiverName = transaction.receiverAssets?.name.replace(\n          /\\p{Emoji}/gu,\n          ''\n        );\n\n        const senderName = transaction.senderAssets?.name.replace(\n          /\\p{Emoji}/gu,\n          ''\n        );\n\n        const { senderLockedAccount, receiverLockedAccount } =\n          await getLockedAccountName({\n            receiver: transaction.receiver,\n            sender: transaction.sender,\n            tokenId: transaction.tokenIdentifier\n          });\n\n        const { egldValueData, tokenValueData, nftValueData } =\n          getTransactionValue({\n            transaction\n          });\n\n        const hideBadgeForMetaESDT =\n          nftValueData?.token.type === NftEnumType.MetaESDT;\n\n        const badge = hideBadgeForMetaESDT\n          ? undefined\n          : nftValueData?.badgeText;\n\n        const formattedAmount = FormatAmountController.getData({\n          input:\n            egldValueData?.value ??\n            tokenValueData?.value ??\n            nftValueData?.value ??\n            '',\n          decimals:\n            egldValueData?.decimals ??\n            tokenValueData?.decimals ??\n            nftValueData?.decimals ??\n            DECIMALS,\n          digits: 2\n        });\n\n        const transactionValue: TransactionValueType = {\n          badge: badge ?? undefined,\n          collection:\n            tokenValueData?.token.collection ?? nftValueData?.token.collection,\n          egldLabel: egldValueData ? egldLabel : '',\n          link:\n            tokenValueData?.tokenExplorerLink ??\n            nftValueData?.tokenExplorerLink,\n          linkText:\n            tokenValueData?.tokenLinkText ?? nftValueData?.tokenLinkText,\n          name: tokenValueData?.token.name ?? nftValueData?.token.name,\n          showFormattedAmount: Boolean(\n            egldValueData ||\n              tokenValueData?.tokenFormattedAmount ||\n              nftValueData?.tokenFormattedAmount\n          ),\n          svgUrl: tokenValueData?.token.svgUrl ?? nftValueData?.token.svgUrl,\n          ticker: tokenValueData?.token.ticker ?? nftValueData?.token.ticker,\n          titleText: tokenValueData?.titleText ?? nftValueData?.titleText,\n          valueDecimal: formattedAmount.valueDecimal,\n          valueInteger: formattedAmount.valueInteger\n        };\n\n        const receiverShard = getShardText(transaction.receiverShard);\n        const senderShard = getShardText(transaction.senderShard);\n\n        const transactionRow: TransactionsRowType = {\n          age: transaction.transactionDetails.age,\n          direction: transaction.transactionDetails.direction,\n          method: transaction.transactionDetails.method,\n          iconInfo: transaction.transactionDetails.iconInfo,\n          link: transaction.links.transactionLink ?? '',\n          txHash: transaction.txHash,\n          receiver: {\n            address: transaction.receiver,\n            name: receiverName ?? '',\n            description: `${receiverName ?? transaction.receiver} (${\n              transaction.receiver\n            })`,\n            isContract: isContract(transaction.receiver),\n            isTokenLocked: Boolean(receiverLockedAccount),\n            link: transaction.links.receiverLink ?? '',\n            shard: receiverShard,\n            shardLink: transaction.links.receiverLink,\n            showLink:\n              transaction.transactionDetails.direction !==\n              TransactionDirectionEnum.IN\n          },\n          sender: {\n            address: transaction.sender,\n            name: senderName ?? '',\n            description: `${senderName ?? transaction.sender} (${\n              transaction.sender\n            })`,\n            isContract: isContract(transaction.sender),\n            isTokenLocked: Boolean(senderLockedAccount),\n            link: transaction.links.senderLink ?? '',\n            shard: senderShard,\n            shardLink: transaction.links.senderShardLink,\n            showLink:\n              transaction.transactionDetails.direction !==\n              TransactionDirectionEnum.OUT\n          },\n          value: transactionValue\n        };\n\n        return transactionRow;\n      })\n    );\n\n    return transactionRows;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAyB;AACzB,gCAGO;AACP,oBAA4B;AAC5B,uCAA0C;AAC1C,iCAAoC;AACpC,kCAAqC;AACrC,0BAA6B;AAC7B,wBAA2B;AAK3B,oCAAuC;AAShC,MAAM,4BAA4B;AAAA,EACvC,aAAoB,oBAAoB;AAAA,IACtC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAEE;AACA,UAAM,0BAA0B,aAAa;AAAA,MAAI,CAAC,oBAChD,4DAA0B;AAAA,QACxB;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AAEA,UAAM,kBAAkB,MAAM,QAAQ;AAAA,MACpC,wBAAwB,IAAI,OAAO,gBAAgB;AACjD,cAAM,eAAe,YAAY,gBAAgB,KAAK;AAAA,UACpD;AAAA,UACA;AAAA,QACF;AAEA,cAAM,aAAa,YAAY,cAAc,KAAK;AAAA,UAChD;AAAA,UACA;AAAA,QACF;AAEA,cAAM,EAAE,qBAAqB,sBAAsB,IACjD,UAAM,kDAAqB;AAAA,UACzB,UAAU,YAAY;AAAA,UACtB,QAAQ,YAAY;AAAA,UACpB,SAAS,YAAY;AAAA,QACvB,CAAC;AAEH,cAAM,EAAE,eAAe,gBAAgB,aAAa,QAClD,gDAAoB;AAAA,UAClB;AAAA,QACF,CAAC;AAEH,cAAM,uBACJ,cAAc,MAAM,SAAS,0BAAY;AAE3C,cAAM,QAAQ,uBACV,SACA,cAAc;AAElB,cAAM,kBAAkB,qDAAuB,QAAQ;AAAA,UACrD,OACE,eAAe,SACf,gBAAgB,SAChB,cAAc,SACd;AAAA,UACF,UACE,eAAe,YACf,gBAAgB,YAChB,cAAc,YACd;AAAA,UACF,QAAQ;AAAA,QACV,CAAC;AAED,cAAM,mBAAyC;AAAA,UAC7C,OAAO,SAAS;AAAA,UAChB,YACE,gBAAgB,MAAM,cAAc,cAAc,MAAM;AAAA,UAC1D,WAAW,gBAAgB,YAAY;AAAA,UACvC,MACE,gBAAgB,qBAChB,cAAc;AAAA,UAChB,UACE,gBAAgB,iBAAiB,cAAc;AAAA,UACjD,MAAM,gBAAgB,MAAM,QAAQ,cAAc,MAAM;AAAA,UACxD,qBAAqB;AAAA,YACnB,iBACE,gBAAgB,wBAChB,cAAc;AAAA,UAClB;AAAA,UACA,QAAQ,gBAAgB,MAAM,UAAU,cAAc,MAAM;AAAA,UAC5D,QAAQ,gBAAgB,MAAM,UAAU,cAAc,MAAM;AAAA,UAC5D,WAAW,gBAAgB,aAAa,cAAc;AAAA,UACtD,cAAc,gBAAgB;AAAA,UAC9B,cAAc,gBAAgB;AAAA,QAChC;AAEA,cAAM,oBAAgB,kCAAa,YAAY,aAAa;AAC5D,cAAM,kBAAc,kCAAa,YAAY,WAAW;AAExD,cAAM,iBAAsC;AAAA,UAC1C,KAAK,YAAY,mBAAmB;AAAA,UACpC,WAAW,YAAY,mBAAmB;AAAA,UAC1C,QAAQ,YAAY,mBAAmB;AAAA,UACvC,UAAU,YAAY,mBAAmB;AAAA,UACzC,MAAM,YAAY,MAAM,mBAAmB;AAAA,UAC3C,QAAQ,YAAY;AAAA,UACpB,UAAU;AAAA,YACR,SAAS,YAAY;AAAA,YACrB,MAAM,gBAAgB;AAAA,YACtB,aAAa,GAAG,gBAAgB,YAAY,QAAQ,KAClD,YAAY,QACd;AAAA,YACA,gBAAY,8BAAW,YAAY,QAAQ;AAAA,YAC3C,eAAe,QAAQ,qBAAqB;AAAA,YAC5C,MAAM,YAAY,MAAM,gBAAgB;AAAA,YACxC,OAAO;AAAA,YACP,WAAW,YAAY,MAAM;AAAA,YAC7B,UACE,YAAY,mBAAmB,cAC/B,mDAAyB;AAAA,UAC7B;AAAA,UACA,QAAQ;AAAA,YACN,SAAS,YAAY;AAAA,YACrB,MAAM,cAAc;AAAA,YACpB,aAAa,GAAG,cAAc,YAAY,MAAM,KAC9C,YAAY,MACd;AAAA,YACA,gBAAY,8BAAW,YAAY,MAAM;AAAA,YACzC,eAAe,QAAQ,mBAAmB;AAAA,YAC1C,MAAM,YAAY,MAAM,cAAc;AAAA,YACtC,OAAO;AAAA,YACP,WAAW,YAAY,MAAM;AAAA,YAC7B,UACE,YAAY,mBAAmB,cAC/B,mDAAyB;AAAA,UAC7B;AAAA,UACA,OAAO;AAAA,QACT;AAEA,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,WAAO;AAAA,EACT;AACF;",
  "names": []
}
