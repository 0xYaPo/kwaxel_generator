"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var logout_exports = {};
__export(logout_exports, {
  logout: () => logout
});
module.exports = __toCommonJS(logout_exports);
var import_storage = require("../../../../constants/storage.constants");
var import_window = require("../../../../constants/window.constants");
var import_getAddress = require("../../../../methods/account/getAddress");
var import_registerWebsocket = require("../../../../methods/initApp/websocket/registerWebsocket");
var import_sharedActions = require("../../../../store/actions/sharedActions/sharedActions");
const broadcastLogoutAcrossTabs = (address, localStorage) => {
  const logoutEventKey = `sdk-dapp-logout-event-${address}`;
  const storedAddress = localStorage.getItem(logoutEventKey);
  if (storedAddress && address !== storedAddress) {
    return;
  }
  localStorage.setItem(logoutEventKey, address);
  localStorage.removeItem(logoutEventKey);
};
async function logout({
  provider,
  options = {
    shouldBroadcastLogoutAcrossTabs: true
  }
}) {
  let address = (0, import_getAddress.getAddress)();
  if (options.shouldBroadcastLogoutAcrossTabs && import_window.safeWindow.localStorage) {
    broadcastLogoutAcrossTabs(address, import_window.safeWindow.localStorage);
  }
  try {
    (0, import_sharedActions.logoutAction)();
    import_storage.subscriptions.forEach((unsubscribe) => unsubscribe());
    import_storage.subscriptions.clear();
    import_registerWebsocket.websocketManager.closeConnectionRef?.();
    const isLoggedOut = await provider.logout();
    return isLoggedOut;
  } catch (err) {
    console.error("Logging out error:", err);
    return false;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  logout
});
//# sourceMappingURL=logout.cjs.map
