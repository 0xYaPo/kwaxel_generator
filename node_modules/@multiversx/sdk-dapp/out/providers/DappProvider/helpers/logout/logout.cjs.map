{
  "version": 3,
  "sources": ["../../../../../src/providers/DappProvider/helpers/logout/logout.ts"],
  "sourcesContent": ["import { subscriptions } from 'constants/storage.constants';\nimport { safeWindow } from 'constants/window.constants';\nimport { getAddress } from 'methods/account/getAddress';\nimport { websocketManager } from 'methods/initApp/websocket/registerWebsocket';\nimport { IProvider } from 'providers/types/providerFactory.types';\nimport { logoutAction } from 'store/actions/sharedActions/sharedActions';\n\nexport type LogoutPropsType = {\n  shouldAttemptReLogin?: boolean;\n  shouldBroadcastLogoutAcrossTabs?: boolean;\n  /*\n   * Only used for web-wallet crossWindow login\n   */\n  hasConsentPopup?: boolean;\n};\n\ninterface IProviderLogout {\n  provider: IProvider;\n  options?: LogoutPropsType;\n}\n\nconst broadcastLogoutAcrossTabs = (address: string, localStorage: Storage) => {\n  const logoutEventKey = `sdk-dapp-logout-event-${address}`;\n  const storedAddress = localStorage.getItem(logoutEventKey);\n\n  if (storedAddress && address !== storedAddress) {\n    return;\n  }\n\n  localStorage.setItem(logoutEventKey, address);\n  localStorage.removeItem(logoutEventKey);\n};\n\nexport async function logout({\n  provider,\n  options = {\n    shouldBroadcastLogoutAcrossTabs: true\n  }\n}: IProviderLogout): Promise<boolean> {\n  let address = getAddress();\n\n  if (options.shouldBroadcastLogoutAcrossTabs && safeWindow.localStorage) {\n    broadcastLogoutAcrossTabs(address, safeWindow.localStorage);\n  }\n  try {\n    logoutAction();\n\n    // Clear all active subscriptions on logout\n    subscriptions.forEach((unsubscribe) => unsubscribe());\n    subscriptions.clear();\n    websocketManager.closeConnectionRef?.();\n    const isLoggedOut = await provider.logout();\n    return isLoggedOut;\n  } catch (err) {\n    console.error('Logging out error:', err);\n    return false;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA8B;AAC9B,oBAA2B;AAC3B,wBAA2B;AAC3B,+BAAiC;AAEjC,2BAA6B;AAgB7B,MAAM,4BAA4B,CAAC,SAAiB,iBAA0B;AAC5E,QAAM,iBAAiB,yBAAyB,OAAO;AACvD,QAAM,gBAAgB,aAAa,QAAQ,cAAc;AAEzD,MAAI,iBAAiB,YAAY,eAAe;AAC9C;AAAA,EACF;AAEA,eAAa,QAAQ,gBAAgB,OAAO;AAC5C,eAAa,WAAW,cAAc;AACxC;AAEA,eAAsB,OAAO;AAAA,EAC3B;AAAA,EACA,UAAU;AAAA,IACR,iCAAiC;AAAA,EACnC;AACF,GAAsC;AACpC,MAAI,cAAU,8BAAW;AAEzB,MAAI,QAAQ,mCAAmC,yBAAW,cAAc;AACtE,8BAA0B,SAAS,yBAAW,YAAY;AAAA,EAC5D;AACA,MAAI;AACF,2CAAa;AAGb,iCAAc,QAAQ,CAAC,gBAAgB,YAAY,CAAC;AACpD,iCAAc,MAAM;AACpB,8CAAiB,qBAAqB;AACtC,UAAM,cAAc,MAAM,SAAS,OAAO;AAC1C,WAAO;AAAA,EACT,SAAS,KAAK;AACZ,YAAQ,MAAM,sBAAsB,GAAG;AACvC,WAAO;AAAA,EACT;AACF;",
  "names": []
}
