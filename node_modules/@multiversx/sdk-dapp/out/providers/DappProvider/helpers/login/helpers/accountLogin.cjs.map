{
  "version": 3,
  "sources": ["../../../../../../src/providers/DappProvider/helpers/login/helpers/accountLogin.ts"],
  "sourcesContent": ["import { getLatestNonce } from 'methods/account/getLatestNonce';\nimport { setGasStationMetadata } from 'methods/initApp/gastStationMetadata/setGasStationMetadata';\nimport { registerWebsocketListener } from 'methods/initApp/websocket/registerWebsocket';\nimport { trackTransactions } from 'methods/trackTransactions/trackTransactions';\nimport { IProvider } from 'providers/types/providerFactory.types';\nimport { loginAction } from 'store/actions';\nimport { setAccount } from 'store/actions/account';\nimport { AccountType } from 'types/account.types';\nimport { fetchAccount } from 'utils/account/fetchAccount';\nimport { trimUsernameDomain } from 'utils/account/trimUsernameDomain';\n\ninterface IAccountLoginProps {\n  address: string;\n  provider: IProvider;\n  apiAddress: string;\n}\n\nexport async function accountLogin({\n  address,\n  provider,\n  apiAddress\n}: IAccountLoginProps) {\n  const account = await fetchAccount({\n    address,\n    baseURL: apiAddress\n  });\n\n  if (!account) {\n    throw new Error('Account not found');\n  }\n\n  loginAction({\n    address,\n    providerType: provider.getType()\n  });\n\n  const newAccount: AccountType = {\n    ...account,\n    username: trimUsernameDomain(account.username),\n    nonce: getLatestNonce(account)\n  };\n\n  setAccount(newAccount);\n\n  await registerWebsocketListener(address);\n  trackTransactions();\n\n  if (account.shard != null) {\n    await setGasStationMetadata({\n      shard: Number(account.shard),\n      apiAddress\n    });\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAA+B;AAC/B,mCAAsC;AACtC,+BAA0C;AAC1C,+BAAkC;AAElC,qBAA4B;AAC5B,qBAA2B;AAE3B,0BAA6B;AAC7B,gCAAmC;AAQnC,eAAsB,aAAa;AAAA,EACjC;AAAA,EACA;AAAA,EACA;AACF,GAAuB;AACrB,QAAM,UAAU,UAAM,kCAAa;AAAA,IACjC;AAAA,IACA,SAAS;AAAA,EACX,CAAC;AAED,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,mBAAmB;AAAA,EACrC;AAEA,kCAAY;AAAA,IACV;AAAA,IACA,cAAc,SAAS,QAAQ;AAAA,EACjC,CAAC;AAED,QAAM,aAA0B;AAAA,IAC9B,GAAG;AAAA,IACH,cAAU,8CAAmB,QAAQ,QAAQ;AAAA,IAC7C,WAAO,sCAAe,OAAO;AAAA,EAC/B;AAEA,iCAAW,UAAU;AAErB,YAAM,oDAA0B,OAAO;AACvC,kDAAkB;AAElB,MAAI,QAAQ,SAAS,MAAM;AACzB,cAAM,oDAAsB;AAAA,MAC1B,OAAO,OAAO,QAAQ,KAAK;AAAA,MAC3B;AAAA,IACF,CAAC;AAAA,EACH;AACF;",
  "names": []
}
