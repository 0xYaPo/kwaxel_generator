"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var login_exports = {};
__export(login_exports, {
  login: () => login
});
module.exports = __toCommonJS(login_exports);
var import_registerWebsocket = require("../../../../methods/initApp/websocket/registerWebsocket");
var import_getNetworkConfig = require("../../../../methods/network/getNetworkConfig");
var import_trackTransactions = require("../../../../methods/trackTransactions/trackTransactions");
var import_nativeAuth = require("../../../../services/nativeAuth");
var import_decodeNativeAuthToken = require("../../../../services/nativeAuth/helpers/decodeNativeAuthToken");
var import_loginInfoActions = require("../../../../store/actions/loginInfo/loginInfoActions");
var import_selectors = require("../../../../store/selectors");
var import_store = require("../../../../store/store");
var import_accountLogin = require("./helpers/accountLogin");
var import_extractAddressFromToken = require("./helpers/extractAddressFromToken");
async function loginWithoutNativeToken(provider) {
  const {
    network: { apiAddress }
  } = (0, import_getNetworkConfig.getNetworkConfig)();
  await provider.login();
  const address = await provider.getAddress();
  if (!address) {
    throw new Error("Address not found");
  }
  await (0, import_accountLogin.accountLogin)({ address, provider, apiAddress });
  return {
    address
  };
}
async function loginWithNativeToken({
  provider,
  nativeAuthConfig,
  token
}) {
  const {
    network: { apiAddress }
  } = (0, import_getNetworkConfig.getNetworkConfig)();
  const nativeAuthClient = (0, import_nativeAuth.nativeAuth)(nativeAuthConfig);
  let loginToken = token;
  if (!loginToken) {
    loginToken = await nativeAuthClient.initialize({
      noCache: true
    });
  }
  const { address, signature, ...loginResult } = await provider.login({
    token: loginToken
  });
  if (!address) {
    console.warn("Login cancelled.");
    return null;
  }
  if (!signature) {
    console.error("Failed to sign login token");
    return null;
  }
  const decodedToken = (0, import_decodeNativeAuthToken.decodeNativeAuthToken)(loginResult?.accessToken);
  const nativeAuthToken = decodedToken ? loginResult.accessToken : nativeAuthClient.getToken({
    address,
    token: loginToken,
    signature
  });
  (0, import_loginInfoActions.setTokenLogin)({
    loginToken,
    signature,
    nativeAuthToken
  });
  const extractedAddress = await (0, import_extractAddressFromToken.extractAddressFromToken)({
    loginToken,
    extraInfoData: {
      multisig: loginResult?.multisig,
      impersonate: loginResult?.impersonate
    },
    address
  });
  await (0, import_accountLogin.accountLogin)({
    address: extractedAddress,
    provider,
    apiAddress
  });
  return {
    address: extractedAddress,
    signature
  };
}
async function login(provider, options) {
  const nativeAuthConfig = (0, import_selectors.nativeAuthConfigSelector)((0, import_store.getState)());
  if (nativeAuthConfig) {
    const data = await loginWithNativeToken({
      provider,
      nativeAuthConfig,
      token: options?.token
    });
    return data;
  }
  const { address } = await loginWithoutNativeToken(provider);
  await (0, import_registerWebsocket.registerWebsocketListener)(address);
  (0, import_trackTransactions.trackTransactions)();
  return { address };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  login
});
//# sourceMappingURL=login.cjs.map
