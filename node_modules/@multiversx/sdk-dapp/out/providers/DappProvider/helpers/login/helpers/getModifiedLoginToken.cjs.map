{
  "version": 3,
  "sources": ["../../../../../../src/providers/DappProvider/helpers/login/helpers/getModifiedLoginToken.ts"],
  "sourcesContent": ["import { decodeLoginToken } from 'services/nativeAuth/helpers/decodeLoginToken';\nimport { LatestBlockHashType } from 'services/nativeAuth/helpers/getLatestBlockHash';\nimport { nativeAuth } from 'services/nativeAuth/nativeAuth';\n\nexport interface GetMultiSigLoginTokenType {\n  loginToken?: string;\n  extraInfoData: {\n    multisig?: string;\n    impersonate?: string;\n  };\n}\n\nexport async function getModifiedLoginToken({\n  loginToken,\n  extraInfoData\n}: GetMultiSigLoginTokenType) {\n  if (loginToken == null || Object.keys(extraInfoData).length === 0) {\n    return null;\n  }\n\n  const data = decodeLoginToken(String(loginToken));\n  const { timestamp, ...rest } = data?.extraInfo || {};\n\n  const isValidData = data && timestamp != null;\n\n  if (!isValidData) {\n    return null;\n  }\n  const latestBlockInfo: LatestBlockHashType = {\n    hash: String(data?.blockHash),\n    timestamp: Number(timestamp)\n  };\n\n  const tokenLogin = await nativeAuth({\n    extraInfo: { ...rest, ...extraInfoData },\n    expirySeconds: data?.ttl,\n    origin: data?.origin\n  }).initialize({\n    latestBlockInfo\n  });\n\n  return tokenLogin;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAiC;AAEjC,wBAA2B;AAU3B,eAAsB,sBAAsB;AAAA,EAC1C;AAAA,EACA;AACF,GAA8B;AAC5B,MAAI,cAAc,QAAQ,OAAO,KAAK,aAAa,EAAE,WAAW,GAAG;AACjE,WAAO;AAAA,EACT;AAEA,QAAM,WAAO,0CAAiB,OAAO,UAAU,CAAC;AAChD,QAAM,EAAE,WAAW,GAAG,KAAK,IAAI,MAAM,aAAa,CAAC;AAEnD,QAAM,cAAc,QAAQ,aAAa;AAEzC,MAAI,CAAC,aAAa;AAChB,WAAO;AAAA,EACT;AACA,QAAM,kBAAuC;AAAA,IAC3C,MAAM,OAAO,MAAM,SAAS;AAAA,IAC5B,WAAW,OAAO,SAAS;AAAA,EAC7B;AAEA,QAAM,aAAa,UAAM,8BAAW;AAAA,IAClC,WAAW,EAAE,GAAG,MAAM,GAAG,cAAc;AAAA,IACvC,eAAe,MAAM;AAAA,IACrB,QAAQ,MAAM;AAAA,EAChB,CAAC,EAAE,WAAW;AAAA,IACZ;AAAA,EACF,CAAC;AAED,SAAO;AACT;",
  "names": []
}
