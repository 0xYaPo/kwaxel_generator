{
  "version": 3,
  "sources": ["../../../../../src/providers/DappProvider/helpers/login/login.ts"],
  "sourcesContent": ["import { registerWebsocketListener } from 'methods/initApp/websocket/registerWebsocket';\nimport { getNetworkConfig } from 'methods/network/getNetworkConfig';\nimport { trackTransactions } from 'methods/trackTransactions/trackTransactions';\nimport { IProvider } from 'providers/types/providerFactory.types';\nimport { nativeAuth } from 'services/nativeAuth';\nimport { decodeNativeAuthToken } from 'services/nativeAuth/helpers/decodeNativeAuthToken';\nimport { NativeAuthConfigType } from 'services/nativeAuth/nativeAuth.types';\nimport { setTokenLogin } from 'store/actions/loginInfo/loginInfoActions';\nimport { nativeAuthConfigSelector } from 'store/selectors';\nimport { getState } from 'store/store';\nimport { accountLogin } from './helpers/accountLogin';\nimport { extractAddressFromToken } from './helpers/extractAddressFromToken';\n\nasync function loginWithoutNativeToken(provider: IProvider) {\n  const {\n    network: { apiAddress }\n  } = getNetworkConfig();\n\n  await provider.login();\n\n  const address = await provider.getAddress();\n\n  if (!address) {\n    throw new Error('Address not found');\n  }\n\n  await accountLogin({ address, provider, apiAddress });\n\n  return {\n    address\n  };\n}\n\nasync function loginWithNativeToken({\n  provider,\n  nativeAuthConfig,\n  token\n}: {\n  provider: IProvider;\n  nativeAuthConfig: NativeAuthConfigType;\n  token?: string;\n}) {\n  const {\n    network: { apiAddress }\n  } = getNetworkConfig();\n\n  const nativeAuthClient = nativeAuth(nativeAuthConfig);\n  let loginToken = token;\n\n  if (!loginToken) {\n    loginToken = await nativeAuthClient.initialize({\n      noCache: true\n    });\n  }\n\n  const { address, signature, ...loginResult } = await provider.login({\n    token: loginToken\n  });\n\n  if (!address) {\n    console.warn('Login cancelled.');\n    return null;\n  }\n\n  if (!signature) {\n    console.error('Failed to sign login token');\n    return null;\n  }\n\n  // nativeAuthToken received from hub login\n  const decodedToken = decodeNativeAuthToken(loginResult?.accessToken);\n\n  const nativeAuthToken = decodedToken\n    ? loginResult.accessToken\n    : nativeAuthClient.getToken({\n        address,\n        token: loginToken,\n        signature\n      });\n\n  setTokenLogin({\n    loginToken,\n    signature,\n    nativeAuthToken\n  });\n\n  const extractedAddress = await extractAddressFromToken({\n    loginToken,\n    extraInfoData: {\n      multisig: loginResult?.multisig,\n      impersonate: loginResult?.impersonate\n    },\n    address\n  });\n\n  await accountLogin({\n    address: extractedAddress,\n    provider,\n    apiAddress\n  });\n\n  return {\n    address: extractedAddress,\n    signature\n  };\n}\n\nexport async function login(provider: IProvider, options?: { token?: string }) {\n  const nativeAuthConfig = nativeAuthConfigSelector(getState());\n\n  if (nativeAuthConfig) {\n    const data = await loginWithNativeToken({\n      provider,\n      nativeAuthConfig,\n      token: options?.token\n    });\n    return data;\n  }\n\n  const { address } = await loginWithoutNativeToken(provider);\n\n  await registerWebsocketListener(address);\n  trackTransactions();\n\n  return { address };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA0C;AAC1C,8BAAiC;AACjC,+BAAkC;AAElC,wBAA2B;AAC3B,mCAAsC;AAEtC,8BAA8B;AAC9B,uBAAyC;AACzC,mBAAyB;AACzB,0BAA6B;AAC7B,qCAAwC;AAExC,eAAe,wBAAwB,UAAqB;AAC1D,QAAM;AAAA,IACJ,SAAS,EAAE,WAAW;AAAA,EACxB,QAAI,0CAAiB;AAErB,QAAM,SAAS,MAAM;AAErB,QAAM,UAAU,MAAM,SAAS,WAAW;AAE1C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,mBAAmB;AAAA,EACrC;AAEA,YAAM,kCAAa,EAAE,SAAS,UAAU,WAAW,CAAC;AAEpD,SAAO;AAAA,IACL;AAAA,EACF;AACF;AAEA,eAAe,qBAAqB;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AACF,GAIG;AACD,QAAM;AAAA,IACJ,SAAS,EAAE,WAAW;AAAA,EACxB,QAAI,0CAAiB;AAErB,QAAM,uBAAmB,8BAAW,gBAAgB;AACpD,MAAI,aAAa;AAEjB,MAAI,CAAC,YAAY;AACf,iBAAa,MAAM,iBAAiB,WAAW;AAAA,MAC7C,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AAEA,QAAM,EAAE,SAAS,WAAW,GAAG,YAAY,IAAI,MAAM,SAAS,MAAM;AAAA,IAClE,OAAO;AAAA,EACT,CAAC;AAED,MAAI,CAAC,SAAS;AACZ,YAAQ,KAAK,kBAAkB;AAC/B,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,WAAW;AACd,YAAQ,MAAM,4BAA4B;AAC1C,WAAO;AAAA,EACT;AAGA,QAAM,mBAAe,oDAAsB,aAAa,WAAW;AAEnE,QAAM,kBAAkB,eACpB,YAAY,cACZ,iBAAiB,SAAS;AAAA,IACxB;AAAA,IACA,OAAO;AAAA,IACP;AAAA,EACF,CAAC;AAEL,6CAAc;AAAA,IACZ;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,QAAM,mBAAmB,UAAM,wDAAwB;AAAA,IACrD;AAAA,IACA,eAAe;AAAA,MACb,UAAU,aAAa;AAAA,MACvB,aAAa,aAAa;AAAA,IAC5B;AAAA,IACA;AAAA,EACF,CAAC;AAED,YAAM,kCAAa;AAAA,IACjB,SAAS;AAAA,IACT;AAAA,IACA;AAAA,EACF,CAAC;AAED,SAAO;AAAA,IACL,SAAS;AAAA,IACT;AAAA,EACF;AACF;AAEA,eAAsB,MAAM,UAAqB,SAA8B;AAC7E,QAAM,uBAAmB,+CAAyB,uBAAS,CAAC;AAE5D,MAAI,kBAAkB;AACpB,UAAM,OAAO,MAAM,qBAAqB;AAAA,MACtC;AAAA,MACA;AAAA,MACA,OAAO,SAAS;AAAA,IAClB,CAAC;AACD,WAAO;AAAA,EACT;AAEA,QAAM,EAAE,QAAQ,IAAI,MAAM,wBAAwB,QAAQ;AAE1D,YAAM,oDAA0B,OAAO;AACvC,kDAAkB;AAElB,SAAO,EAAE,QAAQ;AACnB;",
  "names": []
}
