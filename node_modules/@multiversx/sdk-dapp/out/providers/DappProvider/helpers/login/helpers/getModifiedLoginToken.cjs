"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getModifiedLoginToken_exports = {};
__export(getModifiedLoginToken_exports, {
  getModifiedLoginToken: () => getModifiedLoginToken
});
module.exports = __toCommonJS(getModifiedLoginToken_exports);
var import_decodeLoginToken = require("../../../../../services/nativeAuth/helpers/decodeLoginToken");
var import_nativeAuth = require("../../../../../services/nativeAuth/nativeAuth");
async function getModifiedLoginToken({
  loginToken,
  extraInfoData
}) {
  if (loginToken == null || Object.keys(extraInfoData).length === 0) {
    return null;
  }
  const data = (0, import_decodeLoginToken.decodeLoginToken)(String(loginToken));
  const { timestamp, ...rest } = data?.extraInfo || {};
  const isValidData = data && timestamp != null;
  if (!isValidData) {
    return null;
  }
  const latestBlockInfo = {
    hash: String(data?.blockHash),
    timestamp: Number(timestamp)
  };
  const tokenLogin = await (0, import_nativeAuth.nativeAuth)({
    extraInfo: { ...rest, ...extraInfoData },
    expirySeconds: data?.ttl,
    origin: data?.origin
  }).initialize({
    latestBlockInfo
  });
  return tokenLogin;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getModifiedLoginToken
});
//# sourceMappingURL=getModifiedLoginToken.cjs.map
