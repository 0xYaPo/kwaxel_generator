"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var signTransactionsWithProvider_exports = {};
__export(signTransactionsWithProvider_exports, {
  signTransactionsWithProvider: () => signTransactionsWithProvider
});
module.exports = __toCommonJS(signTransactionsWithProvider_exports);
var import_sdkCore = require("../../../../lib/sdkCore");
var import_getAccount = require("../../../../methods/account/getAccount");
var import_providerFactory = require("../../../../providers/types/providerFactory.types");
var import_actions = require("../../../../store/actions");
var import_utils = require("../../../../utils");
var import_computeNonces = require("../computeNonces/computeNonces");
async function signTransactionsWithProvider({
  provider,
  transactions,
  options = {}
}) {
  await (0, import_utils.refreshAccount)();
  const { isGuarded, activeGuardianAddress, nonce } = (0, import_getAccount.getAccount)();
  const isLedger = provider.getType() === import_providerFactory.ProviderTypeEnum.ledger;
  const transactionsWithComputedNonce = (0, import_computeNonces.computeNonces)({
    latestNonce: nonce,
    transactions
  });
  const transactionsToSign = activeGuardianAddress && isGuarded && !options.skipGuardian ? transactionsWithComputedNonce?.map((transaction) => {
    transaction.version = import_sdkCore.TransactionVersion.withTxOptions().valueOf();
    transaction.options = import_sdkCore.TransactionOptions.withOptions({
      guarded: true,
      ...isLedger ? { hashSign: true } : {}
    }).valueOf();
    transaction.guardian = import_sdkCore.Address.newFromBech32(activeGuardianAddress);
    return transaction;
  }) : transactionsWithComputedNonce;
  const signedTransactions = await provider.signTransactions(transactionsToSign) ?? [];
  (0, import_actions.setAccountNonce)(nonce + signedTransactions.length);
  return signedTransactions;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  signTransactionsWithProvider
});
//# sourceMappingURL=signTransactionsWithProvider.cjs.map
