{
  "version": 3,
  "sources": ["../../../../../src/providers/DappProvider/helpers/signTransactions/signTransactionsWithProvider.ts"],
  "sourcesContent": ["import {\n  Address,\n  Transaction,\n  TransactionOptions,\n  TransactionVersion\n} from 'lib/sdkCore';\nimport { getAccount } from 'methods/account/getAccount';\nimport {\n  IProvider,\n  ProviderTypeEnum\n} from 'providers/types/providerFactory.types';\nimport { setAccountNonce } from 'store/actions';\nimport { refreshAccount } from 'utils';\nimport { computeNonces } from '../computeNonces/computeNonces';\n\nexport type SignTransactionsOptionsType = {\n  skipGuardian?: boolean;\n};\n\ntype SignTransactionsType = {\n  provider: IProvider;\n  transactions: Transaction[];\n  options?: SignTransactionsOptionsType;\n};\n\nexport async function signTransactionsWithProvider({\n  provider,\n  transactions,\n  options = {}\n}: SignTransactionsType): Promise<Transaction[]> {\n  await refreshAccount();\n  const { isGuarded, activeGuardianAddress, nonce } = getAccount();\n  const isLedger = provider.getType() === ProviderTypeEnum.ledger;\n\n  const transactionsWithComputedNonce = computeNonces({\n    latestNonce: nonce,\n    transactions\n  });\n\n  const transactionsToSign =\n    activeGuardianAddress && isGuarded && !options.skipGuardian\n      ? transactionsWithComputedNonce?.map((transaction) => {\n          transaction.version = TransactionVersion.withTxOptions().valueOf();\n          transaction.options = TransactionOptions.withOptions({\n            guarded: true,\n            ...(isLedger ? { hashSign: true } : {})\n          }).valueOf();\n\n          transaction.guardian = Address.newFromBech32(activeGuardianAddress);\n\n          return transaction;\n        })\n      : transactionsWithComputedNonce;\n\n  const signedTransactions: Transaction[] =\n    (await provider.signTransactions(transactionsToSign)) ?? [];\n\n  setAccountNonce(nonce + signedTransactions.length);\n\n  return signedTransactions;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAKO;AACP,wBAA2B;AAC3B,6BAGO;AACP,qBAAgC;AAChC,mBAA+B;AAC/B,2BAA8B;AAY9B,eAAsB,6BAA6B;AAAA,EACjD;AAAA,EACA;AAAA,EACA,UAAU,CAAC;AACb,GAAiD;AAC/C,YAAM,6BAAe;AACrB,QAAM,EAAE,WAAW,uBAAuB,MAAM,QAAI,8BAAW;AAC/D,QAAM,WAAW,SAAS,QAAQ,MAAM,wCAAiB;AAEzD,QAAM,oCAAgC,oCAAc;AAAA,IAClD,aAAa;AAAA,IACb;AAAA,EACF,CAAC;AAED,QAAM,qBACJ,yBAAyB,aAAa,CAAC,QAAQ,eAC3C,+BAA+B,IAAI,CAAC,gBAAgB;AAClD,gBAAY,UAAU,kCAAmB,cAAc,EAAE,QAAQ;AACjE,gBAAY,UAAU,kCAAmB,YAAY;AAAA,MACnD,SAAS;AAAA,MACT,GAAI,WAAW,EAAE,UAAU,KAAK,IAAI,CAAC;AAAA,IACvC,CAAC,EAAE,QAAQ;AAEX,gBAAY,WAAW,uBAAQ,cAAc,qBAAqB;AAElE,WAAO;AAAA,EACT,CAAC,IACD;AAEN,QAAM,qBACH,MAAM,SAAS,iBAAiB,kBAAkB,KAAM,CAAC;AAE5D,sCAAgB,QAAQ,mBAAmB,MAAM;AAEjD,SAAO;AACT;",
  "names": []
}
