{
  "version": 3,
  "sources": ["../../../../../src/providers/DappProvider/helpers/signErrors/handleSignError.ts"],
  "sourcesContent": ["import {\n  CANCEL_TRANSACTION_TOAST_DEFAULT_DURATION,\n  CANCEL_TRANSACTION_TOAST_ID,\n  ERROR_SIGNING_TOAST_ID\n} from 'constants/transactions.constants';\nimport { ToastIconsEnum } from 'managers/internal/ToastManager/helpers/getToastDataStateByStatus';\nimport { createCustomToast } from 'store/actions';\nimport { SigningErrorsEnum, SigningWarningsEnum } from 'types/enums.types';\n\nconst states = {\n  error: {\n    title: SigningErrorsEnum.errorSigning.toString(),\n    iconClassName: 'danger',\n    toastId: `${ERROR_SIGNING_TOAST_ID}-${Date.now()}`\n  },\n  warning: {\n    title: SigningWarningsEnum.cancelled.toString(),\n    iconClassName: 'warning',\n    toastId: `${CANCEL_TRANSACTION_TOAST_ID}-${Date.now()}`\n  }\n};\n\nconst errorsMap = {\n  extensionResponse: 'Unable to sign transactions', // extension\n  'Transaction canceled': 'Transaction canceled', // web wallet\n  'cancelled by user': 'Transaction signing cancelled by user', // custom\n  'denied by the user': 'Transaction signing denied by the user' // ledger\n};\n\nconst getUserError = (error: string) => {\n  for (const [key, value] of Object.entries(errorsMap)) {\n    if (error.includes(key)) {\n      return value;\n    }\n  }\n  return SigningErrorsEnum.errorSigning;\n};\n\nexport function handleSignError(\n  error: unknown,\n  type: 'error' | 'warning' = 'error'\n) {\n  const originalError = (error as Error)?.message;\n  const errorMessage = getUserError(originalError);\n\n  const isKnownError = errorMessage !== SigningErrorsEnum.errorSigning;\n\n  const errorType = isKnownError ? 'warning' : type;\n\n  const state = Object.keys(states).includes(errorType)\n    ? states[errorType]\n    : states.error;\n\n  const { toastId, iconClassName, title } = state;\n\n  createCustomToast({\n    toastId,\n    duration: CANCEL_TRANSACTION_TOAST_DEFAULT_DURATION,\n    icon: ToastIconsEnum.times,\n    iconClassName,\n    message: errorMessage,\n    title\n  });\n\n  return errorMessage;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAIO;AACP,uCAA+B;AAC/B,qBAAkC;AAClC,mBAAuD;AAEvD,MAAM,SAAS;AAAA,EACb,OAAO;AAAA,IACL,OAAO,+BAAkB,aAAa,SAAS;AAAA,IAC/C,eAAe;AAAA,IACf,SAAS,GAAG,0CAAsB,IAAI,KAAK,IAAI,CAAC;AAAA,EAClD;AAAA,EACA,SAAS;AAAA,IACP,OAAO,iCAAoB,UAAU,SAAS;AAAA,IAC9C,eAAe;AAAA,IACf,SAAS,GAAG,+CAA2B,IAAI,KAAK,IAAI,CAAC;AAAA,EACvD;AACF;AAEA,MAAM,YAAY;AAAA,EAChB,mBAAmB;AAAA;AAAA,EACnB,wBAAwB;AAAA;AAAA,EACxB,qBAAqB;AAAA;AAAA,EACrB,sBAAsB;AAAA;AACxB;AAEA,MAAM,eAAe,CAAC,UAAkB;AACtC,aAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,SAAS,GAAG;AACpD,QAAI,MAAM,SAAS,GAAG,GAAG;AACvB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO,+BAAkB;AAC3B;AAEO,SAAS,gBACd,OACA,OAA4B,SAC5B;AACA,QAAM,gBAAiB,OAAiB;AACxC,QAAM,eAAe,aAAa,aAAa;AAE/C,QAAM,eAAe,iBAAiB,+BAAkB;AAExD,QAAM,YAAY,eAAe,YAAY;AAE7C,QAAM,QAAQ,OAAO,KAAK,MAAM,EAAE,SAAS,SAAS,IAChD,OAAO,SAAS,IAChB,OAAO;AAEX,QAAM,EAAE,SAAS,eAAe,MAAM,IAAI;AAE1C,wCAAkB;AAAA,IAChB;AAAA,IACA,UAAU;AAAA,IACV,MAAM,gDAAe;AAAA,IACrB;AAAA,IACA,SAAS;AAAA,IACT;AAAA,EACF,CAAC;AAED,SAAO;AACT;",
  "names": []
}
