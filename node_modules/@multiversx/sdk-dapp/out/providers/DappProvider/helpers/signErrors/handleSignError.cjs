"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var handleSignError_exports = {};
__export(handleSignError_exports, {
  handleSignError: () => handleSignError
});
module.exports = __toCommonJS(handleSignError_exports);
var import_transactions = require("../../../../constants/transactions.constants");
var import_getToastDataStateByStatus = require("../../../../managers/internal/ToastManager/helpers/getToastDataStateByStatus");
var import_actions = require("../../../../store/actions");
var import_enums = require("../../../../types/enums.types");
const states = {
  error: {
    title: import_enums.SigningErrorsEnum.errorSigning.toString(),
    iconClassName: "danger",
    toastId: `${import_transactions.ERROR_SIGNING_TOAST_ID}-${Date.now()}`
  },
  warning: {
    title: import_enums.SigningWarningsEnum.cancelled.toString(),
    iconClassName: "warning",
    toastId: `${import_transactions.CANCEL_TRANSACTION_TOAST_ID}-${Date.now()}`
  }
};
const errorsMap = {
  extensionResponse: "Unable to sign transactions",
  // extension
  "Transaction canceled": "Transaction canceled",
  // web wallet
  "cancelled by user": "Transaction signing cancelled by user",
  // custom
  "denied by the user": "Transaction signing denied by the user"
  // ledger
};
const getUserError = (error) => {
  for (const [key, value] of Object.entries(errorsMap)) {
    if (error.includes(key)) {
      return value;
    }
  }
  return import_enums.SigningErrorsEnum.errorSigning;
};
function handleSignError(error, type = "error") {
  const originalError = error?.message;
  const errorMessage = getUserError(originalError);
  const isKnownError = errorMessage !== import_enums.SigningErrorsEnum.errorSigning;
  const errorType = isKnownError ? "warning" : type;
  const state = Object.keys(states).includes(errorType) ? states[errorType] : states.error;
  const { toastId, iconClassName, title } = state;
  (0, import_actions.createCustomToast)({
    toastId,
    duration: import_transactions.CANCEL_TRANSACTION_TOAST_DEFAULT_DURATION,
    icon: import_getToastDataStateByStatus.ToastIconsEnum.times,
    iconClassName,
    message: errorMessage,
    title
  });
  return errorMessage;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  handleSignError
});
//# sourceMappingURL=handleSignError.cjs.map
