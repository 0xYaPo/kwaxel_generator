import { Message, Transaction } from '../../lib/sdkCore';
import { IProvider } from '../types/providerFactory.types';
import { VerifyMessageReturnType } from './helpers/signMessage/verifyMessage';
import { SignTransactionsOptionsType } from './helpers/signTransactions/signTransactionsWithProvider';
export declare class DappProvider {
    private provider;
    private _isLoggingOut;
    constructor(provider: IProvider);
    init(): Promise<boolean>;
    login(options?: {
        token?: string;
    }): Promise<{
        address: string;
        signature: string;
    } | {
        address: string;
    } | null>;
    isInitialized(): boolean;
    logout(options?: {
        shouldBroadcastLogoutAcrossTabs: boolean;
    }): Promise<boolean>;
    getType(): import("../types/providerFactory.types").ProviderType;
    /**
     * @returns The original provider instance.
     */
    getProvider(): IProvider<import("../types/providerFactory.types").ProviderType>;
    signTransactions(transactions: Transaction[], options?: SignTransactionsOptionsType): Promise<Transaction[]>;
    signMessage(message: Message, options?: {
        hasConsentPopup?: boolean;
    }): Promise<Message | null>;
    /**
     * @param signedMessage - The signed message to verify in form of a JSON string with `address`, `message` and `signature` properties.
     * @returns The verification result with `isVerified`, `message` and `address` properties.
     */
    verifyMessage(signedMessage: string): Promise<VerifyMessageReturnType>;
    cancelLogin(): void;
}
