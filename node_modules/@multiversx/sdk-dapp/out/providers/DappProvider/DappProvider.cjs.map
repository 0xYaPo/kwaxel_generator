{
  "version": 3,
  "sources": ["../../../src/providers/DappProvider/DappProvider.ts"],
  "sourcesContent": ["import { Message, Transaction } from 'lib/sdkCore';\nimport { LogoutManager } from 'managers/LogoutManager/LogoutManager';\nimport { setAccountProvider } from 'providers/helpers/accountProvider';\nimport { setProviderType } from 'store/actions/loginInfo/loginInfoActions';\nimport { IProvider } from '../types/providerFactory.types';\nimport { login } from './helpers/login/login';\nimport { logout } from './helpers/logout/logout';\nimport { handleSignError } from './helpers/signErrors/handleSignError';\nimport { signMessageWithProvider } from './helpers/signMessage/signMessageWithProvider';\nimport {\n  verifyMessage,\n  VerifyMessageReturnType\n} from './helpers/signMessage/verifyMessage';\nimport {\n  signTransactionsWithProvider,\n  SignTransactionsOptionsType\n} from './helpers/signTransactions/signTransactionsWithProvider';\n\nexport class DappProvider {\n  private provider: IProvider;\n  private _isLoggingOut = false;\n\n  constructor(provider: IProvider) {\n    this.provider = provider;\n  }\n\n  init(): Promise<boolean> {\n    return this.provider.init();\n  }\n\n  async login(options?: { token?: string }) {\n    const data = await login(this.provider, options);\n    setProviderType(this.provider.getType());\n    setAccountProvider(this);\n    LogoutManager.getInstance().init();\n    return data;\n  }\n\n  isInitialized(): boolean {\n    return this.provider.isInitialized();\n  }\n\n  async logout(\n    options = {\n      shouldBroadcastLogoutAcrossTabs: true\n    }\n  ): Promise<boolean> {\n    if (this._isLoggingOut) {\n      console.warn('Logout already in progress');\n      return false;\n    }\n\n    this._isLoggingOut = true;\n\n    const isLoggedOut = await logout({ provider: this.provider, options });\n\n    this._isLoggingOut = false;\n\n    return isLoggedOut;\n  }\n\n  getType() {\n    return this.provider.getType();\n  }\n\n  /**\n   * @returns The original provider instance.\n   */\n  getProvider() {\n    return this.provider;\n  }\n\n  async signTransactions(\n    transactions: Transaction[],\n    options?: SignTransactionsOptionsType\n  ): Promise<Transaction[]> {\n    try {\n      const signedTransactions = await signTransactionsWithProvider({\n        provider: this.provider,\n        transactions,\n        options\n      });\n      return signedTransactions;\n    } catch (error) {\n      const errorMessage = handleSignError(error);\n      throw new Error(errorMessage);\n    }\n  }\n\n  async signMessage(\n    message: Message,\n    options?: {\n      hasConsentPopup?: boolean;\n    }\n  ): Promise<Message | null> {\n    try {\n      const signedMessage = await signMessageWithProvider({\n        provider: this.provider,\n        message,\n        options\n      });\n      return signedMessage;\n    } catch (error) {\n      const errorMessage = handleSignError(error, 'warning');\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * @param signedMessage - The signed message to verify in form of a JSON string with `address`, `message` and `signature` properties.\n   * @returns The verification result with `isVerified`, `message` and `address` properties.\n   */\n  async verifyMessage(signedMessage: string): Promise<VerifyMessageReturnType> {\n    return await verifyMessage(signedMessage);\n  }\n\n  cancelLogin(): void {\n    this.provider.cancelLogin?.();\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,2BAA8B;AAC9B,6BAAmC;AACnC,8BAAgC;AAEhC,mBAAsB;AACtB,oBAAuB;AACvB,6BAAgC;AAChC,qCAAwC;AACxC,2BAGO;AACP,0CAGO;AAEA,MAAM,aAAa;AAAA,EAIxB,YAAY,UAAqB;AAFjC,SAAQ,gBAAgB;AAGtB,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,OAAyB;AACvB,WAAO,KAAK,SAAS,KAAK;AAAA,EAC5B;AAAA,EAEA,MAAM,MAAM,SAA8B;AACxC,UAAM,OAAO,UAAM,oBAAM,KAAK,UAAU,OAAO;AAC/C,iDAAgB,KAAK,SAAS,QAAQ,CAAC;AACvC,mDAAmB,IAAI;AACvB,uCAAc,YAAY,EAAE,KAAK;AACjC,WAAO;AAAA,EACT;AAAA,EAEA,gBAAyB;AACvB,WAAO,KAAK,SAAS,cAAc;AAAA,EACrC;AAAA,EAEA,MAAM,OACJ,UAAU;AAAA,IACR,iCAAiC;AAAA,EACnC,GACkB;AAClB,QAAI,KAAK,eAAe;AACtB,cAAQ,KAAK,4BAA4B;AACzC,aAAO;AAAA,IACT;AAEA,SAAK,gBAAgB;AAErB,UAAM,cAAc,UAAM,sBAAO,EAAE,UAAU,KAAK,UAAU,QAAQ,CAAC;AAErE,SAAK,gBAAgB;AAErB,WAAO;AAAA,EACT;AAAA,EAEA,UAAU;AACR,WAAO,KAAK,SAAS,QAAQ;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc;AACZ,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,MAAM,iBACJ,cACA,SACwB;AACxB,QAAI;AACF,YAAM,qBAAqB,UAAM,kEAA6B;AAAA,QAC5D,UAAU,KAAK;AAAA,QACf;AAAA,QACA;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT,SAAS,OAAO;AACd,YAAM,mBAAe,wCAAgB,KAAK;AAC1C,YAAM,IAAI,MAAM,YAAY;AAAA,IAC9B;AAAA,EACF;AAAA,EAEA,MAAM,YACJ,SACA,SAGyB;AACzB,QAAI;AACF,YAAM,gBAAgB,UAAM,wDAAwB;AAAA,QAClD,UAAU,KAAK;AAAA,QACf;AAAA,QACA;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT,SAAS,OAAO;AACd,YAAM,mBAAe,wCAAgB,OAAO,SAAS;AACrD,YAAM,IAAI,MAAM,YAAY;AAAA,IAC9B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,cAAc,eAAyD;AAC3E,WAAO,UAAM,oCAAc,aAAa;AAAA,EAC1C;AAAA,EAEA,cAAoB;AAClB,SAAK,SAAS,cAAc;AAAA,EAC9B;AACF;",
  "names": []
}
