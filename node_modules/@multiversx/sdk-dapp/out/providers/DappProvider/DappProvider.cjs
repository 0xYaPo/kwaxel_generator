"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var DappProvider_exports = {};
__export(DappProvider_exports, {
  DappProvider: () => DappProvider
});
module.exports = __toCommonJS(DappProvider_exports);
var import_LogoutManager = require("../../managers/LogoutManager/LogoutManager");
var import_accountProvider = require("../../providers/helpers/accountProvider");
var import_loginInfoActions = require("../../store/actions/loginInfo/loginInfoActions");
var import_login = require("./helpers/login/login");
var import_logout = require("./helpers/logout/logout");
var import_handleSignError = require("./helpers/signErrors/handleSignError");
var import_signMessageWithProvider = require("./helpers/signMessage/signMessageWithProvider");
var import_verifyMessage = require("./helpers/signMessage/verifyMessage");
var import_signTransactionsWithProvider = require("./helpers/signTransactions/signTransactionsWithProvider");
class DappProvider {
  constructor(provider) {
    this._isLoggingOut = false;
    this.provider = provider;
  }
  init() {
    return this.provider.init();
  }
  async login(options) {
    const data = await (0, import_login.login)(this.provider, options);
    (0, import_loginInfoActions.setProviderType)(this.provider.getType());
    (0, import_accountProvider.setAccountProvider)(this);
    import_LogoutManager.LogoutManager.getInstance().init();
    return data;
  }
  isInitialized() {
    return this.provider.isInitialized();
  }
  async logout(options = {
    shouldBroadcastLogoutAcrossTabs: true
  }) {
    if (this._isLoggingOut) {
      console.warn("Logout already in progress");
      return false;
    }
    this._isLoggingOut = true;
    const isLoggedOut = await (0, import_logout.logout)({ provider: this.provider, options });
    this._isLoggingOut = false;
    return isLoggedOut;
  }
  getType() {
    return this.provider.getType();
  }
  /**
   * @returns The original provider instance.
   */
  getProvider() {
    return this.provider;
  }
  async signTransactions(transactions, options) {
    try {
      const signedTransactions = await (0, import_signTransactionsWithProvider.signTransactionsWithProvider)({
        provider: this.provider,
        transactions,
        options
      });
      return signedTransactions;
    } catch (error) {
      const errorMessage = (0, import_handleSignError.handleSignError)(error);
      throw new Error(errorMessage);
    }
  }
  async signMessage(message, options) {
    try {
      const signedMessage = await (0, import_signMessageWithProvider.signMessageWithProvider)({
        provider: this.provider,
        message,
        options
      });
      return signedMessage;
    } catch (error) {
      const errorMessage = (0, import_handleSignError.handleSignError)(error, "warning");
      throw new Error(errorMessage);
    }
  }
  /**
   * @param signedMessage - The signed message to verify in form of a JSON string with `address`, `message` and `signature` properties.
   * @returns The verification result with `isVerified`, `message` and `address` properties.
   */
  async verifyMessage(signedMessage) {
    return await (0, import_verifyMessage.verifyMessage)(signedMessage);
  }
  cancelLogin() {
    this.provider.cancelLogin?.();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DappProvider
});
//# sourceMappingURL=DappProvider.cjs.map
