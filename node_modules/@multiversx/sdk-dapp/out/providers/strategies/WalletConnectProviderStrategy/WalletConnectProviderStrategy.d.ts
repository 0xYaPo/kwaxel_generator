import { Message, Transaction } from '../../../lib/sdkCore';
import { IDAppProviderAccount } from '../../../lib/sdkDappUtils';
import { ProviderType } from '../../../providers/types/providerFactory.types';
import { WalletConnectConfig } from './types';
import { BaseProviderStrategy } from '../BaseProviderStrategy/BaseProviderStrategy';
type WalletConnectProviderStrategyConfigType = WalletConnectConfig & {
    anchor?: HTMLElement;
};
export declare class WalletConnectProviderStrategy extends BaseProviderStrategy {
    private provider;
    private readonly config;
    private methods;
    private _approval;
    protected cancelActionAbortController: AbortController | null;
    constructor(config: WalletConnectProviderStrategyConfigType);
    init(): Promise<boolean>;
    logout(): Promise<boolean>;
    getType(): ProviderType;
    getAddress(): Promise<string | undefined>;
    setAccount(account: IDAppProviderAccount): void;
    isInitialized(): boolean;
    private initializeProvider;
    private initWalletConnectManager;
    private createWalletConnectProvider;
    login(options?: {
        token?: string;
    }): Promise<{
        address: string;
        signature: string;
    }>;
    signTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;
    cancelAction: () => Promise<void>;
    signMessage: (message: Message) => Promise<Message>;
    private sendCustomRequest;
}
export {};
