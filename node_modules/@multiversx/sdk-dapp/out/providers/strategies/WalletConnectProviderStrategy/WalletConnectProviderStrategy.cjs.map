{
  "version": 3,
  "sources": ["../../../../src/providers/strategies/WalletConnectProviderStrategy/WalletConnectProviderStrategy.ts"],
  "sourcesContent": ["import {\n  SessionEventTypes,\n  SessionTypes,\n  OptionalOperation\n} from '@multiversx/sdk-wallet-connect-provider/out';\nimport { providerLabels } from 'constants/providerFactory.constants';\nimport { fallbackWalletConnectConfigurations } from 'constants/walletConnect.constants';\nimport { Message, Transaction } from 'lib/sdkCore';\nimport { IDAppProviderAccount } from 'lib/sdkDappUtils';\nimport { WalletConnectStateManager } from 'managers/internal/WalletConnectStateManager/WalletConnectStateManager';\nimport { getIsLoggedIn } from 'methods/account/getIsLoggedIn';\nimport {\n  ProviderTypeEnum,\n  ProviderType\n} from 'providers/types/providerFactory.types';\nimport { logoutAction } from 'store/actions';\nimport { chainIdSelector, nativeAuthConfigSelector } from 'store/selectors';\nimport { getState } from 'store/store';\nimport { ProviderErrorsEnum } from 'types/provider.types';\nimport {\n  WalletConnectOptionalMethodsEnum,\n  WalletConnectV2Provider\n} from 'utils/walletconnect/__sdkWalletconnectProvider';\nimport { WalletConnectV2Error, WalletConnectConfig } from './types';\nimport { BaseProviderStrategy } from '../BaseProviderStrategy/BaseProviderStrategy';\nimport { signMessage } from '../helpers/signMessage/signMessage';\n\nconst dappMethods: string[] = [\n  WalletConnectOptionalMethodsEnum.CANCEL_ACTION,\n  WalletConnectOptionalMethodsEnum.SIGN_LOGIN_TOKEN\n];\n\ntype WalletConnectProviderStrategyConfigType = WalletConnectConfig & {\n  anchor?: HTMLElement;\n};\n\nexport class WalletConnectProviderStrategy extends BaseProviderStrategy {\n  private provider: WalletConnectV2Provider | null = null;\n  private readonly config: WalletConnectProviderStrategyConfigType;\n  private methods: string[] = [];\n  private _approval: (() => Promise<SessionTypes.Struct>) | null = null;\n  protected cancelActionAbortController: AbortController | null = null;\n\n  constructor(config: WalletConnectProviderStrategyConfigType) {\n    super();\n    this.config = config;\n  }\n\n  async init(): Promise<boolean> {\n    try {\n      await this.initializeProvider();\n    } catch {\n      return false;\n    }\n\n    return true;\n  }\n\n  logout(): Promise<boolean> {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    return this.provider.logout();\n  }\n\n  getType(): ProviderType {\n    return ProviderTypeEnum.walletConnect;\n  }\n\n  getAddress(): Promise<string | undefined> {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    return Promise.resolve(this.provider.getAddress());\n  }\n\n  setAccount(account: IDAppProviderAccount): void {\n    return this.provider?.setAccount(account);\n  }\n\n  isInitialized(): boolean {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    return this.provider.isInitialized();\n  }\n\n  private async initializeProvider() {\n    await this.initWalletConnectManager();\n\n    if (!this.config) {\n      throw new Error(WalletConnectV2Error.invalidConfig);\n    }\n\n    const { walletConnectProvider, dappMethods: dAppMethods } =\n      await this.createWalletConnectProvider(this.config);\n\n    this.provider = walletConnectProvider;\n    this.methods = dAppMethods;\n\n    const { uri = '', approval } = await this.provider.connect({\n      methods: this.methods\n    });\n\n    const walletConnectDeepLink =\n      this.config.walletConnectDeepLink ??\n      fallbackWalletConnectConfigurations.walletConnectDeepLink;\n\n    this._approval = approval;\n    const walletConnectManager = WalletConnectStateManager.getInstance();\n    walletConnectManager.updateData({\n      wcURI: uri,\n      walletConnectDeepLink: `${walletConnectDeepLink}?wallet-connect=${encodeURIComponent(uri)}`\n    });\n  }\n\n  private async initWalletConnectManager() {\n    const shouldInitiateLogin = !getIsLoggedIn();\n\n    if (!shouldInitiateLogin) {\n      return;\n    }\n\n    const walletConnectManager = WalletConnectStateManager.getInstance();\n    await walletConnectManager.init(this.config?.anchor);\n  }\n\n  private async createWalletConnectProvider(config: WalletConnectConfig) {\n    const isLoggedIn = getIsLoggedIn();\n    const chainId = chainIdSelector(getState());\n    const nativeAuthConfig = nativeAuthConfigSelector(getState());\n\n    if (nativeAuthConfig) {\n      dappMethods.push(WalletConnectOptionalMethodsEnum.SIGN_NATIVE_AUTH_TOKEN);\n    }\n\n    if (!config?.walletConnectV2ProjectId) {\n      throw new Error(WalletConnectV2Error.invalidConfig);\n    }\n\n    const handleOnLogin = () => {};\n\n    const handleOnLogout = () => {\n      logoutAction();\n    };\n\n    const handleOnEvent = (_event: SessionEventTypes['event']) => {};\n\n    const providerHandlers = {\n      onClientLogin: handleOnLogin,\n      onClientLogout: handleOnLogout,\n      onClientEvent: handleOnEvent\n    };\n\n    try {\n      const {\n        walletConnectV2ProjectId,\n        walletConnectV2Options = {},\n        walletConnectV2RelayAddress = ''\n      } = config;\n      const walletConnectProvider = new WalletConnectV2Provider(\n        providerHandlers,\n        chainId,\n        walletConnectV2RelayAddress,\n        walletConnectV2ProjectId,\n        walletConnectV2Options\n      );\n\n      await walletConnectProvider.init();\n\n      return { walletConnectProvider, dappMethods };\n    } catch (err) {\n      console.error(WalletConnectV2Error.connectError, err);\n\n      if (isLoggedIn) {\n        await this.logout();\n      }\n\n      throw err;\n    }\n  }\n\n  async login(options?: { token?: string }): Promise<{\n    address: string;\n    signature: string;\n  }> {\n    if (!this.provider) {\n      throw new Error(\n        'Provider is not initialized. Call createProvider first.'\n      );\n    }\n\n    const reconnect = async (): Promise<{\n      address: string;\n      signature: string;\n    }> => {\n      if (!this.provider) {\n        throw new Error(ProviderErrorsEnum.notInitialized);\n      }\n\n      try {\n        await this.provider.init();\n        const walletConnectManager = WalletConnectStateManager.getInstance();\n\n        const { uri = '', approval: wcApproval } = await this.provider.connect({\n          methods: this.methods\n        });\n\n        const walletConnectDeepLink =\n          this.config.walletConnectDeepLink ??\n          fallbackWalletConnectConfigurations.walletConnectDeepLink;\n\n        walletConnectManager.updateData({\n          wcURI: uri,\n          walletConnectDeepLink: `${walletConnectDeepLink}?wallet-connect=${encodeURIComponent(uri)}`\n        });\n\n        const providerInfo = await this.provider.login({\n          approval: wcApproval,\n          token: options?.token\n        });\n\n        const { address = '', signature = '' } = providerInfo ?? {};\n\n        walletConnectManager.handleClose({ isLoginFinished: Boolean(address) });\n        return { address, signature };\n      } catch {\n        return await reconnect();\n      }\n    };\n\n    if (!this._approval) {\n      throw new Error('Approval or login is not initialized');\n    }\n\n    try {\n      const providerData = await this.provider.login({\n        approval: this._approval.bind(this),\n        token: options?.token\n      });\n\n      const { address = '', signature = '' } = providerData ?? {};\n\n      const walletConnectManager = WalletConnectStateManager.getInstance();\n      walletConnectManager.handleClose({ isLoginFinished: Boolean(address) });\n      return { address, signature };\n    } catch (error) {\n      console.error(WalletConnectV2Error.userRejected, error);\n      return await reconnect();\n    }\n  }\n\n  signTransactions = async (transactions: Transaction[]) => {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    const { manager, onClose } = await this.initSignState();\n\n    this.cancelActionAbortController = new AbortController();\n    const signal = this.cancelActionAbortController.signal;\n\n    try {\n      const abortPromise = new Promise<never>((_, reject) => {\n        signal.addEventListener('abort', () => {\n          reject(new Error('cancelled by user'));\n        });\n      });\n\n      const signedTransactions: Transaction[] = await Promise.race([\n        this.provider.signTransactions(transactions),\n        abortPromise\n      ]);\n\n      return signedTransactions;\n    } catch (error) {\n      await onClose({ shouldCancelAction: true });\n      throw error;\n    } finally {\n      manager.closeUI();\n    }\n  };\n\n  cancelAction = async () => {\n    this.sendCustomRequest({\n      method: WalletConnectOptionalMethodsEnum.CANCEL_ACTION,\n      action: OptionalOperation.CANCEL_ACTION\n    });\n\n    this.cancelActionAbortController?.abort();\n  };\n\n  signMessage = async (message: Message) => {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    this.cancelActionAbortController = new AbortController();\n    const signal = this.cancelActionAbortController.signal;\n\n    const abortPromise = new Promise<never>((_, reject) => {\n      signal.addEventListener('abort', () => {\n        reject(new Error('cancelled by user'));\n      });\n    });\n\n    const signedMessage = await Promise.race([\n      signMessage({\n        message,\n        handleSignMessage: this.provider.signMessage.bind(this.provider),\n        cancelAction: this.cancelAction,\n        providerType: providerLabels.extension\n      }),\n      abortPromise\n    ]);\n\n    return signedMessage;\n  };\n\n  private async sendCustomRequest({\n    action,\n    method\n  }: {\n    action: OptionalOperation;\n    method: WalletConnectOptionalMethodsEnum;\n  }) {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    try {\n      await this.provider.sendCustomRequest?.({\n        request: {\n          method,\n          params: { action }\n        }\n      });\n    } catch (error) {\n      console.error(WalletConnectV2Error.actionError, error);\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_providerFactory"]
}
