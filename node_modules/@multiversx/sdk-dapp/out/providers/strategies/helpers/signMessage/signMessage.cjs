"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var signMessage_exports = {};
__export(signMessage_exports, {
  signMessage: () => signMessage
});
module.exports = __toCommonJS(signMessage_exports);
var import_providerFactory = require("../../../../constants/providerFactory.constants");
var import_pendingTransactions = require("../../../../managers/internal/PendingTransactionsStateManager/types/pendingTransactions.types");
var import_ProviderFactory = require("../../../../providers/ProviderFactory");
var import_providerFactory2 = require("../../../../providers/types/providerFactory.types");
var import_enums = require("../../../../types/enums.types");
var import_getPendingTransactionsHandlers = require("../getPendingTransactionsHandlers");
const isProviderType = (allProviders, type) => allProviders.some((provider) => provider.type === type);
async function signMessage({
  message,
  handleSignMessage,
  cancelAction,
  providerType
}) {
  const signedMsg = await new Promise(
    async (resolve, reject) => {
      const { manager, onClose } = await (0, import_getPendingTransactionsHandlers.getPendingTransactionsHandlers)({
        cancelAction
      });
      const allProviders = Object.values(import_ProviderFactory.ProviderFactory.customProviders);
      const allCustomProviderLabels = allProviders.reduce(
        (acc, provider) => {
          acc[provider.type] = provider.name;
          return acc;
        },
        {}
      );
      const allProviderLabels = {
        ...import_providerFactory.providerLabels,
        ...allCustomProviderLabels
      };
      const handleClose = async () => {
        await onClose({ shouldCancelAction: true });
        reject({ message: import_enums.SigningWarningsEnum.cancelled });
      };
      manager.subscribeToEventBus(
        import_pendingTransactions.PendingTransactionsEventsEnum.CLOSE,
        handleClose
      );
      const providerKey = isProviderType(allProviders, providerType) ? providerType : import_providerFactory2.ProviderTypeEnum.none;
      manager.updateData({
        name: allProviderLabels[providerKey],
        type: providerKey
      });
      try {
        const signedMessage = await handleSignMessage(message);
        resolve(signedMessage);
      } catch (err) {
        await onClose({ shouldCancelAction: true });
        reject(err);
      } finally {
        manager.closeUI();
      }
    }
  );
  return signedMsg;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  signMessage
});
//# sourceMappingURL=signMessage.cjs.map
