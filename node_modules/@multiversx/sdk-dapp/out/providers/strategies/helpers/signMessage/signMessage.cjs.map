{
  "version": 3,
  "sources": ["../../../../../src/providers/strategies/helpers/signMessage/signMessage.ts"],
  "sourcesContent": ["import { providerLabels } from 'constants/providerFactory.constants';\nimport { Message } from 'lib/sdkCore';\nimport { PendingTransactionsEventsEnum } from 'managers/internal/PendingTransactionsStateManager/types/pendingTransactions.types';\nimport { ProviderFactory } from 'providers/ProviderFactory';\nimport {\n  ProviderType,\n  ProviderTypeEnum,\n  ICustomProvider\n} from 'providers/types/providerFactory.types';\nimport { SigningWarningsEnum } from 'types/enums.types';\nimport { getPendingTransactionsHandlers } from '../getPendingTransactionsHandlers';\n\ntype SignMessageWithModalPropsType<T> = {\n  message: Message;\n  handleSignMessage: (message: Message) => Promise<Message>;\n  cancelAction?: () => Promise<T> | undefined;\n  providerType: string;\n};\n\nconst isProviderType = (\n  allProviders: ICustomProvider[],\n  type: string\n): type is ProviderType =>\n  allProviders.some((provider) => provider.type === type);\n\nexport async function signMessage<T>({\n  message,\n  handleSignMessage,\n  cancelAction,\n  providerType\n}: SignMessageWithModalPropsType<T>): Promise<Message> {\n  const signedMsg = await new Promise<Awaited<Message>>(\n    async (resolve, reject) => {\n      const { manager, onClose } = await getPendingTransactionsHandlers({\n        cancelAction\n      });\n\n      const allProviders = Object.values(ProviderFactory.customProviders);\n      const allCustomProviderLabels = allProviders.reduce(\n        (acc, provider) => {\n          acc[provider.type] = provider.name;\n          return acc;\n        },\n        {} as Record<ProviderType, string>\n      );\n\n      const allProviderLabels = {\n        ...providerLabels,\n        ...allCustomProviderLabels\n      };\n\n      const handleClose = async () => {\n        await onClose({ shouldCancelAction: true });\n        reject({ message: SigningWarningsEnum.cancelled });\n      };\n\n      manager.subscribeToEventBus(\n        PendingTransactionsEventsEnum.CLOSE,\n        handleClose\n      );\n\n      const providerKey = isProviderType(allProviders, providerType)\n        ? providerType\n        : ProviderTypeEnum.none;\n\n      manager.updateData({\n        name: allProviderLabels[providerKey],\n        type: providerKey\n      });\n\n      try {\n        const signedMessage = await handleSignMessage(message);\n        resolve(signedMessage);\n      } catch (err) {\n        await onClose({ shouldCancelAction: true });\n        reject(err);\n      } finally {\n        manager.closeUI();\n      }\n    }\n  );\n  return signedMsg;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA+B;AAE/B,iCAA8C;AAC9C,6BAAgC;AAChC,IAAAA,0BAIO;AACP,mBAAoC;AACpC,4CAA+C;AAS/C,MAAM,iBAAiB,CACrB,cACA,SAEA,aAAa,KAAK,CAAC,aAAa,SAAS,SAAS,IAAI;AAExD,eAAsB,YAAe;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAuD;AACrD,QAAM,YAAY,MAAM,IAAI;AAAA,IAC1B,OAAO,SAAS,WAAW;AACzB,YAAM,EAAE,SAAS,QAAQ,IAAI,UAAM,sEAA+B;AAAA,QAChE;AAAA,MACF,CAAC;AAED,YAAM,eAAe,OAAO,OAAO,uCAAgB,eAAe;AAClE,YAAM,0BAA0B,aAAa;AAAA,QAC3C,CAAC,KAAK,aAAa;AACjB,cAAI,SAAS,IAAI,IAAI,SAAS;AAC9B,iBAAO;AAAA,QACT;AAAA,QACA,CAAC;AAAA,MACH;AAEA,YAAM,oBAAoB;AAAA,QACxB,GAAG;AAAA,QACH,GAAG;AAAA,MACL;AAEA,YAAM,cAAc,YAAY;AAC9B,cAAM,QAAQ,EAAE,oBAAoB,KAAK,CAAC;AAC1C,eAAO,EAAE,SAAS,iCAAoB,UAAU,CAAC;AAAA,MACnD;AAEA,cAAQ;AAAA,QACN,yDAA8B;AAAA,QAC9B;AAAA,MACF;AAEA,YAAM,cAAc,eAAe,cAAc,YAAY,IACzD,eACA,yCAAiB;AAErB,cAAQ,WAAW;AAAA,QACjB,MAAM,kBAAkB,WAAW;AAAA,QACnC,MAAM;AAAA,MACR,CAAC;AAED,UAAI;AACF,cAAM,gBAAgB,MAAM,kBAAkB,OAAO;AACrD,gBAAQ,aAAa;AAAA,MACvB,SAAS,KAAK;AACZ,cAAM,QAAQ,EAAE,oBAAoB,KAAK,CAAC;AAC1C,eAAO,GAAG;AAAA,MACZ,UAAE;AACA,gBAAQ,QAAQ;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;",
  "names": ["import_providerFactory"]
}
