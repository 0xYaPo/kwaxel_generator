"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getCommonData_exports = {};
__export(getCommonData_exports, {
  getCommonData: () => getCommonData
});
module.exports = __toCommonJS(getCommonData_exports);
var import_bignumber = require("bignumber.js");
var import_apiCalls = require("../../../../../../apiCalls");
var import_getPersistedTokenDetails = require("../../../../../../apiCalls/tokens/getPersistedTokenDetails");
var import_mvx = require("../../../../../../constants/mvx.constants");
var import_window = require("../../../../../../constants/window.constants");
var import_sdkDappUtils = require("../../../../../../lib/sdkDappUtils");
var import_getExplorerAddress = require("../../../../../../methods/network/getExplorerAddress");
var import_accountProvider = require("../../../../../../providers/helpers/accountProvider");
var import_tokens = require("../../../../../../types/tokens.types");
var import_base64Utils = require("../../../../../../utils/decoders/base64Utils");
var import_capitalize = require("../../../../../../utils/operations/capitalize");
var import_getUsdValue = require("../../../../../../utils/operations/getUsdValue");
var import_getExplorerLink = require("../../../../../../utils/transactions/getExplorerLink");
var import_getFeeData = require("../getFeeData");
var import_decodeDataField = require("./helpers/decodeDataField");
var import_getExtractTransactionsInfo = require("./helpers/getExtractTransactionsInfo");
var import_getHighlight = require("./helpers/getHighlight");
var import_getPpuOptions = require("./helpers/getPpuOptions");
var import_getRecommendedGasPrice = require("./helpers/getRecommendedGasPrice");
var import_getScCall = require("./helpers/getScCall");
var import_getTokenType = require("./helpers/getTokenType");
async function getCommonData({
  allTransactions,
  currentScreenIndex,
  egldLabel,
  network,
  gasPriceData,
  price,
  address,
  username,
  shard,
  signedIndexes,
  parsedTransactionsByDataField
}) {
  const currentTransaction = allTransactions[currentScreenIndex];
  const sender = currentTransaction?.transaction?.sender.toString();
  const transaction = currentTransaction?.transaction;
  let tokenTransaction = null;
  let fungibleTransaction = null;
  const extractTransactionsInfo = (0, import_getExtractTransactionsInfo.getExtractTransactionsInfo)({
    egldLabel,
    sender,
    apiAddress: network.apiAddress,
    address,
    parsedTransactionsByDataField
  });
  const plainTransaction = currentTransaction.transaction.toPlainObject();
  const txInfo = await extractTransactionsInfo(currentTransaction);
  const isEgld = !txInfo?.transactionTokenInfo?.tokenId;
  const { tokenId, nonce, amount = "" } = txInfo?.transactionTokenInfo ?? {};
  const isNftOrSft = tokenId && nonce && nonce.length > 0;
  const tokenIdForTokenDetails = isNftOrSft ? `${tokenId}-${nonce}` : tokenId;
  const tokenDetails = await (0, import_getPersistedTokenDetails.getPersistedTokenDetails)({
    tokenId: tokenIdForTokenDetails
  });
  const { esdtPrice, tokenDecimals, type, identifier, tokenImageUrl } = tokenDetails;
  const isNft = type === import_tokens.NftEnumType.SemiFungibleESDT || type === import_tokens.NftEnumType.NonFungibleESDT;
  if (isNft) {
    fungibleTransaction = {
      type,
      identifier,
      amount,
      imageURL: tokenImageUrl
    };
  } else {
    const getFormattedAmount = ({ addCommas }) => (0, import_sdkDappUtils.formatAmount)({
      input: isEgld ? currentTransaction.transaction.value.toString() : amount,
      decimals: isEgld ? Number(network.decimals) : tokenDecimals,
      digits: Number(network.digits),
      showLastNonZeroDecimal: false,
      addCommas
    });
    const formattedAmount = getFormattedAmount({ addCommas: true });
    const rawAmount = getFormattedAmount({ addCommas: false });
    const tokenPrice = Number(isEgld ? price : esdtPrice);
    const usdValue = (0, import_getUsdValue.getUsdValue)({
      amount: rawAmount,
      usd: tokenPrice,
      addEqualSign: true
    });
    const esdtIdentifier = identifier === import_mvx.MULTI_TRANSFER_EGLD_TOKEN ? egldLabel : identifier;
    tokenTransaction = {
      identifier: esdtIdentifier ?? egldLabel,
      amount: formattedAmount,
      usdValue
    };
  }
  const { feeLimitFormatted, feeInFiatLimit } = (0, import_getFeeData.getFeeData)({
    transaction,
    price
  });
  const ppuOptions = (0, import_getPpuOptions.getPpuOptions)({
    shard,
    initialGasPrice: gasPriceData.initialGasPrice,
    transaction: plainTransaction,
    gasStationMetadata: network.gasStationMetadata
  });
  const gasPrice = (0, import_getRecommendedGasPrice.getRecommendedGasPrice)({
    transaction: plainTransaction,
    gasPriceData
  });
  const provider = (0, import_accountProvider.getAccountProvider)();
  const providerType = provider.getType();
  const providerName = (0, import_capitalize.capitalize)(providerType);
  const transactionsCount = allTransactions.length;
  const currentIndexToSign = signedIndexes.length > 0 ? signedIndexes[signedIndexes.length - 1] + 1 : 0;
  const data = (0, import_base64Utils.decodeBase64)(
    currentTransaction.transaction.data.toString() ?? ""
  );
  const highlight = (0, import_getHighlight.getHighlight)(txInfo?.transactionTokenInfo);
  const decodedData = (0, import_decodeDataField.getAllDecodedFormats)({ data, identifier, highlight });
  const explorerAddress = (0, import_getExplorerAddress.getExplorerAddress)();
  const explorerLink = (0, import_getExplorerLink.getExplorerLink)({
    to: `/${import_apiCalls.ACCOUNTS_ENDPOINT}/${address}`,
    explorerAddress
  });
  const needsSigning = transactionsCount === 1 || txInfo?.needsSigning && !signedIndexes.includes(currentScreenIndex);
  const formattedGasPrice = (0, import_sdkDappUtils.formatAmount)({
    input: gasPrice.toString(),
    decimals: import_sdkDappUtils.DECIMALS,
    addCommas: true,
    digits: import_sdkDappUtils.DIGITS
  });
  const formattedGasLimit = new import_bignumber.BigNumber(plainTransaction.gasLimit).toFormat({
    decimalSeparator: ",",
    groupSeparator: ".",
    groupSize: 3
  });
  const commonData = {
    receiver: plainTransaction.receiver.toString(),
    data: (0, import_base64Utils.decodeBase64)(currentTransaction.transaction.data.toString() ?? ""),
    decodedData,
    gasPrice: formattedGasPrice,
    gasLimit: formattedGasLimit,
    explorerLink,
    ppu: gasPriceData.ppu,
    ppuOptions,
    egldLabel,
    tokenType: (0, import_getTokenType.getTokenType)(type),
    feeLimit: feeLimitFormatted,
    feeInFiatLimit,
    transactionsCount,
    currentIndex: currentScreenIndex,
    currentIndexToSign,
    highlight,
    scCall: (0, import_getScCall.getScCall)(txInfo?.transactionTokenInfo),
    needsSigning,
    isEditable: txInfo?.needsSigning,
    providerName,
    address,
    username,
    origin: import_window.safeWindow.location?.origin
  };
  return { commonData, tokenTransaction, fungibleTransaction };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getCommonData
});
//# sourceMappingURL=getCommonData.cjs.map
