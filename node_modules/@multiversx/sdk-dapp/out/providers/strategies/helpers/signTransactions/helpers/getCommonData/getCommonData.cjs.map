{
  "version": 3,
  "sources": ["../../../../../../../src/providers/strategies/helpers/signTransactions/helpers/getCommonData/getCommonData.ts"],
  "sourcesContent": ["import { BigNumber } from 'bignumber.js';\nimport { ACCOUNTS_ENDPOINT } from 'apiCalls';\nimport { getPersistedTokenDetails } from 'apiCalls/tokens/getPersistedTokenDetails';\nimport { MULTI_TRANSFER_EGLD_TOKEN } from 'constants/mvx.constants';\nimport { safeWindow } from 'constants/window.constants';\nimport { DECIMALS, DIGITS, formatAmount } from 'lib/sdkDappUtils';\nimport {\n  FungibleTransactionType,\n  ISignTransactionsPanelCommonData\n} from 'managers/internal/SignTransactionsStateManager/types';\nimport { getExplorerAddress } from 'methods/network/getExplorerAddress';\nimport { getAccountProvider } from 'providers/helpers/accountProvider';\nimport { NetworkType } from 'types/network.types';\nimport { NftEnumType } from 'types/tokens.types';\nimport {\n  MultiSignTransactionType,\n  TransactionDataTokenType\n} from 'types/transactions.types';\nimport { decodeBase64 } from 'utils/decoders/base64Utils';\nimport { capitalize } from 'utils/operations/capitalize';\nimport { getUsdValue } from 'utils/operations/getUsdValue';\nimport { getExplorerLink } from 'utils/transactions/getExplorerLink';\nimport { getFeeData } from '../getFeeData';\nimport { getAllDecodedFormats } from './helpers/decodeDataField';\nimport { getExtractTransactionsInfo } from './helpers/getExtractTransactionsInfo';\nimport { getHighlight } from './helpers/getHighlight';\nimport { getPpuOptions } from './helpers/getPpuOptions';\nimport { getRecommendedGasPrice } from './helpers/getRecommendedGasPrice';\nimport { getScCall } from './helpers/getScCall';\nimport { getTokenType } from './helpers/getTokenType';\n\nexport type GetCommonDataPropsType = {\n  allTransactions: MultiSignTransactionType[];\n  currentScreenIndex: number;\n  price?: number;\n  network: NetworkType;\n  signedIndexes: number[];\n  egldLabel: string;\n  address: string;\n  shard?: number;\n  username?: string;\n  parsedTransactionsByDataField: Record<string, TransactionDataTokenType>;\n  gasPriceData: {\n    initialGasPrice: number;\n    ppu: ISignTransactionsPanelCommonData['ppu'];\n  };\n};\n\nexport async function getCommonData({\n  allTransactions,\n  currentScreenIndex,\n  egldLabel,\n  network,\n  gasPriceData,\n  price,\n  address,\n  username,\n  shard,\n  signedIndexes,\n  parsedTransactionsByDataField\n}: GetCommonDataPropsType) {\n  const currentTransaction = allTransactions[currentScreenIndex];\n  const sender = currentTransaction?.transaction?.sender.toString();\n  const transaction = currentTransaction?.transaction;\n\n  let tokenTransaction: {\n    identifier?: string;\n    amount: string;\n    usdValue: string;\n  } | null = null;\n\n  let fungibleTransaction:\n    | (FungibleTransactionType & {\n        type: NftEnumType.NonFungibleESDT | NftEnumType.SemiFungibleESDT;\n      })\n    | null = null;\n\n  const extractTransactionsInfo = getExtractTransactionsInfo({\n    egldLabel,\n    sender,\n    apiAddress: network.apiAddress,\n    address,\n    parsedTransactionsByDataField\n  });\n\n  const plainTransaction = currentTransaction.transaction.toPlainObject();\n  const txInfo = await extractTransactionsInfo(currentTransaction);\n\n  const isEgld = !txInfo?.transactionTokenInfo?.tokenId;\n  const { tokenId, nonce, amount = '' } = txInfo?.transactionTokenInfo ?? {};\n\n  const isNftOrSft = tokenId && nonce && nonce.length > 0;\n  const tokenIdForTokenDetails = isNftOrSft ? `${tokenId}-${nonce}` : tokenId;\n\n  const tokenDetails = await getPersistedTokenDetails({\n    tokenId: tokenIdForTokenDetails\n  });\n\n  const { esdtPrice, tokenDecimals, type, identifier, tokenImageUrl } =\n    tokenDetails;\n\n  const isNft =\n    type === NftEnumType.SemiFungibleESDT ||\n    type === NftEnumType.NonFungibleESDT;\n\n  if (isNft) {\n    fungibleTransaction = {\n      type,\n      identifier,\n      amount,\n      imageURL: tokenImageUrl\n    };\n  } else {\n    const getFormattedAmount = ({ addCommas }: { addCommas: boolean }) =>\n      formatAmount({\n        input: isEgld\n          ? currentTransaction.transaction.value.toString()\n          : amount,\n        decimals: isEgld ? Number(network.decimals) : tokenDecimals,\n        digits: Number(network.digits),\n        showLastNonZeroDecimal: false,\n        addCommas\n      });\n\n    const formattedAmount = getFormattedAmount({ addCommas: true });\n    const rawAmount = getFormattedAmount({ addCommas: false });\n    const tokenPrice = Number(isEgld ? price : esdtPrice);\n    const usdValue = getUsdValue({\n      amount: rawAmount,\n      usd: tokenPrice,\n      addEqualSign: true\n    });\n\n    const esdtIdentifier =\n      identifier === MULTI_TRANSFER_EGLD_TOKEN ? egldLabel : identifier;\n    tokenTransaction = {\n      identifier: esdtIdentifier ?? egldLabel,\n      amount: formattedAmount,\n      usdValue\n    };\n  }\n\n  const { feeLimitFormatted, feeInFiatLimit } = getFeeData({\n    transaction,\n    price\n  });\n\n  const ppuOptions = getPpuOptions({\n    shard,\n    initialGasPrice: gasPriceData.initialGasPrice,\n    transaction: plainTransaction,\n    gasStationMetadata: network.gasStationMetadata\n  });\n\n  const gasPrice = getRecommendedGasPrice({\n    transaction: plainTransaction,\n    gasPriceData\n  });\n\n  const provider = getAccountProvider();\n  const providerType = provider.getType();\n  const providerName = capitalize(providerType as string);\n  const transactionsCount = allTransactions.length;\n\n  const currentIndexToSign =\n    signedIndexes.length > 0 ? signedIndexes[signedIndexes.length - 1] + 1 : 0;\n\n  const data = decodeBase64(\n    currentTransaction.transaction.data.toString() ?? ''\n  );\n\n  const highlight = getHighlight(txInfo?.transactionTokenInfo);\n  const decodedData = getAllDecodedFormats({ data, identifier, highlight });\n  const explorerAddress = getExplorerAddress();\n  const explorerLink = getExplorerLink({\n    to: `/${ACCOUNTS_ENDPOINT}/${address}`,\n    explorerAddress\n  });\n\n  const needsSigning =\n    transactionsCount === 1 ||\n    (txInfo?.needsSigning && !signedIndexes.includes(currentScreenIndex));\n\n  const formattedGasPrice = formatAmount({\n    input: gasPrice.toString(),\n    decimals: DECIMALS,\n    addCommas: true,\n    digits: DIGITS\n  });\n\n  const formattedGasLimit = new BigNumber(plainTransaction.gasLimit).toFormat({\n    decimalSeparator: ',',\n    groupSeparator: '.',\n    groupSize: 3\n  });\n\n  const commonData: ISignTransactionsPanelCommonData = {\n    receiver: plainTransaction.receiver.toString(),\n    data: decodeBase64(currentTransaction.transaction.data.toString() ?? ''),\n    decodedData,\n    gasPrice: formattedGasPrice,\n    gasLimit: formattedGasLimit,\n    explorerLink,\n    ppu: gasPriceData.ppu,\n    ppuOptions,\n    egldLabel,\n    tokenType: getTokenType(type),\n    feeLimit: feeLimitFormatted,\n    feeInFiatLimit,\n    transactionsCount,\n    currentIndex: currentScreenIndex,\n    currentIndexToSign,\n    highlight,\n    scCall: getScCall(txInfo?.transactionTokenInfo),\n    needsSigning,\n    isEditable: txInfo?.needsSigning,\n    providerName,\n    address,\n    username,\n    origin: safeWindow.location?.origin\n  };\n\n  return { commonData, tokenTransaction, fungibleTransaction };\n}\n"],
  "mappings": "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",
  "names": []
}
