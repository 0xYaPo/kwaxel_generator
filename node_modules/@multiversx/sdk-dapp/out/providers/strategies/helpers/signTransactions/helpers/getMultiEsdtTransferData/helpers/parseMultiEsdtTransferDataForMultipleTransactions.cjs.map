{
  "version": 3,
  "sources": ["../../../../../../../../src/providers/strategies/helpers/signTransactions/helpers/getMultiEsdtTransferData/helpers/parseMultiEsdtTransferDataForMultipleTransactions.ts"],
  "sourcesContent": ["import type { Transaction } from '@multiversx/sdk-core';\n\nimport {\n  MultiSignTransactionType,\n  TransactionsDataTokensType\n} from 'types/transactions.types';\nimport { decodeBase64 } from 'utils/decoders/base64Utils';\nimport { getTokenFromData } from './getTokenFromData';\nimport { parseMultiEsdtTransferData } from './parseMultiEsdtTransferData';\n\nexport function parseMultiEsdtTransferDataForMultipleTransactions({\n  transactions\n}: {\n  transactions?: Transaction[];\n}) {\n  const allTransactions: MultiSignTransactionType[] = [];\n  const parsedTransactionsByDataField: TransactionsDataTokensType = {};\n\n  if (!transactions || transactions.length === 0) {\n    return {\n      allTransactions,\n      parsedTransactionsByDataField\n    };\n  }\n\n  transactions.forEach((transaction, transactionIndex) => {\n    const txData = decodeBase64(transaction.data.toString() ?? '');\n    const multiTxs = parseMultiEsdtTransferData(txData);\n\n    if (multiTxs.length > 0) {\n      multiTxs.forEach((trx, idx) => {\n        const isLastView = idx === multiTxs.length - 1;\n\n        const newTx: MultiSignTransactionType = {\n          transaction,\n          multiTxData: trx.data,\n          transactionIndex: idx,\n          needsSigning: isLastView\n        };\n\n        parsedTransactionsByDataField[trx.data] = {\n          tokenId: trx.token ? trx.token : '',\n          amount: trx.amount ? trx.amount : '',\n          type: trx.type,\n          nonce: trx.nonce ? trx.nonce : '',\n          multiTxData: trx.data,\n          receiver: trx.receiver\n        };\n\n        allTransactions.push(newTx);\n      });\n    } else {\n      const transactionData = decodeBase64(transaction.data.toString() ?? '');\n\n      const { tokenId, amount } = getTokenFromData(transactionData);\n\n      if (tokenId) {\n        parsedTransactionsByDataField[transactionData] = {\n          tokenId,\n          amount,\n          receiver: transaction.receiver.toBech32()\n        };\n      }\n      allTransactions.push({\n        transaction,\n        transactionIndex,\n        multiTxData: transactionData,\n        needsSigning: true\n      });\n    }\n  });\n\n  return {\n    allTransactions,\n    parsedTransactionsByDataField\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA,yBAA6B;AAC7B,8BAAiC;AACjC,wCAA2C;AAEpC,SAAS,kDAAkD;AAAA,EAChE;AACF,GAEG;AACD,QAAM,kBAA8C,CAAC;AACrD,QAAM,gCAA4D,CAAC;AAEnE,MAAI,CAAC,gBAAgB,aAAa,WAAW,GAAG;AAC9C,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,eAAa,QAAQ,CAAC,aAAa,qBAAqB;AACtD,UAAM,aAAS,iCAAa,YAAY,KAAK,SAAS,KAAK,EAAE;AAC7D,UAAM,eAAW,8DAA2B,MAAM;AAElD,QAAI,SAAS,SAAS,GAAG;AACvB,eAAS,QAAQ,CAAC,KAAK,QAAQ;AAC7B,cAAM,aAAa,QAAQ,SAAS,SAAS;AAE7C,cAAM,QAAkC;AAAA,UACtC;AAAA,UACA,aAAa,IAAI;AAAA,UACjB,kBAAkB;AAAA,UAClB,cAAc;AAAA,QAChB;AAEA,sCAA8B,IAAI,IAAI,IAAI;AAAA,UACxC,SAAS,IAAI,QAAQ,IAAI,QAAQ;AAAA,UACjC,QAAQ,IAAI,SAAS,IAAI,SAAS;AAAA,UAClC,MAAM,IAAI;AAAA,UACV,OAAO,IAAI,QAAQ,IAAI,QAAQ;AAAA,UAC/B,aAAa,IAAI;AAAA,UACjB,UAAU,IAAI;AAAA,QAChB;AAEA,wBAAgB,KAAK,KAAK;AAAA,MAC5B,CAAC;AAAA,IACH,OAAO;AACL,YAAM,sBAAkB,iCAAa,YAAY,KAAK,SAAS,KAAK,EAAE;AAEtE,YAAM,EAAE,SAAS,OAAO,QAAI,0CAAiB,eAAe;AAE5D,UAAI,SAAS;AACX,sCAA8B,eAAe,IAAI;AAAA,UAC/C;AAAA,UACA;AAAA,UACA,UAAU,YAAY,SAAS,SAAS;AAAA,QAC1C;AAAA,MACF;AACA,sBAAgB,KAAK;AAAA,QACnB;AAAA,QACA;AAAA,QACA,aAAa;AAAA,QACb,cAAc;AAAA,MAChB,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAED,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
