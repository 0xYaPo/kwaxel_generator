import { FungibleTransactionType, ISignTransactionsPanelCommonData } from '../../../../../../managers/internal/SignTransactionsStateManager/types';
import { NetworkType } from '../../../../../../types/network.types';
import { NftEnumType } from '../../../../../../types/tokens.types';
import { MultiSignTransactionType, TransactionDataTokenType } from '../../../../../../types/transactions.types';
export type GetCommonDataPropsType = {
    allTransactions: MultiSignTransactionType[];
    currentScreenIndex: number;
    price?: number;
    network: NetworkType;
    signedIndexes: number[];
    egldLabel: string;
    address: string;
    shard?: number;
    username?: string;
    parsedTransactionsByDataField: Record<string, TransactionDataTokenType>;
    gasPriceData: {
        initialGasPrice: number;
        ppu: ISignTransactionsPanelCommonData['ppu'];
    };
};
export declare function getCommonData({ allTransactions, currentScreenIndex, egldLabel, network, gasPriceData, price, address, username, shard, signedIndexes, parsedTransactionsByDataField }: GetCommonDataPropsType): Promise<{
    commonData: ISignTransactionsPanelCommonData;
    tokenTransaction: {
        identifier?: string | undefined;
        amount: string;
        usdValue: string;
    } | null;
    fungibleTransaction: (FungibleTransactionType & {
        type: NftEnumType.NonFungibleESDT | NftEnumType.SemiFungibleESDT;
    }) | null;
}>;
