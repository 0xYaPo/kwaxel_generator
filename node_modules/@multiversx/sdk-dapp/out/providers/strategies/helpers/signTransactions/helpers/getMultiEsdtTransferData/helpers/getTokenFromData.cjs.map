{
  "version": 3,
  "sources": ["../../../../../../../../src/providers/strategies/helpers/signTransactions/helpers/getMultiEsdtTransferData/helpers/getTokenFromData.ts"],
  "sourcesContent": ["import { Address } from '@multiversx/sdk-core';\nimport BigNumber from 'bignumber.js';\nimport { TransactionTypesEnum } from 'types/enums.types';\nimport { decodePart } from 'utils/decoders/decodePart';\nimport { addressIsValid } from 'utils/validation/addressIsValid';\n\nconst noData = {\n  tokenId: '',\n  amount: ''\n};\n\nexport const decodeData = (data: string) => {\n  const nonceIndex = 2;\n  const amountIndex = 3;\n  const parts = data.split('@');\n  const decodedParts = parts.map((part, i) =>\n    [nonceIndex, amountIndex].includes(i) ? part : decodePart(part)\n  );\n  return decodedParts;\n};\n\nexport function getTokenFromData(data?: string): {\n  tokenId: string;\n  amount: string;\n  collection?: string;\n  nonce?: string;\n  receiver?: string;\n} {\n  if (!data) {\n    return noData;\n  }\n\n  const isTokenTransfer = data.startsWith(TransactionTypesEnum.ESDTTransfer);\n  const isNftTransfer =\n    data.startsWith(TransactionTypesEnum.ESDTNFTTransfer) && data.includes('@');\n  const isNftBurn =\n    data.startsWith(TransactionTypesEnum.ESDTNFTBurn) && data.includes('@');\n\n  if (isTokenTransfer) {\n    const [, encodedToken, encodedAmount] = data.split('@');\n    try {\n      const tokenId = Buffer.from(encodedToken, 'hex').toString('ascii');\n\n      if (!tokenId) {\n        return noData;\n      }\n\n      const amount = new BigNumber(\n        '0x' + encodedAmount.replace('0x', '')\n      ).toString(10);\n\n      return {\n        tokenId,\n        amount\n      };\n    } catch (e) {\n      console.error('Error getting token from transaction data', e);\n    }\n  }\n\n  if (isNftTransfer) {\n    try {\n      const [, /*ESDTNFTTransfer*/ collection, nonce, quantity, receiver] =\n        decodeData(data);\n      if (\n        [collection, nonce, quantity, receiver].every((el) => Boolean(el)) &&\n        addressIsValid(new Address(receiver).toBech32())\n      ) {\n        return {\n          tokenId: `${collection}-${nonce}`,\n          amount: new BigNumber(quantity, 16).toString(10),\n          collection,\n          nonce,\n          receiver: new Address(receiver).toBech32()\n        };\n      }\n    } catch (_err) {\n      /* empty */\n    }\n  }\n\n  if (isNftBurn) {\n    try {\n      const [, /*ESDTNFTBurn*/ collection, nonce, quantity] = decodeData(data);\n      if ([collection, nonce, quantity].every((el) => Boolean(el))) {\n        return {\n          tokenId: `${collection}-${nonce}`,\n          amount: new BigNumber(quantity, 16).toString(10),\n          collection,\n          nonce\n        };\n      }\n    } catch (_err) {\n      /* empty */\n    }\n  }\n\n  return noData;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAwB;AACxB,uBAAsB;AACtB,mBAAqC;AACrC,wBAA2B;AAC3B,4BAA+B;AAE/B,MAAM,SAAS;AAAA,EACb,SAAS;AAAA,EACT,QAAQ;AACV;AAEO,MAAM,aAAa,CAAC,SAAiB;AAC1C,QAAM,aAAa;AACnB,QAAM,cAAc;AACpB,QAAM,QAAQ,KAAK,MAAM,GAAG;AAC5B,QAAM,eAAe,MAAM;AAAA,IAAI,CAAC,MAAM,MACpC,CAAC,YAAY,WAAW,EAAE,SAAS,CAAC,IAAI,WAAO,8BAAW,IAAI;AAAA,EAChE;AACA,SAAO;AACT;AAEO,SAAS,iBAAiB,MAM/B;AACA,MAAI,CAAC,MAAM;AACT,WAAO;AAAA,EACT;AAEA,QAAM,kBAAkB,KAAK,WAAW,kCAAqB,YAAY;AACzE,QAAM,gBACJ,KAAK,WAAW,kCAAqB,eAAe,KAAK,KAAK,SAAS,GAAG;AAC5E,QAAM,YACJ,KAAK,WAAW,kCAAqB,WAAW,KAAK,KAAK,SAAS,GAAG;AAExE,MAAI,iBAAiB;AACnB,UAAM,CAAC,EAAE,cAAc,aAAa,IAAI,KAAK,MAAM,GAAG;AACtD,QAAI;AACF,YAAM,UAAU,OAAO,KAAK,cAAc,KAAK,EAAE,SAAS,OAAO;AAEjE,UAAI,CAAC,SAAS;AACZ,eAAO;AAAA,MACT;AAEA,YAAM,SAAS,IAAI,iBAAAA;AAAA,QACjB,OAAO,cAAc,QAAQ,MAAM,EAAE;AAAA,MACvC,EAAE,SAAS,EAAE;AAEb,aAAO;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACF,SAAS,GAAG;AACV,cAAQ,MAAM,6CAA6C,CAAC;AAAA,IAC9D;AAAA,EACF;AAEA,MAAI,eAAe;AACjB,QAAI;AACF,YAAM;AAAA,QAAC;AAAA;AAAA,QAAsB;AAAA,QAAY;AAAA,QAAO;AAAA,QAAU;AAAA,MAAQ,IAChE,WAAW,IAAI;AACjB,UACE,CAAC,YAAY,OAAO,UAAU,QAAQ,EAAE,MAAM,CAAC,OAAO,QAAQ,EAAE,CAAC,SACjE,sCAAe,IAAI,wBAAQ,QAAQ,EAAE,SAAS,CAAC,GAC/C;AACA,eAAO;AAAA,UACL,SAAS,GAAG,UAAU,IAAI,KAAK;AAAA,UAC/B,QAAQ,IAAI,iBAAAA,QAAU,UAAU,EAAE,EAAE,SAAS,EAAE;AAAA,UAC/C;AAAA,UACA;AAAA,UACA,UAAU,IAAI,wBAAQ,QAAQ,EAAE,SAAS;AAAA,QAC3C;AAAA,MACF;AAAA,IACF,SAAS,MAAM;AAAA,IAEf;AAAA,EACF;AAEA,MAAI,WAAW;AACb,QAAI;AACF,YAAM;AAAA,QAAC;AAAA;AAAA,QAAkB;AAAA,QAAY;AAAA,QAAO;AAAA,MAAQ,IAAI,WAAW,IAAI;AACvE,UAAI,CAAC,YAAY,OAAO,QAAQ,EAAE,MAAM,CAAC,OAAO,QAAQ,EAAE,CAAC,GAAG;AAC5D,eAAO;AAAA,UACL,SAAS,GAAG,UAAU,IAAI,KAAK;AAAA,UAC/B,QAAQ,IAAI,iBAAAA,QAAU,UAAU,EAAE,EAAE,SAAS,EAAE;AAAA,UAC/C;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF,SAAS,MAAM;AAAA,IAEf;AAAA,EACF;AAEA,SAAO;AACT;",
  "names": ["BigNumber"]
}
