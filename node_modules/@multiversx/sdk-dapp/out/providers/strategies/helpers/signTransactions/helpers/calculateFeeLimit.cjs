"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var calculateFeeLimit_exports = {};
__export(calculateFeeLimit_exports, {
  calculateFeeLimit: () => calculateFeeLimit
});
module.exports = __toCommonJS(calculateFeeLimit_exports);
var import_bignumber = __toESM(require("bignumber.js"));
var import_constants = require("../../../../../constants/index");
var import_sdkCore = require("../../../../../lib/sdkCore");
var import_sdkDappUtils = require("../../../../../lib/sdkDappUtils");
var import_isGuardianTx = require("../../../../../utils/transactions/isGuardianTx");
function calculateFeeLimit({
  from,
  to,
  minGasLimit = String(import_constants.GAS_LIMIT),
  gasLimit,
  gasPrice,
  data: inputData,
  gasPerDataByte,
  gasPriceModifier,
  defaultGasPrice = String(import_constants.GAS_PRICE),
  chainId
}) {
  const data = inputData || "";
  const validGasLimit = (0, import_sdkDappUtils.stringIsInteger)(gasLimit) ? gasLimit : minGasLimit;
  const extraGasLimit = (0, import_isGuardianTx.isGuardianTx)({ data }) ? import_constants.EXTRA_GAS_LIMIT_GUARDED_TX : 0;
  const usedGasLimit = new import_bignumber.default(validGasLimit).plus(extraGasLimit).toNumber();
  const validGasPrice = (0, import_sdkDappUtils.stringIsFloat)(gasPrice) ? gasPrice : defaultGasPrice;
  const transaction = new import_sdkCore.Transaction({
    nonce: BigInt(0),
    value: BigInt(0),
    receiver: new import_sdkCore.Address(to),
    sender: new import_sdkCore.Address(from),
    gasPrice: BigInt(validGasPrice),
    gasLimit: BigInt(usedGasLimit),
    data: Buffer.from(data.trim()),
    chainID: chainId,
    version: 1
  });
  try {
    const transactionComputer = new import_sdkCore.TransactionComputer();
    const bNfee = transactionComputer.computeTransactionFee(transaction, {
      gasPerDataByte: BigInt(gasPerDataByte),
      minGasLimit: BigInt(minGasLimit),
      gasPriceModifier: parseFloat(gasPriceModifier),
      chainID: chainId
    });
    return bNfee.toString(10);
  } catch (err) {
    console.error(err);
    return import_sdkDappUtils.ZERO;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  calculateFeeLimit
});
//# sourceMappingURL=calculateFeeLimit.cjs.map
