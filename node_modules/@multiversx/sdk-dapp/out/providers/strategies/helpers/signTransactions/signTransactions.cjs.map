{
  "version": 3,
  "sources": ["../../../../../src/providers/strategies/helpers/signTransactions/signTransactions.ts"],
  "sourcesContent": ["import { getEconomics } from 'apiCalls/economics/getEconomics';\nimport { EMPTY_PPU } from 'constants/placeholders.constants';\nimport { Transaction } from 'lib/sdkCore';\nimport { DECIMALS, DIGITS, formatAmount } from 'lib/sdkDappUtils';\nimport { SignTransactionsStateManager } from 'managers/internal/SignTransactionsStateManager/SignTransactionsStateManager';\nimport {\n  ISignTransactionsPanelCommonData,\n  SignEventsEnum\n} from 'managers/internal/SignTransactionsStateManager/types';\nimport { getAccountInfo } from 'methods/account/getAccountInfo';\nimport { getEgldLabel } from 'methods/network/getEgldLabel';\nimport { cancelCrossWindowAction } from 'providers/helpers/cancelCrossWindowAction';\nimport { IProvider } from 'providers/types/providerFactory.types';\nimport { networkSelector } from 'store/selectors/networkSelectors';\nimport { getState } from 'store/store';\nimport { getCommonData } from './helpers/getCommonData/getCommonData';\nimport { getRecommendedGasPrice } from './helpers/getCommonData/helpers/getRecommendedGasPrice';\nimport { getFeeData } from './helpers/getFeeData';\nimport { getMultiEsdtTransferData } from './helpers/getMultiEsdtTransferData/getMultiEsdtTransferData';\nimport { guardTransactions as getGuardedTransactions } from './helpers/guardTransactions/guardTransactions';\n\ntype SignTransactionsParamsType = {\n  transactions?: Transaction[];\n  handleSign: IProvider['signTransactions'];\n  guardTransactions?: typeof getGuardedTransactions;\n};\n\nexport async function signTransactions({\n  transactions = [],\n  handleSign,\n  guardTransactions = getGuardedTransactions\n}: SignTransactionsParamsType): Promise<Transaction[]> {\n  const {\n    account: { address, shard, username }\n  } = getAccountInfo();\n  const network = networkSelector(getState());\n\n  const egldLabel = getEgldLabel();\n\n  const { allTransactions, parsedTransactionsByDataField } =\n    getMultiEsdtTransferData(transactions);\n\n  let signedIndexes: number[] = [];\n\n  const manager = SignTransactionsStateManager.getInstance();\n  await manager.openUI();\n\n  if (!manager) {\n    throw new Error('Unable to establish connection with sign screens');\n  }\n\n  const handleCancel = async () => {\n    await cancelCrossWindowAction();\n    manager.closeUI();\n  };\n\n  manager.subscribeToEventBus(SignEventsEnum.CLOSE, handleCancel);\n\n  return new Promise<Transaction[]>(async (resolve, reject) => {\n    const signedTransactions: Transaction[] = [];\n    const economics = await getEconomics({ baseURL: network.apiAddress });\n\n    manager.notifyDataUpdate();\n\n    manager.initializeGasPriceMap(allTransactions.map((tx) => tx.transaction));\n    const price = economics?.price;\n\n    let currentScreenIndex = 0;\n\n    const updateScreen = async () => {\n      const currentTransaction = allTransactions[currentScreenIndex];\n      const transaction = currentTransaction?.transaction;\n\n      const currentNonce = Number(transaction.nonce);\n\n      try {\n        manager.updateIsLoading(true);\n\n        const { commonData, tokenTransaction, fungibleTransaction } =\n          await getCommonData({\n            allTransactions,\n            currentScreenIndex,\n            egldLabel,\n            network,\n            gasPriceData: manager.ppuMap[currentNonce],\n            price,\n            address,\n            username,\n            shard,\n            signedIndexes,\n            parsedTransactionsByDataField\n          });\n\n        if (tokenTransaction) {\n          manager.updateTokenTransaction(tokenTransaction);\n        }\n\n        if (fungibleTransaction) {\n          manager.updateNonFungibleTransaction(\n            fungibleTransaction.type,\n            fungibleTransaction\n          );\n        }\n\n        manager.updateCommonData(commonData);\n      } catch (error) {\n        console.error(\n          `Error fetching common data for transaction at index ${currentScreenIndex}:`,\n          error\n        );\n\n        throw error;\n      } finally {\n        manager.updateIsLoading(false);\n      }\n    };\n\n    const onBack = () => {\n      if (currentScreenIndex > 0) {\n        currentScreenIndex--;\n        updateScreen();\n      }\n    };\n\n    const onSetPpu = (\n      ppu: ISignTransactionsPanelCommonData['ppu'] = EMPTY_PPU\n    ) => {\n      const currentTransaction = allTransactions[currentScreenIndex];\n      const transaction = currentTransaction.transaction;\n      const currentNonce = Number(transaction.nonce);\n\n      manager.updateGasPriceMap({\n        nonce: currentNonce,\n        ppu\n      });\n\n      manager.updateCommonData({ ppu });\n\n      const plainTransaction = transaction.toPlainObject();\n      const newGasPrice = getRecommendedGasPrice({\n        transaction: plainTransaction,\n        gasPriceData: manager.ppuMap[currentNonce]\n      });\n\n      const newTransaction = Transaction.newFromPlainObject({\n        ...plainTransaction,\n        gasPrice: newGasPrice\n      });\n\n      const feeData = getFeeData({\n        transaction: newTransaction,\n        price\n      });\n\n      const formattedGasPrice = formatAmount({\n        input: newGasPrice.toString(),\n        decimals: DECIMALS,\n        addCommas: true,\n        digits: DIGITS\n      });\n\n      manager.updateCommonData({\n        feeLimit: feeData.feeLimitFormatted,\n        feeInFiatLimit: feeData.feeInFiatLimit,\n        gasPrice: formattedGasPrice,\n        ppu\n      });\n    };\n\n    const onCancel = async () => {\n      reject(new Error('Transaction signing cancelled by user'));\n      await cancelCrossWindowAction();\n      manager.closeUI();\n    };\n\n    const onNext = () => {\n      if (currentScreenIndex < manager.transactionsCount - 1) {\n        currentScreenIndex++;\n        updateScreen();\n      }\n    };\n\n    const onSign = async () => {\n      const currentTransaction = allTransactions[currentScreenIndex];\n      const transaction = currentTransaction.transaction;\n      const currentNonce = Number(transaction.nonce);\n\n      const { commonData } = await getCommonData({\n        allTransactions,\n        currentScreenIndex,\n        egldLabel,\n        network,\n        gasPriceData: manager.ppuMap[currentNonce],\n        price,\n        address,\n        username,\n        shard,\n        signedIndexes,\n        parsedTransactionsByDataField\n      });\n\n      if (!commonData.needsSigning) {\n        signedIndexes.push(currentScreenIndex);\n        return onNext();\n      }\n\n      const plainTransaction = transaction.toPlainObject();\n      const txNonce = plainTransaction.nonce;\n\n      const newGasPrice = getRecommendedGasPrice({\n        transaction: plainTransaction,\n        gasPriceData: manager.ppuMap[txNonce]\n      });\n\n      const transactionToSign = Transaction.newFromPlainObject({\n        ...plainTransaction,\n        gasPrice: newGasPrice\n      });\n\n      try {\n        const signedTxs = await handleSign([transactionToSign]);\n        if (signedTxs) {\n          signedIndexes.push(currentScreenIndex);\n          signedTransactions.push(signedTxs[0]);\n        }\n\n        const isLastScreen = currentScreenIndex === allTransactions.length - 1;\n        const allSignableTransactions = allTransactions.filter(\n          (tx) => tx.needsSigning\n        );\n\n        const areAllTransactionsSigned =\n          signedTransactions.length === allSignableTransactions.length;\n\n        if (isLastScreen && areAllTransactionsSigned) {\n          const optionallyGuardedTransactions =\n            await guardTransactions(signedTransactions);\n          manager.closeUI();\n          return resolve(optionallyGuardedTransactions);\n        }\n\n        onNext();\n      } catch (error) {\n        manager.closeUI();\n        reject(error);\n      }\n    };\n\n    const eventHandlersMap = new Map([\n      [SignEventsEnum.NEXT, onNext],\n      [SignEventsEnum.CONFIRM, onSign],\n      [SignEventsEnum.CLOSE, onCancel],\n      [SignEventsEnum.BACK, onBack],\n      [SignEventsEnum.SET_PPU, onSetPpu]\n    ]);\n\n    function setupEventListeners() {\n      for (const [event, handler] of eventHandlersMap) {\n        manager.subscribeToEventBus(event, handler);\n      }\n    }\n\n    setupEventListeners();\n    await updateScreen();\n  });\n}\n"],
  "mappings": "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",
  "names": ["getGuardedTransactions"]
}
