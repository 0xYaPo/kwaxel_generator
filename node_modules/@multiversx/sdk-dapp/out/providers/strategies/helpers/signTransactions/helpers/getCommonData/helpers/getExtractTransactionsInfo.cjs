"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getExtractTransactionsInfo_exports = {};
__export(getExtractTransactionsInfo_exports, {
  getExtractTransactionsInfo: () => getExtractTransactionsInfo
});
module.exports = __toCommonJS(getExtractTransactionsInfo_exports);
var import_account = require("../../../../../../../apiCalls/account");
var import_getScamAddressData = require("../../../../../../../apiCalls/account/getScamAddressData");
var import_enums = require("../../../../../../../types/enums.types");
var import_base64Utils = require("../../../../../../../utils/decoders/base64Utils");
var import_checkIsValidSender = require("./checkIsValidSender");
var import_getTxInfoByDataField = require("./getTxInfoByDataField");
var import_isTokenTransfer = require("../../isTokenTransfer");
let verifiedAddresses = {};
function getExtractTransactionsInfo({
  egldLabel,
  apiAddress,
  sender,
  address,
  parsedTransactionsByDataField
}) {
  const extractTransactionsInfo = async (currentTx) => {
    if (currentTx == null) {
      return;
    }
    const senderAccount = !sender || sender === address ? null : await (0, import_account.getAccountFromApi)({
      address: sender,
      baseURL: apiAddress
    });
    const { transaction, multiTxData, transactionIndex } = currentTx;
    const dataField = (0, import_base64Utils.decodeBase64)(transaction.data.toString() ?? "");
    const transactionTokenInfo = (0, import_getTxInfoByDataField.getTxInfoByDataField)({
      data: dataField,
      multiTransactionData: multiTxData,
      parsedTransactionsByDataField
    });
    const { tokenId } = transactionTokenInfo;
    const receiver = transaction.receiver.toBech32();
    if (sender && sender !== address) {
      const isValidSender = (0, import_checkIsValidSender.checkIsValidSender)(senderAccount, address);
      if (!isValidSender) {
        console.error(import_enums.SigningErrorsEnum.senderDifferentThanLoggedInAddress);
        throw import_enums.SigningErrorsEnum.senderDifferentThanLoggedInAddress;
      }
    }
    const notSender = address !== receiver;
    const verified = receiver in verifiedAddresses;
    if (receiver && notSender && !verified) {
      const data = await (0, import_getScamAddressData.getScamAddressData)({
        addressToVerify: receiver,
        baseURL: apiAddress
      });
      verifiedAddresses = {
        ...verifiedAddresses,
        ...data?.scamInfo ? { [receiver]: data.scamInfo } : {}
      };
    }
    const isTokenTransaction = Boolean(
      tokenId && (0, import_isTokenTransfer.isTokenTransfer)({ tokenId, egldLabel })
    );
    return {
      transaction,
      receiverScamInfo: verifiedAddresses[receiver]?.info || null,
      transactionTokenInfo,
      isTokenTransaction,
      dataField,
      transactionIndex,
      needsSigning: currentTx.needsSigning
    };
  };
  return extractTransactionsInfo;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getExtractTransactionsInfo
});
//# sourceMappingURL=getExtractTransactionsInfo.cjs.map
