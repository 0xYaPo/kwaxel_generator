"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var parseMultiEsdtTransferDataForMultipleTransactions_exports = {};
__export(parseMultiEsdtTransferDataForMultipleTransactions_exports, {
  parseMultiEsdtTransferDataForMultipleTransactions: () => parseMultiEsdtTransferDataForMultipleTransactions
});
module.exports = __toCommonJS(parseMultiEsdtTransferDataForMultipleTransactions_exports);
var import_base64Utils = require("../../../../../../../utils/decoders/base64Utils");
var import_getTokenFromData = require("./getTokenFromData");
var import_parseMultiEsdtTransferData = require("./parseMultiEsdtTransferData");
function parseMultiEsdtTransferDataForMultipleTransactions({
  transactions
}) {
  const allTransactions = [];
  const parsedTransactionsByDataField = {};
  if (!transactions || transactions.length === 0) {
    return {
      allTransactions,
      parsedTransactionsByDataField
    };
  }
  transactions.forEach((transaction, transactionIndex) => {
    const txData = (0, import_base64Utils.decodeBase64)(transaction.data.toString() ?? "");
    const multiTxs = (0, import_parseMultiEsdtTransferData.parseMultiEsdtTransferData)(txData);
    if (multiTxs.length > 0) {
      multiTxs.forEach((trx, idx) => {
        const isLastView = idx === multiTxs.length - 1;
        const newTx = {
          transaction,
          multiTxData: trx.data,
          transactionIndex: idx,
          needsSigning: isLastView
        };
        parsedTransactionsByDataField[trx.data] = {
          tokenId: trx.token ? trx.token : "",
          amount: trx.amount ? trx.amount : "",
          type: trx.type,
          nonce: trx.nonce ? trx.nonce : "",
          multiTxData: trx.data,
          receiver: trx.receiver
        };
        allTransactions.push(newTx);
      });
    } else {
      const transactionData = (0, import_base64Utils.decodeBase64)(transaction.data.toString() ?? "");
      const { tokenId, amount } = (0, import_getTokenFromData.getTokenFromData)(transactionData);
      if (tokenId) {
        parsedTransactionsByDataField[transactionData] = {
          tokenId,
          amount,
          receiver: transaction.receiver.toBech32()
        };
      }
      allTransactions.push({
        transaction,
        transactionIndex,
        multiTxData: transactionData,
        needsSigning: true
      });
    }
  });
  return {
    allTransactions,
    parsedTransactionsByDataField
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  parseMultiEsdtTransferDataForMultipleTransactions
});
//# sourceMappingURL=parseMultiEsdtTransferDataForMultipleTransactions.cjs.map
