{
  "version": 3,
  "sources": ["../../../../../../../../src/providers/strategies/helpers/signTransactions/helpers/getCommonData/helpers/getExtractTransactionsInfo.ts"],
  "sourcesContent": ["import { getAccountFromApi } from 'apiCalls/account';\nimport { getScamAddressData } from 'apiCalls/account/getScamAddressData';\nimport { SigningErrorsEnum } from 'types/enums.types';\n\nimport {\n  MultiSignTransactionType,\n  TransactionDataTokenType\n} from 'types/transactions.types';\nimport { decodeBase64 } from 'utils/decoders/base64Utils';\nimport { checkIsValidSender } from './checkIsValidSender';\nimport { getTxInfoByDataField } from './getTxInfoByDataField';\nimport { isTokenTransfer } from '../../isTokenTransfer';\n\ninterface VerifiedAddressesType {\n  [address: string]: { type: string; info: string };\n}\nlet verifiedAddresses: VerifiedAddressesType = {};\n\ntype ExtractTransactionsInfoType = {\n  sender: string;\n  address: string;\n  apiAddress: string;\n  egldLabel: string;\n  parsedTransactionsByDataField: Record<string, TransactionDataTokenType>;\n};\n\nexport function getExtractTransactionsInfo({\n  egldLabel,\n  apiAddress,\n  sender,\n  address,\n  parsedTransactionsByDataField\n}: ExtractTransactionsInfoType) {\n  const extractTransactionsInfo = async (\n    currentTx: MultiSignTransactionType\n  ) => {\n    if (currentTx == null) {\n      return;\n    }\n\n    const senderAccount =\n      !sender || sender === address\n        ? null\n        : await getAccountFromApi({\n            address: sender,\n            baseURL: apiAddress\n          });\n\n    const { transaction, multiTxData, transactionIndex } = currentTx;\n    const dataField = decodeBase64(transaction.data.toString() ?? '');\n    const transactionTokenInfo = getTxInfoByDataField({\n      data: dataField,\n      multiTransactionData: multiTxData,\n      parsedTransactionsByDataField\n    });\n\n    const { tokenId } = transactionTokenInfo;\n    const receiver = transaction.receiver.toBech32();\n\n    if (sender && sender !== address) {\n      const isValidSender = checkIsValidSender(senderAccount, address);\n\n      if (!isValidSender) {\n        console.error(SigningErrorsEnum.senderDifferentThanLoggedInAddress);\n        throw SigningErrorsEnum.senderDifferentThanLoggedInAddress;\n      }\n    }\n\n    const notSender = address !== receiver;\n    const verified = receiver in verifiedAddresses;\n\n    if (receiver && notSender && !verified) {\n      const data = await getScamAddressData({\n        addressToVerify: receiver,\n        baseURL: apiAddress\n      });\n      verifiedAddresses = {\n        ...verifiedAddresses,\n        ...(data?.scamInfo ? { [receiver]: data.scamInfo } : {})\n      };\n    }\n\n    const isTokenTransaction = Boolean(\n      tokenId && isTokenTransfer({ tokenId, egldLabel })\n    );\n\n    return {\n      transaction,\n      receiverScamInfo: verifiedAddresses[receiver]?.info || null,\n      transactionTokenInfo,\n      isTokenTransaction,\n      dataField,\n      transactionIndex,\n      needsSigning: currentTx.needsSigning\n    };\n  };\n  return extractTransactionsInfo;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAkC;AAClC,gCAAmC;AACnC,mBAAkC;AAMlC,yBAA6B;AAC7B,gCAAmC;AACnC,kCAAqC;AACrC,6BAAgC;AAKhC,IAAI,oBAA2C,CAAC;AAUzC,SAAS,2BAA2B;AAAA,EACzC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAgC;AAC9B,QAAM,0BAA0B,OAC9B,cACG;AACH,QAAI,aAAa,MAAM;AACrB;AAAA,IACF;AAEA,UAAM,gBACJ,CAAC,UAAU,WAAW,UAClB,OACA,UAAM,kCAAkB;AAAA,MACtB,SAAS;AAAA,MACT,SAAS;AAAA,IACX,CAAC;AAEP,UAAM,EAAE,aAAa,aAAa,iBAAiB,IAAI;AACvD,UAAM,gBAAY,iCAAa,YAAY,KAAK,SAAS,KAAK,EAAE;AAChE,UAAM,2BAAuB,kDAAqB;AAAA,MAChD,MAAM;AAAA,MACN,sBAAsB;AAAA,MACtB;AAAA,IACF,CAAC;AAED,UAAM,EAAE,QAAQ,IAAI;AACpB,UAAM,WAAW,YAAY,SAAS,SAAS;AAE/C,QAAI,UAAU,WAAW,SAAS;AAChC,YAAM,oBAAgB,8CAAmB,eAAe,OAAO;AAE/D,UAAI,CAAC,eAAe;AAClB,gBAAQ,MAAM,+BAAkB,kCAAkC;AAClE,cAAM,+BAAkB;AAAA,MAC1B;AAAA,IACF;AAEA,UAAM,YAAY,YAAY;AAC9B,UAAM,WAAW,YAAY;AAE7B,QAAI,YAAY,aAAa,CAAC,UAAU;AACtC,YAAM,OAAO,UAAM,8CAAmB;AAAA,QACpC,iBAAiB;AAAA,QACjB,SAAS;AAAA,MACX,CAAC;AACD,0BAAoB;AAAA,QAClB,GAAG;AAAA,QACH,GAAI,MAAM,WAAW,EAAE,CAAC,QAAQ,GAAG,KAAK,SAAS,IAAI,CAAC;AAAA,MACxD;AAAA,IACF;AAEA,UAAM,qBAAqB;AAAA,MACzB,eAAW,wCAAgB,EAAE,SAAS,UAAU,CAAC;AAAA,IACnD;AAEA,WAAO;AAAA,MACL;AAAA,MACA,kBAAkB,kBAAkB,QAAQ,GAAG,QAAQ;AAAA,MACvD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,cAAc,UAAU;AAAA,IAC1B;AAAA,EACF;AACA,SAAO;AACT;",
  "names": []
}
