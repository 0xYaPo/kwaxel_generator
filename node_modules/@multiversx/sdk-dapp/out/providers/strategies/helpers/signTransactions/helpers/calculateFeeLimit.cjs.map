{
  "version": 3,
  "sources": ["../../../../../../src/providers/strategies/helpers/signTransactions/helpers/calculateFeeLimit.ts"],
  "sourcesContent": ["import BigNumber from 'bignumber.js';\nimport {\n  EXTRA_GAS_LIMIT_GUARDED_TX,\n  GAS_LIMIT,\n  GAS_PRICE\n} from 'constants/index';\nimport { Transaction, Address, TransactionComputer } from 'lib/sdkCore';\nimport { stringIsFloat, stringIsInteger, ZERO } from 'lib/sdkDappUtils';\nimport { isGuardianTx } from 'utils/transactions/isGuardianTx';\n\nexport interface CalculateFeeLimitType {\n  gasLimit: string;\n  gasPrice: string;\n  data: string;\n  gasPerDataByte: string;\n  gasPriceModifier: string;\n  chainId: string;\n  minGasLimit?: string;\n  defaultGasPrice?: string;\n  from: string;\n  to: string;\n}\nexport function calculateFeeLimit({\n  from,\n  to,\n  minGasLimit = String(GAS_LIMIT),\n  gasLimit,\n  gasPrice,\n  data: inputData,\n  gasPerDataByte,\n  gasPriceModifier,\n  defaultGasPrice = String(GAS_PRICE),\n  chainId\n}: CalculateFeeLimitType) {\n  const data = inputData || '';\n  const validGasLimit = stringIsInteger(gasLimit) ? gasLimit : minGasLimit;\n\n  // We need to add extra gas fee for guardian transactions\n  const extraGasLimit = isGuardianTx({ data }) ? EXTRA_GAS_LIMIT_GUARDED_TX : 0;\n  const usedGasLimit = new BigNumber(validGasLimit)\n    .plus(extraGasLimit)\n    .toNumber();\n\n  const validGasPrice = stringIsFloat(gasPrice) ? gasPrice : defaultGasPrice;\n  const transaction = new Transaction({\n    nonce: BigInt(0),\n    value: BigInt(0),\n    receiver: new Address(to),\n    sender: new Address(from),\n    gasPrice: BigInt(validGasPrice),\n    gasLimit: BigInt(usedGasLimit),\n    data: Buffer.from(data.trim()),\n    chainID: chainId,\n    version: 1\n  });\n\n  try {\n    const transactionComputer = new TransactionComputer();\n    const bNfee = transactionComputer.computeTransactionFee(transaction, {\n      gasPerDataByte: BigInt(gasPerDataByte),\n      minGasLimit: BigInt(minGasLimit),\n      gasPriceModifier: parseFloat(gasPriceModifier),\n      chainID: chainId\n    });\n    return bNfee.toString(10);\n  } catch (err) {\n    console.error(err);\n    return ZERO;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAsB;AACtB,uBAIO;AACP,qBAA0D;AAC1D,0BAAqD;AACrD,0BAA6B;AActB,SAAS,kBAAkB;AAAA,EAChC;AAAA,EACA;AAAA,EACA,cAAc,OAAO,0BAAS;AAAA,EAC9B;AAAA,EACA;AAAA,EACA,MAAM;AAAA,EACN;AAAA,EACA;AAAA,EACA,kBAAkB,OAAO,0BAAS;AAAA,EAClC;AACF,GAA0B;AACxB,QAAM,OAAO,aAAa;AAC1B,QAAM,oBAAgB,qCAAgB,QAAQ,IAAI,WAAW;AAG7D,QAAM,oBAAgB,kCAAa,EAAE,KAAK,CAAC,IAAI,8CAA6B;AAC5E,QAAM,eAAe,IAAI,iBAAAA,QAAU,aAAa,EAC7C,KAAK,aAAa,EAClB,SAAS;AAEZ,QAAM,oBAAgB,mCAAc,QAAQ,IAAI,WAAW;AAC3D,QAAM,cAAc,IAAI,2BAAY;AAAA,IAClC,OAAO,OAAO,CAAC;AAAA,IACf,OAAO,OAAO,CAAC;AAAA,IACf,UAAU,IAAI,uBAAQ,EAAE;AAAA,IACxB,QAAQ,IAAI,uBAAQ,IAAI;AAAA,IACxB,UAAU,OAAO,aAAa;AAAA,IAC9B,UAAU,OAAO,YAAY;AAAA,IAC7B,MAAM,OAAO,KAAK,KAAK,KAAK,CAAC;AAAA,IAC7B,SAAS;AAAA,IACT,SAAS;AAAA,EACX,CAAC;AAED,MAAI;AACF,UAAM,sBAAsB,IAAI,mCAAoB;AACpD,UAAM,QAAQ,oBAAoB,sBAAsB,aAAa;AAAA,MACnE,gBAAgB,OAAO,cAAc;AAAA,MACrC,aAAa,OAAO,WAAW;AAAA,MAC/B,kBAAkB,WAAW,gBAAgB;AAAA,MAC7C,SAAS;AAAA,IACX,CAAC;AACD,WAAO,MAAM,SAAS,EAAE;AAAA,EAC1B,SAAS,KAAK;AACZ,YAAQ,MAAM,GAAG;AACjB,WAAO;AAAA,EACT;AACF;",
  "names": ["BigNumber"]
}
