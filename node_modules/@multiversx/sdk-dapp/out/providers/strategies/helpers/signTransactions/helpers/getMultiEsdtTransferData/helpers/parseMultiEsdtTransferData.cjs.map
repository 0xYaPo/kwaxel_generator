{
  "version": 3,
  "sources": ["../../../../../../../../src/providers/strategies/helpers/signTransactions/helpers/getMultiEsdtTransferData/helpers/parseMultiEsdtTransferData.ts"],
  "sourcesContent": ["import BigNumber from 'bignumber.js';\nimport { TransactionTypesEnum } from 'types/enums.types';\nimport { MultiEsdtTransactionType } from 'types/transactions.types';\nimport { decodePart } from 'utils/decoders/decodePart';\nimport { getAllStringOccurrences } from './getAllStringOccurrences';\n\n// TODO: add tests\nexport function parseMultiEsdtTransferData(data?: string) {\n  const transactions: MultiEsdtTransactionType[] = [];\n  let contractCallDataIndex = 0;\n  try {\n    if (\n      data?.startsWith(TransactionTypesEnum.MultiESDTNFTTransfer) &&\n      data?.includes('@')\n    ) {\n      const [, receiver, encodedTxCount, ...rest] = data.split('@');\n\n      if (receiver) {\n        const txCount = new BigNumber(encodedTxCount, 16).toNumber();\n\n        if (txCount >= Number.MAX_SAFE_INTEGER) {\n          return [];\n        }\n\n        let itemIndex = 0;\n\n        for (let txIndex = 0; txIndex < txCount; txIndex++) {\n          const transaction: MultiEsdtTransactionType = {\n            type: TransactionTypesEnum.nftTransaction,\n            data: '',\n            receiver\n          };\n\n          for (let index = 0; index < 3; index++) {\n            switch (index) {\n              case 0:\n                transaction.token = decodePart(rest[itemIndex]);\n                transaction.data = rest[itemIndex];\n                break;\n              case 1: {\n                const encodedNonce =\n                  rest[itemIndex] && rest[itemIndex].length\n                    ? rest[itemIndex]\n                    : '';\n                if (encodedNonce && encodedNonce !== '00') {\n                  transaction.nonce = encodedNonce;\n                } else {\n                  transaction.type = TransactionTypesEnum.esdtTransaction;\n                }\n                transaction.data = `${transaction.data}@${rest[itemIndex]}`;\n                break;\n              }\n              case 2:\n                transaction.amount = new BigNumber(\n                  rest[itemIndex],\n                  16\n                ).toString(10);\n                transaction.data = `${transaction.data}@${rest[itemIndex]}`;\n                break;\n              default:\n                break;\n            }\n            contractCallDataIndex = itemIndex + 1;\n            itemIndex++;\n          }\n          transactions[txIndex] = transaction;\n        }\n\n        const isDifferentFromTxCount = transactions.length !== txCount;\n        const hasInvalidNoOfAdSigns = transactions.some((tx) => {\n          const adSignOccurences = getAllStringOccurrences(tx.data, '@').length;\n          return adSignOccurences !== 2;\n        });\n\n        const hasAdStart = transactions.some((tx) => tx.data.startsWith('@'));\n        if (isDifferentFromTxCount || hasInvalidNoOfAdSigns || hasAdStart) {\n          return [];\n        }\n\n        if (rest[contractCallDataIndex]) {\n          let scCallData = rest[contractCallDataIndex];\n          for (let i = contractCallDataIndex + 1; i < rest.length; i++) {\n            scCallData += '@' + rest[i];\n          }\n          transactions[txCount] = {\n            type: TransactionTypesEnum.scCall,\n            data: scCallData,\n            receiver\n          };\n        }\n      }\n    }\n  } catch (err) {\n    console.error('failed parsing tx', err);\n    return transactions;\n  }\n  return transactions;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAsB;AACtB,mBAAqC;AAErC,wBAA2B;AAC3B,qCAAwC;AAGjC,SAAS,2BAA2B,MAAe;AACxD,QAAM,eAA2C,CAAC;AAClD,MAAI,wBAAwB;AAC5B,MAAI;AACF,QACE,MAAM,WAAW,kCAAqB,oBAAoB,KAC1D,MAAM,SAAS,GAAG,GAClB;AACA,YAAM,CAAC,EAAE,UAAU,gBAAgB,GAAG,IAAI,IAAI,KAAK,MAAM,GAAG;AAE5D,UAAI,UAAU;AACZ,cAAM,UAAU,IAAI,iBAAAA,QAAU,gBAAgB,EAAE,EAAE,SAAS;AAE3D,YAAI,WAAW,OAAO,kBAAkB;AACtC,iBAAO,CAAC;AAAA,QACV;AAEA,YAAI,YAAY;AAEhB,iBAAS,UAAU,GAAG,UAAU,SAAS,WAAW;AAClD,gBAAM,cAAwC;AAAA,YAC5C,MAAM,kCAAqB;AAAA,YAC3B,MAAM;AAAA,YACN;AAAA,UACF;AAEA,mBAAS,QAAQ,GAAG,QAAQ,GAAG,SAAS;AACtC,oBAAQ,OAAO;AAAA,cACb,KAAK;AACH,4BAAY,YAAQ,8BAAW,KAAK,SAAS,CAAC;AAC9C,4BAAY,OAAO,KAAK,SAAS;AACjC;AAAA,cACF,KAAK,GAAG;AACN,sBAAM,eACJ,KAAK,SAAS,KAAK,KAAK,SAAS,EAAE,SAC/B,KAAK,SAAS,IACd;AACN,oBAAI,gBAAgB,iBAAiB,MAAM;AACzC,8BAAY,QAAQ;AAAA,gBACtB,OAAO;AACL,8BAAY,OAAO,kCAAqB;AAAA,gBAC1C;AACA,4BAAY,OAAO,GAAG,YAAY,IAAI,IAAI,KAAK,SAAS,CAAC;AACzD;AAAA,cACF;AAAA,cACA,KAAK;AACH,4BAAY,SAAS,IAAI,iBAAAA;AAAA,kBACvB,KAAK,SAAS;AAAA,kBACd;AAAA,gBACF,EAAE,SAAS,EAAE;AACb,4BAAY,OAAO,GAAG,YAAY,IAAI,IAAI,KAAK,SAAS,CAAC;AACzD;AAAA,cACF;AACE;AAAA,YACJ;AACA,oCAAwB,YAAY;AACpC;AAAA,UACF;AACA,uBAAa,OAAO,IAAI;AAAA,QAC1B;AAEA,cAAM,yBAAyB,aAAa,WAAW;AACvD,cAAM,wBAAwB,aAAa,KAAK,CAAC,OAAO;AACtD,gBAAM,uBAAmB,wDAAwB,GAAG,MAAM,GAAG,EAAE;AAC/D,iBAAO,qBAAqB;AAAA,QAC9B,CAAC;AAED,cAAM,aAAa,aAAa,KAAK,CAAC,OAAO,GAAG,KAAK,WAAW,GAAG,CAAC;AACpE,YAAI,0BAA0B,yBAAyB,YAAY;AACjE,iBAAO,CAAC;AAAA,QACV;AAEA,YAAI,KAAK,qBAAqB,GAAG;AAC/B,cAAI,aAAa,KAAK,qBAAqB;AAC3C,mBAAS,IAAI,wBAAwB,GAAG,IAAI,KAAK,QAAQ,KAAK;AAC5D,0BAAc,MAAM,KAAK,CAAC;AAAA,UAC5B;AACA,uBAAa,OAAO,IAAI;AAAA,YACtB,MAAM,kCAAqB;AAAA,YAC3B,MAAM;AAAA,YACN;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF,SAAS,KAAK;AACZ,YAAQ,MAAM,qBAAqB,GAAG;AACtC,WAAO;AAAA,EACT;AACA,SAAO;AACT;",
  "names": ["BigNumber"]
}
