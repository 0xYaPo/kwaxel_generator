{
  "version": 3,
  "sources": ["../../../../src/providers/strategies/CrossWindowProviderStrategy/CrossWindowProviderStrategy.ts"],
  "sourcesContent": ["import { providerLabels } from 'constants/providerFactory.constants';\nimport { Message, Transaction } from 'lib/sdkCore';\nimport { IDAppProviderAccount } from 'lib/sdkDappUtils';\nimport { CrossWindowProvider } from 'lib/sdkWebWalletCrossWindowProvider';\nimport {\n  ProviderTypeEnum,\n  ProviderType\n} from 'providers/types/providerFactory.types';\nimport { networkSelector } from 'store/selectors/networkSelectors';\nimport { getState } from 'store/store';\nimport { ProviderErrorsEnum } from 'types/provider.types';\nimport { BaseProviderStrategy } from '../BaseProviderStrategy/BaseProviderStrategy';\nimport { signMessage } from '../helpers/signMessage/signMessage';\nimport { guardTransactions } from '../helpers/signTransactions/helpers/guardTransactions/guardTransactions';\n\ntype CrossWindowProviderProps = {\n  address?: string;\n  walletAddress?: string;\n};\n\nexport class CrossWindowProviderStrategy extends BaseProviderStrategy {\n  private readonly provider: CrossWindowProvider;\n  private readonly walletAddress?: string;\n\n  constructor(config?: CrossWindowProviderProps) {\n    super(config?.address);\n    this.walletAddress = config?.walletAddress;\n    this.provider = CrossWindowProvider.getInstance();\n    this._login = this.provider.login.bind(this.provider);\n  }\n\n  async init(): Promise<boolean> {\n    this.initializeAddress();\n    return this.initializeProvider();\n  }\n\n  private async initializeProvider() {\n    const network = networkSelector(getState());\n\n    const isProviderInitialized = await this.provider.init();\n\n    this.provider.setWalletUrl(this.walletAddress ?? network.walletAddress);\n\n    if (this.address) {\n      this.provider.setAddress(this.address);\n    }\n\n    return isProviderInitialized;\n  }\n\n  logout(): Promise<boolean> {\n    return this.provider.logout();\n  }\n\n  getType(): ProviderType {\n    return ProviderTypeEnum.crossWindow;\n  }\n\n  getAddress(): Promise<string | undefined> {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    return this.provider.getAddress();\n  }\n\n  setAccount(account: IDAppProviderAccount): void {\n    return this.provider.setAccount(account);\n  }\n\n  isInitialized(): boolean {\n    return this.provider.isInitialized();\n  }\n\n  cancelAction = async () => {\n    this.provider.cancelAction();\n  };\n\n  signTransactions = async (transactions: Transaction[]) => {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    const { onClose, manager } = await this.initSignState();\n\n    try {\n      const signedTransactions: Transaction[] =\n        (await this.provider.signTransactions(transactions)) ?? [];\n\n      const optionallyGuardedTransactions =\n        await guardTransactions(signedTransactions);\n\n      return optionallyGuardedTransactions;\n    } catch (error) {\n      await onClose({ shouldCancelAction: true });\n\n      throw error;\n    } finally {\n      manager.closeUI();\n    }\n  };\n\n  signMessage = async (message: Message) => {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    const signedMessage = await signMessage({\n      message,\n      handleSignMessage: this.provider.signMessage.bind(this.provider),\n      cancelAction: this.cancelAction,\n      providerType: providerLabels.crossWindow\n    });\n\n    return signedMessage;\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA+B;AAG/B,6CAAoC;AACpC,IAAAA,0BAGO;AACP,8BAAgC;AAChC,mBAAyB;AACzB,sBAAmC;AACnC,kCAAqC;AACrC,yBAA4B;AAC5B,+BAAkC;AAO3B,MAAM,oCAAoC,iDAAqB;AAAA,EAIpE,YAAY,QAAmC;AAC7C,UAAM,QAAQ,OAAO;AAiDvB,wBAAe,YAAY;AACzB,WAAK,SAAS,aAAa;AAAA,IAC7B;AAEA,4BAAmB,OAAO,iBAAgC;AACxD,UAAI,CAAC,KAAK,UAAU;AAClB,cAAM,IAAI,MAAM,mCAAmB,cAAc;AAAA,MACnD;AAEA,YAAM,EAAE,SAAS,QAAQ,IAAI,MAAM,KAAK,cAAc;AAEtD,UAAI;AACF,cAAM,qBACH,MAAM,KAAK,SAAS,iBAAiB,YAAY,KAAM,CAAC;AAE3D,cAAM,gCACJ,UAAM,4CAAkB,kBAAkB;AAE5C,eAAO;AAAA,MACT,SAAS,OAAO;AACd,cAAM,QAAQ,EAAE,oBAAoB,KAAK,CAAC;AAE1C,cAAM;AAAA,MACR,UAAE;AACA,gBAAQ,QAAQ;AAAA,MAClB;AAAA,IACF;AAEA,uBAAc,OAAO,YAAqB;AACxC,UAAI,CAAC,KAAK,UAAU;AAClB,cAAM,IAAI,MAAM,mCAAmB,cAAc;AAAA,MACnD;AAEA,YAAM,gBAAgB,UAAM,gCAAY;AAAA,QACtC;AAAA,QACA,mBAAmB,KAAK,SAAS,YAAY,KAAK,KAAK,QAAQ;AAAA,QAC/D,cAAc,KAAK;AAAA,QACnB,cAAc,sCAAe;AAAA,MAC/B,CAAC;AAED,aAAO;AAAA,IACT;AAzFE,SAAK,gBAAgB,QAAQ;AAC7B,SAAK,WAAW,2DAAoB,YAAY;AAChD,SAAK,SAAS,KAAK,SAAS,MAAM,KAAK,KAAK,QAAQ;AAAA,EACtD;AAAA,EAEA,MAAM,OAAyB;AAC7B,SAAK,kBAAkB;AACvB,WAAO,KAAK,mBAAmB;AAAA,EACjC;AAAA,EAEA,MAAc,qBAAqB;AACjC,UAAM,cAAU,6CAAgB,uBAAS,CAAC;AAE1C,UAAM,wBAAwB,MAAM,KAAK,SAAS,KAAK;AAEvD,SAAK,SAAS,aAAa,KAAK,iBAAiB,QAAQ,aAAa;AAEtE,QAAI,KAAK,SAAS;AAChB,WAAK,SAAS,WAAW,KAAK,OAAO;AAAA,IACvC;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,SAA2B;AACzB,WAAO,KAAK,SAAS,OAAO;AAAA,EAC9B;AAAA,EAEA,UAAwB;AACtB,WAAO,yCAAiB;AAAA,EAC1B;AAAA,EAEA,aAA0C;AACxC,QAAI,CAAC,KAAK,UAAU;AAClB,YAAM,IAAI,MAAM,mCAAmB,cAAc;AAAA,IACnD;AAEA,WAAO,KAAK,SAAS,WAAW;AAAA,EAClC;AAAA,EAEA,WAAW,SAAqC;AAC9C,WAAO,KAAK,SAAS,WAAW,OAAO;AAAA,EACzC;AAAA,EAEA,gBAAyB;AACvB,WAAO,KAAK,SAAS,cAAc;AAAA,EACrC;AA4CF;",
  "names": ["import_providerFactory"]
}
