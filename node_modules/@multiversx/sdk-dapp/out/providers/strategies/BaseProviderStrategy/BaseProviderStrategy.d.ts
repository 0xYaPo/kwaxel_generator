import { IProviderAccount } from '@multiversx/sdk-wallet-connect-provider/out';
import { Transaction, Message } from '../../../lib/sdkCore';
import { IDAppProviderOptions, IDAppProviderAccount } from '../../../lib/sdkDappUtils';
import { IProvider, ProviderType } from '../../../providers/types/providerFactory.types';
export type LoginOptionsTypes = {
    token?: string;
};
export declare abstract class BaseProviderStrategy<T extends ProviderType = ProviderType> implements IProvider<T> {
    protected address?: string;
    protected _login: ((options?: LoginOptionsTypes) => Promise<IProviderAccount | null>) | null;
    protected loginAbortController: AbortController | null;
    constructor(address?: string);
    abstract init(): Promise<boolean>;
    abstract logout(): Promise<boolean>;
    abstract getType(): T;
    abstract getAddress(): Promise<string | undefined>;
    abstract setAccount(account: IDAppProviderAccount): void;
    abstract isInitialized(): boolean;
    isConnected?(): boolean;
    getAccount(): IDAppProviderAccount | null;
    signTransaction(_transaction: Transaction, _options?: IDAppProviderOptions): Promise<Transaction | null>;
    abstract signTransactions(transactions: Transaction[], options?: IDAppProviderOptions): Promise<Transaction[] | null>;
    abstract signMessage(messageToSign: Message, options?: IDAppProviderOptions): Promise<Message | null>;
    login(options?: LoginOptionsTypes): Promise<{
        address: string;
        signature: string;
    }>;
    cancelLogin: () => void;
    protected loginOperation: (options?: LoginOptionsTypes) => Promise<{
        address: string;
        signature: string;
    }>;
    /**
     * Initializes the provider by setting the address if it is not already set.
     */
    protected initializeAddress: () => void;
    cancelAction: (() => Promise<void>) | undefined;
    /**
     * This method should be overridden by subclasses to handle cancel login event.
     */
    protected initSignState(): Promise<{
        onClose: ({ shouldCancelAction }?: {
            shouldCancelAction?: boolean | undefined;
        }) => Promise<void>;
        manager: import("../../../managers/internal/PendingTransactionsStateManager").PendingTransactionsStateManager;
    }>;
}
