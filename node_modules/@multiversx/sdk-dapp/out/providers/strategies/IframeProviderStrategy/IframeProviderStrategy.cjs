"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var IframeProviderStrategy_exports = {};
__export(IframeProviderStrategy_exports, {
  IframeProviderStrategy: () => IframeProviderStrategy
});
module.exports = __toCommonJS(IframeProviderStrategy_exports);
var import_providerFactory = require("../../../constants/providerFactory.constants");
var import_sdkWebWalletIframeProvider = require("../../../lib/sdkWebWalletIframeProvider");
var import_providerFactory2 = require("../../../providers/types/providerFactory.types");
var import_networkSelectors = require("../../../store/selectors/networkSelectors");
var import_store = require("../../../store/store");
var import_provider = require("../../../types/provider.types");
var import_BaseProviderStrategy = require("../BaseProviderStrategy/BaseProviderStrategy");
var import_signMessage = require("../helpers/signMessage/signMessage");
const IFRAME_PROVIDER_MAP = {
  passkey: import_providerFactory2.ProviderTypeEnum.passkey,
  metamask: import_providerFactory2.ProviderTypeEnum.metamask
};
class IframeProviderStrategy extends import_BaseProviderStrategy.BaseProviderStrategy {
  constructor({ type, address, walletUrl }) {
    super(address);
    this.cancelAction = async () => {
      this.provider.cancelAction();
    };
    this.signTransactions = async (transactions) => {
      if (!this.provider) {
        throw new Error(import_provider.ProviderErrorsEnum.notInitialized);
      }
      const { manager, onClose } = await this.initSignState();
      try {
        const signedTransactions = await this.provider.signTransactions(transactions);
        return signedTransactions;
      } catch (error) {
        await onClose({ shouldCancelAction: true });
        throw error;
      } finally {
        manager.closeUI();
      }
    };
    this.signMessage = async (message) => {
      if (!this.provider || !this.type) {
        throw new Error(import_provider.ProviderErrorsEnum.notInitialized);
      }
      const signedMessage = await (0, import_signMessage.signMessage)({
        message,
        handleSignMessage: this.provider.signMessage.bind(this.provider),
        cancelAction: this.cancelAction,
        providerType: import_providerFactory.providerLabels[this.type]
      });
      return signedMessage;
    };
    this.type = type;
    this.walletUrl = walletUrl ?? "";
    this.provider = import_sdkWebWalletIframeProvider.IframeProvider.getInstance();
    this._login = this.provider.login.bind(this.provider);
  }
  init() {
    this.initializeAddress();
    this.initializeWalletUrl();
    return this.initializeProvider();
  }
  initializeWalletUrl() {
    if (this.walletUrl) {
      return;
    }
    const network = (0, import_networkSelectors.networkSelector)((0, import_store.getState)());
    if (!network.iframeWalletAddress) {
      throw new Error("Invalid walletUrl");
    }
    this.walletUrl = network.iframeWalletAddress;
  }
  async initializeProvider() {
    await this.provider.init();
    if (this.address) {
      this.setAccount({ address: this.address });
    }
    this.provider.setLoginType(this.type);
    this.provider.setWalletUrl(this.walletUrl);
    return true;
  }
  logout() {
    return this.provider.logout();
  }
  getType() {
    return IFRAME_PROVIDER_MAP[this.type];
  }
  getAddress() {
    if (!this.provider) {
      throw new Error(import_provider.ProviderErrorsEnum.notInitialized);
    }
    return this.provider.getAddress();
  }
  setAccount(account) {
    this.provider.setAccount(account);
  }
  isInitialized() {
    return this.provider.isInitialized();
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  IframeProviderStrategy
});
//# sourceMappingURL=IframeProviderStrategy.cjs.map
