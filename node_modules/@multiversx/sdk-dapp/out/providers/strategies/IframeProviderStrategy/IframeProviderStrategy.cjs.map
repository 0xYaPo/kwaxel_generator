{
  "version": 3,
  "sources": ["../../../../src/providers/strategies/IframeProviderStrategy/IframeProviderStrategy.ts"],
  "sourcesContent": ["import { IframeLoginTypes } from '@multiversx/sdk-web-wallet-iframe-provider/out/constants';\n\nimport { providerLabels } from 'constants/providerFactory.constants';\nimport { Message, Transaction } from 'lib/sdkCore';\nimport { IDAppProviderAccount } from 'lib/sdkDappUtils';\nimport { IframeProvider } from 'lib/sdkWebWalletIframeProvider';\nimport {\n  ProviderTypeEnum,\n  ProviderType\n} from 'providers/types/providerFactory.types';\nimport { networkSelector } from 'store/selectors/networkSelectors';\nimport { getState } from 'store/store';\nimport { ProviderErrorsEnum } from 'types/provider.types';\nimport { IframeProviderType } from './types';\nimport { BaseProviderStrategy } from '../BaseProviderStrategy/BaseProviderStrategy';\nimport { signMessage } from '../helpers/signMessage/signMessage';\n\ntype IframeProviderStrategyType =\n  | typeof ProviderTypeEnum.passkey\n  | typeof ProviderTypeEnum.metamask;\n\nconst IFRAME_PROVIDER_MAP: Record<\n  IframeLoginTypes,\n  IframeProviderStrategyType\n> = {\n  passkey: ProviderTypeEnum.passkey,\n  metamask: ProviderTypeEnum.metamask\n};\n\nexport class IframeProviderStrategy extends BaseProviderStrategy {\n  private readonly provider: IframeProvider;\n  private readonly type: IframeLoginTypes;\n  private walletUrl: string;\n\n  constructor({ type, address, walletUrl }: IframeProviderType) {\n    super(address);\n    this.type = type;\n    this.walletUrl = walletUrl ?? '';\n    this.provider = IframeProvider.getInstance();\n    this._login = this.provider.login.bind(this.provider);\n  }\n\n  init(): Promise<boolean> {\n    this.initializeAddress();\n    this.initializeWalletUrl();\n    return this.initializeProvider();\n  }\n\n  private initializeWalletUrl() {\n    if (this.walletUrl) {\n      return;\n    }\n\n    const network = networkSelector(getState());\n\n    if (!network.iframeWalletAddress) {\n      throw new Error('Invalid walletUrl');\n    }\n\n    this.walletUrl = network.iframeWalletAddress;\n  }\n\n  private async initializeProvider() {\n    await this.provider.init();\n\n    if (this.address) {\n      this.setAccount({ address: this.address });\n    }\n\n    this.provider.setLoginType(this.type);\n    this.provider.setWalletUrl(this.walletUrl);\n\n    return true;\n  }\n\n  logout(): Promise<boolean> {\n    return this.provider.logout();\n  }\n\n  getType(): ProviderType {\n    return IFRAME_PROVIDER_MAP[this.type];\n  }\n\n  getAddress(): Promise<string | undefined> {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    return this.provider.getAddress();\n  }\n\n  setAccount(account: IDAppProviderAccount): void {\n    this.provider.setAccount(account);\n  }\n\n  isInitialized(): boolean {\n    return this.provider.isInitialized();\n  }\n\n  cancelAction = async () => {\n    this.provider.cancelAction();\n  };\n\n  signTransactions = async (transactions: Transaction[]) => {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    const { manager, onClose } = await this.initSignState();\n\n    try {\n      const signedTransactions: Transaction[] =\n        await this.provider.signTransactions(transactions);\n\n      return signedTransactions;\n    } catch (error) {\n      await onClose({ shouldCancelAction: true });\n      throw error;\n    } finally {\n      manager.closeUI();\n    }\n  };\n\n  signMessage = async (message: Message) => {\n    if (!this.provider || !this.type) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    const signedMessage = await signMessage({\n      message,\n      handleSignMessage: this.provider.signMessage.bind(this.provider),\n      cancelAction: this.cancelAction,\n      providerType: providerLabels[this.type]\n    });\n\n    return signedMessage;\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,6BAA+B;AAG/B,wCAA+B;AAC/B,IAAAA,0BAGO;AACP,8BAAgC;AAChC,mBAAyB;AACzB,sBAAmC;AAEnC,kCAAqC;AACrC,yBAA4B;AAM5B,MAAM,sBAGF;AAAA,EACF,SAAS,yCAAiB;AAAA,EAC1B,UAAU,yCAAiB;AAC7B;AAEO,MAAM,+BAA+B,iDAAqB;AAAA,EAK/D,YAAY,EAAE,MAAM,SAAS,UAAU,GAAuB;AAC5D,UAAM,OAAO;AAgEf,wBAAe,YAAY;AACzB,WAAK,SAAS,aAAa;AAAA,IAC7B;AAEA,4BAAmB,OAAO,iBAAgC;AACxD,UAAI,CAAC,KAAK,UAAU;AAClB,cAAM,IAAI,MAAM,mCAAmB,cAAc;AAAA,MACnD;AAEA,YAAM,EAAE,SAAS,QAAQ,IAAI,MAAM,KAAK,cAAc;AAEtD,UAAI;AACF,cAAM,qBACJ,MAAM,KAAK,SAAS,iBAAiB,YAAY;AAEnD,eAAO;AAAA,MACT,SAAS,OAAO;AACd,cAAM,QAAQ,EAAE,oBAAoB,KAAK,CAAC;AAC1C,cAAM;AAAA,MACR,UAAE;AACA,gBAAQ,QAAQ;AAAA,MAClB;AAAA,IACF;AAEA,uBAAc,OAAO,YAAqB;AACxC,UAAI,CAAC,KAAK,YAAY,CAAC,KAAK,MAAM;AAChC,cAAM,IAAI,MAAM,mCAAmB,cAAc;AAAA,MACnD;AAEA,YAAM,gBAAgB,UAAM,gCAAY;AAAA,QACtC;AAAA,QACA,mBAAmB,KAAK,SAAS,YAAY,KAAK,KAAK,QAAQ;AAAA,QAC/D,cAAc,KAAK;AAAA,QACnB,cAAc,sCAAe,KAAK,IAAI;AAAA,MACxC,CAAC;AAED,aAAO;AAAA,IACT;AApGE,SAAK,OAAO;AACZ,SAAK,YAAY,aAAa;AAC9B,SAAK,WAAW,iDAAe,YAAY;AAC3C,SAAK,SAAS,KAAK,SAAS,MAAM,KAAK,KAAK,QAAQ;AAAA,EACtD;AAAA,EAEA,OAAyB;AACvB,SAAK,kBAAkB;AACvB,SAAK,oBAAoB;AACzB,WAAO,KAAK,mBAAmB;AAAA,EACjC;AAAA,EAEQ,sBAAsB;AAC5B,QAAI,KAAK,WAAW;AAClB;AAAA,IACF;AAEA,UAAM,cAAU,6CAAgB,uBAAS,CAAC;AAE1C,QAAI,CAAC,QAAQ,qBAAqB;AAChC,YAAM,IAAI,MAAM,mBAAmB;AAAA,IACrC;AAEA,SAAK,YAAY,QAAQ;AAAA,EAC3B;AAAA,EAEA,MAAc,qBAAqB;AACjC,UAAM,KAAK,SAAS,KAAK;AAEzB,QAAI,KAAK,SAAS;AAChB,WAAK,WAAW,EAAE,SAAS,KAAK,QAAQ,CAAC;AAAA,IAC3C;AAEA,SAAK,SAAS,aAAa,KAAK,IAAI;AACpC,SAAK,SAAS,aAAa,KAAK,SAAS;AAEzC,WAAO;AAAA,EACT;AAAA,EAEA,SAA2B;AACzB,WAAO,KAAK,SAAS,OAAO;AAAA,EAC9B;AAAA,EAEA,UAAwB;AACtB,WAAO,oBAAoB,KAAK,IAAI;AAAA,EACtC;AAAA,EAEA,aAA0C;AACxC,QAAI,CAAC,KAAK,UAAU;AAClB,YAAM,IAAI,MAAM,mCAAmB,cAAc;AAAA,IACnD;AAEA,WAAO,KAAK,SAAS,WAAW;AAAA,EAClC;AAAA,EAEA,WAAW,SAAqC;AAC9C,SAAK,SAAS,WAAW,OAAO;AAAA,EAClC;AAAA,EAEA,gBAAyB;AACvB,WAAO,KAAK,SAAS,cAAc;AAAA,EACrC;AAwCF;",
  "names": ["import_providerFactory"]
}
