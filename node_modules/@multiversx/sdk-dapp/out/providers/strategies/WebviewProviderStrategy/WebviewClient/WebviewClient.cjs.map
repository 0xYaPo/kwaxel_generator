{
  "version": 3,
  "sources": ["../../../../../src/providers/strategies/WebviewProviderStrategy/WebviewClient/WebviewClient.ts"],
  "sourcesContent": ["import { safeWindow } from 'constants/index';\nimport { Address, Message, Transaction } from 'lib/sdkCore';\nimport {\n  WindowProviderRequestEnums,\n  WindowProviderResponseEnums,\n  RequestMessageType,\n  RequestPayloadType\n} from 'lib/sdkWebWalletCrossWindowProvider';\nimport { getAccountProvider } from 'providers/helpers/accountProvider';\nimport { accountSelector } from 'store/selectors';\nimport { getStore } from 'store/store';\n\ntype MessageHandler = (event: MessageEvent) => void;\n\ntype MessageEventType = {\n  event: MessageEvent<MessageType>;\n};\n\ntype MessageType =\n  | RequestMessageType\n  | { type: 'cancelAction'; payload: null }\n  | {\n      type: WindowProviderResponseEnums.cancelResponse;\n      payload: null;\n    };\n\nexport class WebviewClient {\n  private readonly handlers: Map<string, MessageHandler> = new Map();\n  private readonly store = getStore();\n  private isLoginInitiated = false;\n  private readonly handleLoginCancelled: () => Promise<void>;\n\n  constructor({ onLoginCancelled }: { onLoginCancelled: () => Promise<void> }) {\n    this.handleMessage = this.handleMessage.bind(this);\n    this.handleLoginCancelled = onLoginCancelled;\n  }\n\n  public startListening() {\n    safeWindow.addEventListener('message', this.handleMessage);\n  }\n\n  public stopListening() {\n    safeWindow.removeEventListener('message', this.handleMessage);\n  }\n\n  public registerEvent(type: string, handler: MessageHandler) {\n    this.handlers.set(type, handler);\n  }\n\n  public unregisterEvent(type: string) {\n    this.handlers.delete(type);\n  }\n\n  private async handleMessage(event: MessageEvent<MessageType>) {\n    const type = event.data?.type;\n\n    if (typeof type === 'string' && this.handlers.has(type)) {\n      const handler = this.handlers.get(type);\n      return handler?.(event);\n    }\n\n    switch (type) {\n      case WindowProviderRequestEnums.finalizeHandshakeRequest:\n        this.handshake({ event });\n        break;\n      case WindowProviderRequestEnums.signMessageRequest:\n        this.signMessage({ event, payload: event.data.payload });\n        break;\n      case WindowProviderRequestEnums.loginRequest:\n        this.isLoginInitiated = true;\n        this.login({ event, payload: event.data.payload });\n        break;\n      case WindowProviderRequestEnums.signTransactionsRequest:\n        this.signTransactions({ event });\n        break;\n      case WindowProviderResponseEnums.cancelResponse: // sent by web-wallet CrossWindow provider\n      case 'cancelAction': // sent by Extension provider\n        if (this.isLoginInitiated) {\n          await this.handleLoginCancelled();\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async login({\n    event,\n    payload\n  }: MessageEventType & { payload: RequestPayloadType['LOGIN_REQUEST'] }) {\n    const loginToken = payload?.token;\n\n    if (!loginToken) {\n      return;\n    }\n\n    try {\n      const { address } = accountSelector(this.store.getState());\n      const provider = getAccountProvider();\n\n      const messageToSign = new Message({\n        address: new Address(address),\n        data: new Uint8Array(Buffer.from(loginToken))\n      });\n\n      const signedMessage = await provider.signMessage(messageToSign);\n      const signature = signedMessage?.signature ?? '';\n\n      event.source?.postMessage(\n        {\n          type: WindowProviderResponseEnums.loginResponse,\n          payload: {\n            data: {\n              address,\n              signature: Buffer.from(signature).toString('hex')\n            }\n          }\n        },\n        { targetOrigin: event.origin }\n      );\n    } catch {\n      if (this.isLoginInitiated) {\n        this.handleLoginCancelled();\n      }\n    } finally {\n      this.isLoginInitiated = false;\n    }\n  }\n\n  private handshake({ event }: MessageEventType) {\n    const handshakeSession = Date.now().toString();\n\n    event.source?.postMessage(\n      {\n        type: WindowProviderResponseEnums.finalizeHandshakeResponse,\n        payload: { data: handshakeSession }\n      },\n      { targetOrigin: event.origin }\n    );\n  }\n\n  private async signMessage({\n    event,\n    payload\n  }: MessageEventType & {\n    payload: RequestPayloadType['SIGN_MESSAGE_REQUEST'];\n  }) {\n    const { address } = accountSelector(this.store.getState());\n    const { message } = payload;\n\n    try {\n      const messageToSign = new Message({\n        address: new Address(address),\n        data: new Uint8Array(Buffer.from(message))\n      });\n\n      const provider = getAccountProvider();\n      const signedMessage = await provider.signMessage(messageToSign);\n      const signature = signedMessage?.signature ?? '';\n\n      event.source?.postMessage(\n        {\n          type: WindowProviderResponseEnums.signMessageResponse,\n          payload: {\n            data: {\n              signature: Buffer.from(signature).toString('hex'),\n              status: 'signed'\n            }\n          }\n        },\n        { targetOrigin: event.origin }\n      );\n    } catch {\n      throw new Error('Could not sign message');\n    }\n  }\n\n  private async signTransactions({ event }: MessageEventType) {\n    const provider = getAccountProvider();\n    const { payload } = event.data;\n\n    if (!Array.isArray(payload)) {\n      return;\n    }\n\n    try {\n      const transactions = payload.map((plainTransactionObject) =>\n        Transaction.newFromPlainObject(plainTransactionObject)\n      );\n\n      const signedTx = await provider.signTransactions(transactions);\n      event.source?.postMessage(\n        {\n          type: WindowProviderResponseEnums.signTransactionsResponse,\n          payload: {\n            data: signedTx.map((tx) => tx.toPlainObject())\n          }\n        },\n        { targetOrigin: event.origin }\n      );\n    } catch {\n      throw new Error('Could not sign transactions');\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
