import { Message, Transaction } from '../../../lib/sdkCore';
import { IDAppProviderAccount } from '../../../lib/sdkDappUtils';
import { ProviderType } from '../../../providers/types/providerFactory.types';
import { BaseProviderStrategy } from '../BaseProviderStrategy/BaseProviderStrategy';
type WebviewProviderProps = {
    address?: string;
};
export declare class WebviewProviderStrategy extends BaseProviderStrategy {
    private readonly provider;
    constructor(config?: WebviewProviderProps);
    init(): Promise<boolean>;
    logout(): Promise<boolean>;
    getType(): ProviderType;
    getAddress(): Promise<string | undefined>;
    setAccount(account: IDAppProviderAccount): void;
    isInitialized(): boolean;
    private initializeProvider;
    cancelAction: () => Promise<void>;
    signTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;
    signMessage: (message: Message) => Promise<Message | null>;
}
export {};
