{
  "version": 3,
  "sources": ["../../../../src/providers/strategies/WebviewProviderStrategy/WebviewProviderStrategy.ts"],
  "sourcesContent": ["import { WebviewProvider } from '@multiversx/sdk-webview-provider/out/WebviewProvider';\nimport { safeWindow, version } from 'constants/window.constants';\nimport { Message, Transaction } from 'lib/sdkCore';\nimport { IDAppProviderAccount } from 'lib/sdkDappUtils';\nimport {\n  ProviderTypeEnum,\n  ProviderType\n} from 'providers/types/providerFactory.types';\nimport { ProviderErrorsEnum } from 'types/provider.types';\nimport { BaseProviderStrategy } from '../BaseProviderStrategy/BaseProviderStrategy';\n\ntype WebviewProviderProps = {\n  address?: string;\n};\n\nexport class WebviewProviderStrategy extends BaseProviderStrategy {\n  private readonly provider: WebviewProvider;\n\n  constructor(config?: WebviewProviderProps) {\n    super(config?.address);\n    this.provider = WebviewProvider.getInstance({\n      resetStateCallback: () => {\n        /* \n          Used in Hub to clear storage when logging out via the hub header.\n        */\n        safeWindow.localStorage?.clear?.();\n        safeWindow.sessionStorage?.clear?.();\n      }\n    });\n\n    this._login = this.provider.login.bind(this.provider);\n  }\n\n  async init(): Promise<boolean> {\n    this.initializeAddress();\n    return this.initializeProvider();\n  }\n\n  logout(): Promise<boolean> {\n    return this.provider.logout();\n  }\n\n  getType(): ProviderType {\n    return ProviderTypeEnum.webview;\n  }\n\n  getAddress(): Promise<string | undefined> {\n    throw new Error('Method not implemented.');\n  }\n\n  setAccount(account: IDAppProviderAccount): void {\n    return this.provider.setAccount(account);\n  }\n\n  isInitialized(): boolean {\n    return this.provider.isInitialized();\n  }\n\n  private async initializeProvider() {\n    const isInitialized = await this.provider.init(version);\n\n    if (this.address) {\n      this.setAccount({ address: this.address });\n    }\n\n    return isInitialized;\n  }\n\n  cancelAction = async () => {\n    this.provider.cancelAction();\n  };\n\n  signTransactions = async (transactions: Transaction[]) => {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    try {\n      const signedTransactions =\n        await this.provider.signTransactions(transactions);\n      return signedTransactions || [];\n    } catch (error) {\n      this.cancelAction();\n      throw error;\n    }\n  };\n\n  signMessage = async (message: Message) => {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    try {\n      const signedMessage = await this.provider.signMessage(message);\n      return signedMessage;\n    } catch (error) {\n      this.cancelAction();\n      throw error;\n    }\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAgC;AAChC,oBAAoC;AAGpC,6BAGO;AACP,sBAAmC;AACnC,kCAAqC;AAM9B,MAAM,gCAAgC,iDAAqB;AAAA,EAGhE,YAAY,QAA+B;AACzC,UAAM,QAAQ,OAAO;AAiDvB,wBAAe,YAAY;AACzB,WAAK,SAAS,aAAa;AAAA,IAC7B;AAEA,4BAAmB,OAAO,iBAAgC;AACxD,UAAI,CAAC,KAAK,UAAU;AAClB,cAAM,IAAI,MAAM,mCAAmB,cAAc;AAAA,MACnD;AAEA,UAAI;AACF,cAAM,qBACJ,MAAM,KAAK,SAAS,iBAAiB,YAAY;AACnD,eAAO,sBAAsB,CAAC;AAAA,MAChC,SAAS,OAAO;AACd,aAAK,aAAa;AAClB,cAAM;AAAA,MACR;AAAA,IACF;AAEA,uBAAc,OAAO,YAAqB;AACxC,UAAI,CAAC,KAAK,UAAU;AAClB,cAAM,IAAI,MAAM,mCAAmB,cAAc;AAAA,MACnD;AAEA,UAAI;AACF,cAAM,gBAAgB,MAAM,KAAK,SAAS,YAAY,OAAO;AAC7D,eAAO;AAAA,MACT,SAAS,OAAO;AACd,aAAK,aAAa;AAClB,cAAM;AAAA,MACR;AAAA,IACF;AA/EE,SAAK,WAAW,uCAAgB,YAAY;AAAA,MAC1C,oBAAoB,MAAM;AAIxB,iCAAW,cAAc,QAAQ;AACjC,iCAAW,gBAAgB,QAAQ;AAAA,MACrC;AAAA,IACF,CAAC;AAED,SAAK,SAAS,KAAK,SAAS,MAAM,KAAK,KAAK,QAAQ;AAAA,EACtD;AAAA,EAEA,MAAM,OAAyB;AAC7B,SAAK,kBAAkB;AACvB,WAAO,KAAK,mBAAmB;AAAA,EACjC;AAAA,EAEA,SAA2B;AACzB,WAAO,KAAK,SAAS,OAAO;AAAA,EAC9B;AAAA,EAEA,UAAwB;AACtB,WAAO,wCAAiB;AAAA,EAC1B;AAAA,EAEA,aAA0C;AACxC,UAAM,IAAI,MAAM,yBAAyB;AAAA,EAC3C;AAAA,EAEA,WAAW,SAAqC;AAC9C,WAAO,KAAK,SAAS,WAAW,OAAO;AAAA,EACzC;AAAA,EAEA,gBAAyB;AACvB,WAAO,KAAK,SAAS,cAAc;AAAA,EACrC;AAAA,EAEA,MAAc,qBAAqB;AACjC,UAAM,gBAAgB,MAAM,KAAK,SAAS,KAAK,qBAAO;AAEtD,QAAI,KAAK,SAAS;AAChB,WAAK,WAAW,EAAE,SAAS,KAAK,QAAQ,CAAC;AAAA,IAC3C;AAEA,WAAO;AAAA,EACT;AAkCF;",
  "names": []
}
