"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var WebviewProviderStrategy_exports = {};
__export(WebviewProviderStrategy_exports, {
  WebviewProviderStrategy: () => WebviewProviderStrategy
});
module.exports = __toCommonJS(WebviewProviderStrategy_exports);
var import_WebviewProvider = require("@multiversx/sdk-webview-provider/out/WebviewProvider");
var import_window = require("../../../constants/window.constants");
var import_providerFactory = require("../../../providers/types/providerFactory.types");
var import_provider = require("../../../types/provider.types");
var import_BaseProviderStrategy = require("../BaseProviderStrategy/BaseProviderStrategy");
class WebviewProviderStrategy extends import_BaseProviderStrategy.BaseProviderStrategy {
  constructor(config) {
    super(config?.address);
    this.cancelAction = async () => {
      this.provider.cancelAction();
    };
    this.signTransactions = async (transactions) => {
      if (!this.provider) {
        throw new Error(import_provider.ProviderErrorsEnum.notInitialized);
      }
      try {
        const signedTransactions = await this.provider.signTransactions(transactions);
        return signedTransactions || [];
      } catch (error) {
        this.cancelAction();
        throw error;
      }
    };
    this.signMessage = async (message) => {
      if (!this.provider) {
        throw new Error(import_provider.ProviderErrorsEnum.notInitialized);
      }
      try {
        const signedMessage = await this.provider.signMessage(message);
        return signedMessage;
      } catch (error) {
        this.cancelAction();
        throw error;
      }
    };
    this.provider = import_WebviewProvider.WebviewProvider.getInstance({
      resetStateCallback: () => {
        import_window.safeWindow.localStorage?.clear?.();
        import_window.safeWindow.sessionStorage?.clear?.();
      }
    });
    this._login = this.provider.login.bind(this.provider);
  }
  async init() {
    this.initializeAddress();
    return this.initializeProvider();
  }
  logout() {
    return this.provider.logout();
  }
  getType() {
    return import_providerFactory.ProviderTypeEnum.webview;
  }
  getAddress() {
    throw new Error("Method not implemented.");
  }
  setAccount(account) {
    return this.provider.setAccount(account);
  }
  isInitialized() {
    return this.provider.isInitialized();
  }
  async initializeProvider() {
    const isInitialized = await this.provider.init(import_window.version);
    if (this.address) {
      this.setAccount({ address: this.address });
    }
    return isInitialized;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  WebviewProviderStrategy
});
//# sourceMappingURL=WebviewProviderStrategy.cjs.map
