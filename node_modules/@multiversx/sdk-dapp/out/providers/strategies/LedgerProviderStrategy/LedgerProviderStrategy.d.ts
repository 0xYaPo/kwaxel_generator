import { Message, Transaction } from '../../../lib/sdkCore';
import { IDAppProviderAccount } from '../../../lib/sdkDappUtils';
import { ProviderType } from '../../../providers/types/providerFactory.types';
import { BaseProviderStrategy, LoginOptionsTypes } from '../BaseProviderStrategy/BaseProviderStrategy';
type LedgerProviderStrategyOptionsType = {
    anchor?: HTMLElement;
    shouldInitProvider?: boolean;
};
type LedgerProviderStrategyType = LedgerProviderStrategyOptionsType & {
    address?: string;
};
export declare class LedgerProviderStrategy extends BaseProviderStrategy {
    private provider;
    private config;
    private readonly options?;
    constructor({ address, anchor, shouldInitProvider }: LedgerProviderStrategyType);
    init(): Promise<boolean>;
    logout(): Promise<boolean>;
    getType(): ProviderType;
    getAddress(): Promise<string | undefined>;
    setAccount(account: IDAppProviderAccount): void;
    isInitialized(): boolean;
    private initializeProvider;
    private readonly ledgerLogin;
    loginOperation: (options?: LoginOptionsTypes) => Promise<{
        address: string;
        signature: string;
    }>;
    private readonly initLegderConnectManager;
    signTransactions: (transactions: Transaction[]) => Promise<Transaction[]>;
    signMessage: (message: Message) => Promise<Message>;
    /**
     * Makes sure the device is accessible and if not, tries to initialize a new provider
     */
    private readonly rebuildProvider;
}
export {};
