"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LedgerProviderStrategy_exports = {};
__export(LedgerProviderStrategy_exports, {
  LedgerProviderStrategy: () => LedgerProviderStrategy
});
module.exports = __toCommonJS(LedgerProviderStrategy_exports);
var import_transactions = require("../../../constants/transactions.constants");
var import_LedgerConnectStateManager = require("../../../managers/internal/LedgerConnectStateManager/LedgerConnectStateManager");
var import_getToastDataStateByStatus = require("../../../managers/internal/ToastManager/helpers/getToastDataStateByStatus");
var import_getIsLoggedIn = require("../../../methods/account/getIsLoggedIn");
var import_providerFactory = require("../../../providers/types/providerFactory.types");
var import_toastsActions = require("../../../store/actions/toasts/toastsActions");
var import_provider = require("../../../types/provider.types");
var import_helpers = require("./helpers");
var import_authenticateLedgerAccount = require("./helpers/authenticateLedgerAccount");
var import_initializeLedgerProvider = require("./helpers/initializeLedgerProvider");
var import_signLedgerMessage = require("./helpers/signLedgerMessage");
var import_BaseProviderStrategy = require("../BaseProviderStrategy/BaseProviderStrategy");
var import_signTransactions = require("../helpers/signTransactions/signTransactions");
class LedgerProviderStrategy extends import_BaseProviderStrategy.BaseProviderStrategy {
  constructor({
    address,
    anchor,
    shouldInitProvider
  }) {
    super(address);
    this.provider = null;
    this.config = null;
    this.ledgerLogin = async (options) => {
      if (!this.provider) {
        throw new Error(import_provider.ProviderErrorsEnum.notInitialized);
      }
      if (!options || typeof options.addressIndex !== "number") {
        throw new Error("Missing addressIndex for Ledger login");
      }
      const { address, signature } = await this.provider.login({
        addressIndex: options.addressIndex
      });
      return {
        address,
        signature: signature ?? ""
      };
    };
    this.loginOperation = async (options) => {
      if (!this.provider || !this.config) {
        throw new Error(import_provider.ProviderErrorsEnum.notInitialized);
      }
      return await (0, import_authenticateLedgerAccount.authenticateLedgerAccount)({
        options,
        config: this.config,
        provider: this.provider,
        login: this.ledgerLogin.bind(this)
      });
    };
    this.initLegderConnectManager = async (anchor) => {
      const shouldInitiateLogin = !(0, import_getIsLoggedIn.getIsLoggedIn)();
      if (!shouldInitiateLogin) {
        return;
      }
      const ledgerConnectManager = import_LedgerConnectStateManager.LedgerConnectStateManager.getInstance();
      await ledgerConnectManager.init(anchor);
    };
    this.signTransactions = async (transactions) => {
      if (!this.provider) {
        throw new Error(import_provider.ProviderErrorsEnum.notInitialized);
      }
      await this.rebuildProvider();
      const signedTransactions = await (0, import_signTransactions.signTransactions)({
        transactions,
        handleSign: this.provider.signTransactions.bind(this.provider)
      });
      return signedTransactions;
    };
    this.signMessage = async (message) => {
      if (!this.provider) {
        throw new Error(import_provider.ProviderErrorsEnum.notInitialized);
      }
      await this.rebuildProvider();
      const signedMessage = await (0, import_signLedgerMessage.signLedgerMessage)({
        message,
        handleSignMessage: this.provider.signMessage.bind(this.provider)
      });
      return signedMessage;
    };
    /**
     * Makes sure the device is accessible and if not, tries to initialize a new provider
     */
    this.rebuildProvider = async () => {
      try {
        await this.provider?.getAddress();
      } catch (_err) {
        try {
          const { ledgerProvider } = await (0, import_helpers.getLedgerProvider)({
            shouldInitProvider: true
          });
          this.provider = ledgerProvider;
        } catch (error) {
          (0, import_toastsActions.createCustomToast)({
            toastId: "ledger-provider-rebuild-error",
            duration: import_transactions.CANCEL_TRANSACTION_TOAST_DEFAULT_DURATION,
            icon: import_getToastDataStateByStatus.ToastIconsEnum.times,
            iconClassName: "warning",
            message: "Unlock your device & open the MultiversX App",
            title: "Ledger unavailable"
          });
          throw error;
        }
      }
    };
    this.options = { anchor, shouldInitProvider };
    this._login = this.ledgerLogin.bind(this);
  }
  async init() {
    try {
      this.initializeAddress();
      await this.initializeProvider();
    } catch {
      return false;
    }
    return true;
  }
  logout() {
    if (!this.provider) {
      throw new Error(import_provider.ProviderErrorsEnum.notInitialized);
    }
    return this.provider.logout();
  }
  getType() {
    return import_providerFactory.ProviderTypeEnum.ledger;
  }
  getAddress() {
    if (!this.provider) {
      throw new Error(import_provider.ProviderErrorsEnum.notInitialized);
    }
    return this.provider.getAddress();
  }
  setAccount(account) {
    return this.provider?.setAccount(account);
  }
  isInitialized() {
    if (!this.provider) {
      throw new Error(import_provider.ProviderErrorsEnum.notInitialized);
    }
    return this.provider.isInitialized();
  }
  async initializeProvider() {
    await this.initLegderConnectManager(this.options?.anchor);
    const ledgerConnectManager = import_LedgerConnectStateManager.LedgerConnectStateManager.getInstance();
    const { ledgerProvider, ledgerConfig } = await new Promise(
      (resolve, reject) => (0, import_initializeLedgerProvider.initializeLedgerProvider)({
        manager: ledgerConnectManager,
        resolve,
        reject,
        shouldInitProvider: this.options?.shouldInitProvider
      })
    );
    this.config = ledgerConfig;
    this.provider = ledgerProvider;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LedgerProviderStrategy
});
//# sourceMappingURL=LedgerProviderStrategy.cjs.map
