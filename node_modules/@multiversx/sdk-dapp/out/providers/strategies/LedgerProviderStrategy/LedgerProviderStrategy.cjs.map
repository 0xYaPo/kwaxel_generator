{
  "version": 3,
  "sources": ["../../../../src/providers/strategies/LedgerProviderStrategy/LedgerProviderStrategy.ts"],
  "sourcesContent": ["import { HWProvider } from '@multiversx/sdk-hw-provider';\n\nimport { CANCEL_TRANSACTION_TOAST_DEFAULT_DURATION } from 'constants/transactions.constants';\nimport { Message, Transaction } from 'lib/sdkCore';\nimport { IDAppProviderAccount } from 'lib/sdkDappUtils';\nimport { LedgerConnectStateManager } from 'managers/internal/LedgerConnectStateManager/LedgerConnectStateManager';\nimport { ToastIconsEnum } from 'managers/internal/ToastManager/helpers/getToastDataStateByStatus';\nimport { getIsLoggedIn } from 'methods/account/getIsLoggedIn';\nimport {\n  ProviderTypeEnum,\n  ProviderType\n} from 'providers/types/providerFactory.types';\nimport { createCustomToast } from 'store/actions/toasts/toastsActions';\nimport { ProviderErrorsEnum } from 'types/provider.types';\nimport { getLedgerProvider } from './helpers';\nimport { authenticateLedgerAccount } from './helpers/authenticateLedgerAccount';\nimport { initializeLedgerProvider } from './helpers/initializeLedgerProvider';\nimport { signLedgerMessage } from './helpers/signLedgerMessage';\nimport { LedgerConfigType } from './types/ledgerProvider.types';\nimport {\n  BaseProviderStrategy,\n  LoginOptionsTypes\n} from '../BaseProviderStrategy/BaseProviderStrategy';\nimport { signTransactions } from '../helpers/signTransactions/signTransactions';\n\ntype LedgerProviderStrategyOptionsType = {\n  anchor?: HTMLElement;\n  shouldInitProvider?: boolean;\n};\n\ntype LedgerProviderStrategyType = LedgerProviderStrategyOptionsType & {\n  address?: string;\n};\n\nexport class LedgerProviderStrategy extends BaseProviderStrategy {\n  private provider: HWProvider | null = null;\n  private config: LedgerConfigType | null = null;\n  private readonly options?: LedgerProviderStrategyOptionsType;\n\n  constructor({\n    address,\n    anchor,\n    shouldInitProvider\n  }: LedgerProviderStrategyType) {\n    super(address);\n    this.options = { anchor, shouldInitProvider };\n    this._login = this.ledgerLogin.bind(this);\n  }\n\n  async init(): Promise<boolean> {\n    try {\n      this.initializeAddress();\n      await this.initializeProvider();\n    } catch {\n      return false;\n    }\n\n    return true;\n  }\n\n  logout(): Promise<boolean> {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    return this.provider.logout();\n  }\n\n  getType(): ProviderType {\n    return ProviderTypeEnum.ledger;\n  }\n\n  getAddress(): Promise<string | undefined> {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    return this.provider.getAddress();\n  }\n\n  setAccount(account: IDAppProviderAccount): void {\n    return this.provider?.setAccount(account);\n  }\n\n  isInitialized(): boolean {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    return this.provider.isInitialized();\n  }\n\n  private async initializeProvider() {\n    await this.initLegderConnectManager(this.options?.anchor);\n    const ledgerConnectManager = LedgerConnectStateManager.getInstance();\n\n    const { ledgerProvider, ledgerConfig } = await new Promise<\n      Awaited<ReturnType<typeof getLedgerProvider>>\n    >((resolve, reject) =>\n      initializeLedgerProvider({\n        manager: ledgerConnectManager,\n        resolve,\n        reject,\n        shouldInitProvider: this.options?.shouldInitProvider\n      })\n    );\n\n    this.config = ledgerConfig;\n    this.provider = ledgerProvider;\n  }\n\n  private readonly ledgerLogin = async (\n    options?: LoginOptionsTypes & { addressIndex?: number }\n  ): Promise<{ address: string; signature: string }> => {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n    if (!options || typeof options.addressIndex !== 'number') {\n      throw new Error('Missing addressIndex for Ledger login');\n    }\n    const { address, signature } = await this.provider.login({\n      addressIndex: options.addressIndex\n    });\n    return {\n      address,\n      signature: signature ?? ''\n    };\n  };\n\n  public override loginOperation = async (options?: LoginOptionsTypes) => {\n    if (!this.provider || !this.config) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    return await authenticateLedgerAccount({\n      options,\n      config: this.config,\n      provider: this.provider,\n      login: this.ledgerLogin.bind(this)\n    });\n  };\n\n  private readonly initLegderConnectManager = async (anchor?: HTMLElement) => {\n    const shouldInitiateLogin = !getIsLoggedIn();\n\n    if (!shouldInitiateLogin) {\n      return;\n    }\n\n    const ledgerConnectManager = LedgerConnectStateManager.getInstance();\n    await ledgerConnectManager.init(anchor);\n  };\n\n  signTransactions = async (transactions: Transaction[]) => {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    await this.rebuildProvider();\n\n    const signedTransactions = await signTransactions({\n      transactions,\n      handleSign: this.provider.signTransactions.bind(this.provider)\n    });\n\n    return signedTransactions;\n  };\n\n  signMessage = async (message: Message): Promise<Message> => {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    await this.rebuildProvider();\n\n    const signedMessage = await signLedgerMessage({\n      message,\n      handleSignMessage: this.provider.signMessage.bind(this.provider)\n    });\n\n    return signedMessage;\n  };\n\n  /**\n   * Makes sure the device is accessible and if not, tries to initialize a new provider\n   */\n  private readonly rebuildProvider = async () => {\n    try {\n      await this.provider?.getAddress(); // can communicate with device\n    } catch (_err) {\n      try {\n        const { ledgerProvider } = await getLedgerProvider({\n          shouldInitProvider: true\n        });\n        this.provider = ledgerProvider;\n      } catch (error) {\n        createCustomToast({\n          toastId: 'ledger-provider-rebuild-error',\n          duration: CANCEL_TRANSACTION_TOAST_DEFAULT_DURATION,\n          icon: ToastIconsEnum.times,\n          iconClassName: 'warning',\n          message: 'Unlock your device & open the MultiversX App',\n          title: 'Ledger unavailable'\n        });\n        throw error;\n      }\n    }\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
