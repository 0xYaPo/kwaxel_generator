"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getLedgerVersionOptions_exports = {};
__export(getLedgerVersionOptions_exports, {
  default: () => getLedgerVersionOptions_default,
  getLedgerVersionOptions: () => getLedgerVersionOptions
});
module.exports = __toCommonJS(getLedgerVersionOptions_exports);
var import_constants = require("../../../../constants/index");
function compareVersions(a, b) {
  let i, diff;
  const regExStrip0 = /(\.0+)+$/;
  const segmentsA = a.replace(regExStrip0, "").split(".");
  const segmentsB = b.replace(regExStrip0, "").split(".");
  const l = Math.min(segmentsA.length, segmentsB.length);
  for (i = 0; i < l; i++) {
    diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);
    if (diff) {
      return diff;
    }
  }
  return segmentsA.length - segmentsB.length;
}
function getLedgerVersionOptions(version) {
  const sortedVersions = [
    import_constants.LEDGER_MULTI_ACCOUNT_MINIMUM_VERSION,
    import_constants.LEDGER_HASH_SIGN_MINIMUM_VERSION,
    import_constants.LEDGER_SIGN_AUTH_TOKEN_MINIMUM_VERSION,
    import_constants.LEDGER_WITH_WHITELISTED_TOKENS_MINIMUM_VERSION,
    import_constants.LEDGER_WITH_GUARDIANS_MINIMUM_VERSION,
    import_constants.LEDGER_WITH_USERNAMES_MINIMUM_VERSION,
    version
  ].sort((a, b) => compareVersions(a, b));
  const indexOfMultiAccount = sortedVersions.indexOf(
    import_constants.LEDGER_MULTI_ACCOUNT_MINIMUM_VERSION
  );
  const indexOfHashSign = sortedVersions.indexOf(
    import_constants.LEDGER_HASH_SIGN_MINIMUM_VERSION
  );
  const indexOfSignAuthToken = sortedVersions.indexOf(
    import_constants.LEDGER_SIGN_AUTH_TOKEN_MINIMUM_VERSION
  );
  const indexOfWhitelistedTokens = sortedVersions.indexOf(
    import_constants.LEDGER_WITH_WHITELISTED_TOKENS_MINIMUM_VERSION
  );
  const indexOfGuardians = sortedVersions.indexOf(
    import_constants.LEDGER_WITH_GUARDIANS_MINIMUM_VERSION
  );
  const indexOfUsernames = sortedVersions.indexOf(
    import_constants.LEDGER_WITH_USERNAMES_MINIMUM_VERSION
  );
  const indexOfVersion = sortedVersions.indexOf(version);
  return {
    ledgerWithMultiAccount: indexOfVersion >= indexOfMultiAccount,
    ledgerWithHashSign: indexOfVersion >= indexOfHashSign,
    ledgerWithSignAuthToken: indexOfVersion >= indexOfSignAuthToken,
    ledgerWithWhitelistedTokens: indexOfVersion >= indexOfWhitelistedTokens,
    ledgerWithGuardians: indexOfVersion >= indexOfGuardians,
    ledgerWithUsernames: indexOfVersion >= indexOfUsernames
  };
}
var getLedgerVersionOptions_default = getLedgerVersionOptions;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getLedgerVersionOptions
});
//# sourceMappingURL=getLedgerVersionOptions.cjs.map
