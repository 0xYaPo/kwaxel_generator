{
  "version": 3,
  "sources": ["../../../../../src/providers/strategies/LedgerProviderStrategy/helpers/getLedgerProvider.ts"],
  "sourcesContent": ["import { HWProvider } from '@multiversx/sdk-hw-provider';\nimport { getIsLoggedIn } from 'methods/account/getIsLoggedIn';\nimport { getAccountProvider } from 'providers/helpers/accountProvider';\nimport { ledgerAccountSelector } from 'store/selectors/accountSelectors';\nimport { ledgerLoginSelector } from 'store/selectors/loginInfoSelectors';\nimport { getState } from 'store/store';\nimport { getLedgerConfiguration } from './getLedgerConfiguration';\n\nexport async function getLedgerProvider(props?: {\n  shouldInitProvider?: boolean; // provider will be initialized if not logged in\n}) {\n  const isLoggedIn = getIsLoggedIn();\n  const shouldInitProvider = props?.shouldInitProvider || !isLoggedIn;\n  const ledgerLogin = ledgerLoginSelector(getState());\n  const ledgerAccount = ledgerAccountSelector(getState());\n  const provider = getAccountProvider();\n\n  const ledgerProvider = new HWProvider();\n\n  const initHWProvider = async () => {\n    const hasAddressIndex = ledgerLogin?.index != null;\n\n    if (provider instanceof HWProvider && provider.isInitialized()) {\n      if (hasAddressIndex) {\n        await provider.setAddressIndex(ledgerLogin.index);\n      }\n\n      return provider;\n    }\n\n    if (shouldInitProvider) {\n      const isInitialized = await ledgerProvider.init();\n      if (!isInitialized) {\n        throw new Error('Failed to initialize Ledger Provider');\n      }\n    }\n\n    if (hasAddressIndex) {\n      await ledgerProvider.setAddressIndex(ledgerLogin.index);\n    }\n\n    return ledgerProvider;\n  };\n\n  try {\n    if (!shouldInitProvider && ledgerAccount) {\n      return {\n        ledgerProvider,\n        ledgerConfig: {\n          version: ledgerAccount.version,\n          dataEnabled: ledgerAccount.hasContractDataEnabled\n        }\n      };\n    }\n\n    const initializedLedgerProvider = await initHWProvider();\n    const ledgerConfig = await getLedgerConfiguration(\n      initializedLedgerProvider\n    );\n    return { ledgerProvider: initializedLedgerProvider, ledgerConfig };\n  } catch (err) {\n    console.error('Could not initialize ledger app', err);\n\n    throw err;\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAA2B;AAC3B,2BAA8B;AAC9B,6BAAmC;AACnC,8BAAsC;AACtC,gCAAoC;AACpC,mBAAyB;AACzB,oCAAuC;AAEvC,eAAsB,kBAAkB,OAErC;AACD,QAAM,iBAAa,oCAAc;AACjC,QAAM,qBAAqB,OAAO,sBAAsB,CAAC;AACzD,QAAM,kBAAc,mDAAoB,uBAAS,CAAC;AAClD,QAAM,oBAAgB,mDAAsB,uBAAS,CAAC;AACtD,QAAM,eAAW,2CAAmB;AAEpC,QAAM,iBAAiB,IAAI,kCAAW;AAEtC,QAAM,iBAAiB,YAAY;AACjC,UAAM,kBAAkB,aAAa,SAAS;AAE9C,QAAI,oBAAoB,qCAAc,SAAS,cAAc,GAAG;AAC9D,UAAI,iBAAiB;AACnB,cAAM,SAAS,gBAAgB,YAAY,KAAK;AAAA,MAClD;AAEA,aAAO;AAAA,IACT;AAEA,QAAI,oBAAoB;AACtB,YAAM,gBAAgB,MAAM,eAAe,KAAK;AAChD,UAAI,CAAC,eAAe;AAClB,cAAM,IAAI,MAAM,sCAAsC;AAAA,MACxD;AAAA,IACF;AAEA,QAAI,iBAAiB;AACnB,YAAM,eAAe,gBAAgB,YAAY,KAAK;AAAA,IACxD;AAEA,WAAO;AAAA,EACT;AAEA,MAAI;AACF,QAAI,CAAC,sBAAsB,eAAe;AACxC,aAAO;AAAA,QACL;AAAA,QACA,cAAc;AAAA,UACZ,SAAS,cAAc;AAAA,UACvB,aAAa,cAAc;AAAA,QAC7B;AAAA,MACF;AAAA,IACF;AAEA,UAAM,4BAA4B,MAAM,eAAe;AACvD,UAAM,eAAe,UAAM;AAAA,MACzB;AAAA,IACF;AACA,WAAO,EAAE,gBAAgB,2BAA2B,aAAa;AAAA,EACnE,SAAS,KAAK;AACZ,YAAQ,MAAM,mCAAmC,GAAG;AAEpD,UAAM;AAAA,EACR;AACF;",
  "names": []
}
