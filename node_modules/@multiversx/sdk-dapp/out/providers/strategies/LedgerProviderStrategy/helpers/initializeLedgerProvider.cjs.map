{
  "version": 3,
  "sources": ["../../../../../src/providers/strategies/LedgerProviderStrategy/helpers/initializeLedgerProvider.ts"],
  "sourcesContent": ["import { LedgerConnectStateManager } from 'managers/internal/LedgerConnectStateManager/LedgerConnectStateManager';\nimport { getIsLoggedIn } from 'methods/account/getIsLoggedIn';\nimport { getLedgerErrorCodes } from './getLedgerErrorCodes';\nimport { getLedgerProvider } from './getLedgerProvider';\n\ntype InitializeLedgerProviderType = {\n  manager: LedgerConnectStateManager | null;\n  resolve: (value: Awaited<ReturnType<typeof getLedgerProvider>>) => void;\n  reject: (reason?: string) => void;\n  shouldInitProvider?: boolean;\n};\n\nconst failInitializeErrorText = 'Check if the MultiversX App is open on Ledger';\n\nexport async function initializeLedgerProvider({\n  manager,\n  resolve,\n  reject,\n  shouldInitProvider\n}: InitializeLedgerProviderType) {\n  const shouldInitiateLogin = !getIsLoggedIn();\n\n  // Calls itself to handle retry logic if the user needs to reconnect to the Ledger provider.\n  const handleRetry = () =>\n    initializeLedgerProvider({ manager, resolve, reject, shouldInitProvider });\n\n  const handleCancel = () => reject('Device unavailable');\n\n  try {\n    manager?.updateAccountScreen({\n      isLoading: true\n    });\n\n    if (manager && shouldInitiateLogin) {\n      manager.subscribeToProviderInit({ handleRetry, handleCancel });\n    }\n\n    const data = await getLedgerProvider({ shouldInitProvider });\n\n    if (manager && shouldInitiateLogin) {\n      manager.unsubscribeFromProviderInit({ handleRetry, handleCancel });\n    }\n\n    resolve(data);\n  } catch (err) {\n    if (!shouldInitiateLogin) {\n      throw err;\n    }\n\n    const { errorMessage, defaultErrorMessage } = getLedgerErrorCodes(err);\n    manager?.updateConnectScreen({\n      error: errorMessage ?? defaultErrorMessage ?? failInitializeErrorText\n    });\n\n    if (manager) {\n      manager.subscribeToProviderInit({ handleRetry, handleCancel });\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,2BAA8B;AAC9B,iCAAoC;AACpC,+BAAkC;AASlC,MAAM,0BAA0B;AAEhC,eAAsB,yBAAyB;AAAA,EAC7C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAiC;AAC/B,QAAM,sBAAsB,KAAC,oCAAc;AAG3C,QAAM,cAAc,MAClB,yBAAyB,EAAE,SAAS,SAAS,QAAQ,mBAAmB,CAAC;AAE3E,QAAM,eAAe,MAAM,OAAO,oBAAoB;AAEtD,MAAI;AACF,aAAS,oBAAoB;AAAA,MAC3B,WAAW;AAAA,IACb,CAAC;AAED,QAAI,WAAW,qBAAqB;AAClC,cAAQ,wBAAwB,EAAE,aAAa,aAAa,CAAC;AAAA,IAC/D;AAEA,UAAM,OAAO,UAAM,4CAAkB,EAAE,mBAAmB,CAAC;AAE3D,QAAI,WAAW,qBAAqB;AAClC,cAAQ,4BAA4B,EAAE,aAAa,aAAa,CAAC;AAAA,IACnE;AAEA,YAAQ,IAAI;AAAA,EACd,SAAS,KAAK;AACZ,QAAI,CAAC,qBAAqB;AACxB,YAAM;AAAA,IACR;AAEA,UAAM,EAAE,cAAc,oBAAoB,QAAI,gDAAoB,GAAG;AACrE,aAAS,oBAAoB;AAAA,MAC3B,OAAO,gBAAgB,uBAAuB;AAAA,IAChD,CAAC;AAED,QAAI,SAAS;AACX,cAAQ,wBAAwB,EAAE,aAAa,aAAa,CAAC;AAAA,IAC/D;AAAA,EACF;AACF;",
  "names": []
}
