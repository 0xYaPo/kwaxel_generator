"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var initializeLedgerProvider_exports = {};
__export(initializeLedgerProvider_exports, {
  initializeLedgerProvider: () => initializeLedgerProvider
});
module.exports = __toCommonJS(initializeLedgerProvider_exports);
var import_getIsLoggedIn = require("../../../../methods/account/getIsLoggedIn");
var import_getLedgerErrorCodes = require("./getLedgerErrorCodes");
var import_getLedgerProvider = require("./getLedgerProvider");
const failInitializeErrorText = "Check if the MultiversX App is open on Ledger";
async function initializeLedgerProvider({
  manager,
  resolve,
  reject,
  shouldInitProvider
}) {
  const shouldInitiateLogin = !(0, import_getIsLoggedIn.getIsLoggedIn)();
  const handleRetry = () => initializeLedgerProvider({ manager, resolve, reject, shouldInitProvider });
  const handleCancel = () => reject("Device unavailable");
  try {
    manager?.updateAccountScreen({
      isLoading: true
    });
    if (manager && shouldInitiateLogin) {
      manager.subscribeToProviderInit({ handleRetry, handleCancel });
    }
    const data = await (0, import_getLedgerProvider.getLedgerProvider)({ shouldInitProvider });
    if (manager && shouldInitiateLogin) {
      manager.unsubscribeFromProviderInit({ handleRetry, handleCancel });
    }
    resolve(data);
  } catch (err) {
    if (!shouldInitiateLogin) {
      throw err;
    }
    const { errorMessage, defaultErrorMessage } = (0, import_getLedgerErrorCodes.getLedgerErrorCodes)(err);
    manager?.updateConnectScreen({
      error: errorMessage ?? defaultErrorMessage ?? failInitializeErrorText
    });
    if (manager) {
      manager.subscribeToProviderInit({ handleRetry, handleCancel });
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  initializeLedgerProvider
});
//# sourceMappingURL=initializeLedgerProvider.cjs.map
