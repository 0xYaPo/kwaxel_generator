"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var authenticateLedgerAccount_exports = {};
__export(authenticateLedgerAccount_exports, {
  authenticateLedgerAccount: () => authenticateLedgerAccount
});
module.exports = __toCommonJS(authenticateLedgerAccount_exports);
var import_bignumber = require("bignumber.js");
var import_apiCalls = require("../../../../apiCalls");
var import_LedgerConnectStateManager = require("../../../../managers/internal/LedgerConnectStateManager/LedgerConnectStateManager");
var import_getExplorerAddress = require("../../../../methods/network/getExplorerAddress");
var import_providerFactory = require("../../../../providers/types/providerFactory.types");
var import_actions = require("../../../../store/actions");
var import_loginInfoActions = require("../../../../store/actions/loginInfo/loginInfoActions");
var import_getExplorerLink = require("../../../../utils/transactions/getExplorerLink");
var import_getAuthTokenText = require("./getAuthTokenText");
var import_updateAccountsList = require("./updateAccountsList");
async function authenticateLedgerAccount({
  options,
  config,
  provider,
  login
}) {
  const manager = import_LedgerConnectStateManager.LedgerConnectStateManager.getInstance();
  const explorerAddress = (0, import_getExplorerAddress.getExplorerAddress)();
  const authData = (0, import_getAuthTokenText.getAuthTokenText)({
    loginToken: options?.token,
    version: config.version
  });
  const accountsListProps = {
    manager,
    provider
  };
  await (0, import_updateAccountsList.updateAccountsList)(accountsListProps);
  const selectedAccount = await new Promise(async function(resolve, reject) {
    async function handleGoToPage(page) {
      const addressesPerPage = manager ? manager.addressesPerPage ?? 1 : 1;
      const startIndex = new import_bignumber.BigNumber(page - 1).times(addressesPerPage);
      manager?.updateStartIndex(Math.max(0, parseInt(startIndex.toString())));
      await (0, import_updateAccountsList.updateAccountsList)(accountsListProps);
    }
    async function handleAccessWallet(payload) {
      if (!provider || !login) {
        return;
      }
      manager?.updateConfirmScreen({
        ...authData,
        selectedAddress: payload.selectedAddress,
        explorerLink: (0, import_getExplorerLink.getExplorerLink)({
          to: `/${import_apiCalls.ACCOUNTS_ENDPOINT}/${payload.selectedAddress}`,
          explorerAddress
        })
      });
      try {
        const loginInfo = options?.token ? await provider.tokenLogin({
          token: Buffer.from(`${options?.token}{}`),
          addressIndex: payload.addressIndex
        }) : await login({
          addressIndex: payload.addressIndex
        });
        resolve({
          address: loginInfo.address,
          signature: loginInfo.signature ? loginInfo.signature.toString("hex") : "",
          addressIndex: payload.addressIndex
        });
      } catch (err) {
        console.error("User rejected login:", err);
        const shouldGoBack = Boolean(manager?.getConfirmScreenData());
        if (shouldGoBack) {
          await (0, import_updateAccountsList.updateAccountsList)(accountsListProps);
        }
      }
    }
    async function handleCancel() {
      await (0, import_updateAccountsList.updateAccountsList)(accountsListProps);
      manager.unsubscribeFromAuthEvents({
        handleCancel,
        handleAccessWallet,
        handleGoToPage
      });
      reject("User cancelled login");
    }
    manager.subscribeToAuthEvents({
      handleCancel,
      handleAccessWallet,
      handleGoToPage
    });
  });
  const { version, dataEnabled } = config;
  (0, import_loginInfoActions.setLedgerLogin)({
    index: selectedAccount.addressIndex,
    loginType: import_providerFactory.ProviderTypeEnum.ledger
  });
  (0, import_actions.setLedgerAccount)({
    address: selectedAccount.address,
    index: selectedAccount.addressIndex,
    version,
    hasContractDataEnabled: dataEnabled
  });
  return {
    address: selectedAccount.address,
    signature: selectedAccount.signature
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  authenticateLedgerAccount
});
//# sourceMappingURL=authenticateLedgerAccount.cjs.map
