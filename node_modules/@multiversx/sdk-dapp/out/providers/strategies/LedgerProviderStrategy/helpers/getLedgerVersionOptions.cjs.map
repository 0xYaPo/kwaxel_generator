{
  "version": 3,
  "sources": ["../../../../../src/providers/strategies/LedgerProviderStrategy/helpers/getLedgerVersionOptions.ts"],
  "sourcesContent": ["import {\n  LEDGER_HASH_SIGN_MINIMUM_VERSION,\n  LEDGER_MULTI_ACCOUNT_MINIMUM_VERSION,\n  LEDGER_SIGN_AUTH_TOKEN_MINIMUM_VERSION,\n  LEDGER_WITH_WHITELISTED_TOKENS_MINIMUM_VERSION,\n  LEDGER_WITH_GUARDIANS_MINIMUM_VERSION,\n  LEDGER_WITH_USERNAMES_MINIMUM_VERSION\n} from 'constants/index';\n\nfunction compareVersions(a: string, b: string) {\n  let i, diff;\n  const regExStrip0 = /(\\.0+)+$/;\n  const segmentsA = a.replace(regExStrip0, '').split('.');\n  const segmentsB = b.replace(regExStrip0, '').split('.');\n  const l = Math.min(segmentsA.length, segmentsB.length);\n\n  for (i = 0; i < l; i++) {\n    diff = parseInt(segmentsA[i], 10) - parseInt(segmentsB[i], 10);\n    if (diff) {\n      return diff;\n    }\n  }\n  return segmentsA.length - segmentsB.length;\n}\n\nexport function getLedgerVersionOptions(version: string) {\n  const sortedVersions = [\n    LEDGER_MULTI_ACCOUNT_MINIMUM_VERSION,\n    LEDGER_HASH_SIGN_MINIMUM_VERSION,\n    LEDGER_SIGN_AUTH_TOKEN_MINIMUM_VERSION,\n    LEDGER_WITH_WHITELISTED_TOKENS_MINIMUM_VERSION,\n    LEDGER_WITH_GUARDIANS_MINIMUM_VERSION,\n    LEDGER_WITH_USERNAMES_MINIMUM_VERSION,\n    version\n  ].sort((a, b) => compareVersions(a, b));\n\n  const indexOfMultiAccount = sortedVersions.indexOf(\n    LEDGER_MULTI_ACCOUNT_MINIMUM_VERSION\n  );\n  const indexOfHashSign = sortedVersions.indexOf(\n    LEDGER_HASH_SIGN_MINIMUM_VERSION\n  );\n  const indexOfSignAuthToken = sortedVersions.indexOf(\n    LEDGER_SIGN_AUTH_TOKEN_MINIMUM_VERSION\n  );\n  const indexOfWhitelistedTokens = sortedVersions.indexOf(\n    LEDGER_WITH_WHITELISTED_TOKENS_MINIMUM_VERSION\n  );\n  const indexOfGuardians = sortedVersions.indexOf(\n    LEDGER_WITH_GUARDIANS_MINIMUM_VERSION\n  );\n  const indexOfUsernames = sortedVersions.indexOf(\n    LEDGER_WITH_USERNAMES_MINIMUM_VERSION\n  );\n  const indexOfVersion = sortedVersions.indexOf(version);\n\n  return {\n    ledgerWithMultiAccount: indexOfVersion >= indexOfMultiAccount,\n    ledgerWithHashSign: indexOfVersion >= indexOfHashSign,\n    ledgerWithSignAuthToken: indexOfVersion >= indexOfSignAuthToken,\n    ledgerWithWhitelistedTokens: indexOfVersion >= indexOfWhitelistedTokens,\n    ledgerWithGuardians: indexOfVersion >= indexOfGuardians,\n    ledgerWithUsernames: indexOfVersion >= indexOfUsernames\n  };\n}\n\nexport default getLedgerVersionOptions;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAOO;AAEP,SAAS,gBAAgB,GAAW,GAAW;AAC7C,MAAI,GAAG;AACP,QAAM,cAAc;AACpB,QAAM,YAAY,EAAE,QAAQ,aAAa,EAAE,EAAE,MAAM,GAAG;AACtD,QAAM,YAAY,EAAE,QAAQ,aAAa,EAAE,EAAE,MAAM,GAAG;AACtD,QAAM,IAAI,KAAK,IAAI,UAAU,QAAQ,UAAU,MAAM;AAErD,OAAK,IAAI,GAAG,IAAI,GAAG,KAAK;AACtB,WAAO,SAAS,UAAU,CAAC,GAAG,EAAE,IAAI,SAAS,UAAU,CAAC,GAAG,EAAE;AAC7D,QAAI,MAAM;AACR,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO,UAAU,SAAS,UAAU;AACtC;AAEO,SAAS,wBAAwB,SAAiB;AACvD,QAAM,iBAAiB;AAAA,IACrB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,EAAE,KAAK,CAAC,GAAG,MAAM,gBAAgB,GAAG,CAAC,CAAC;AAEtC,QAAM,sBAAsB,eAAe;AAAA,IACzC;AAAA,EACF;AACA,QAAM,kBAAkB,eAAe;AAAA,IACrC;AAAA,EACF;AACA,QAAM,uBAAuB,eAAe;AAAA,IAC1C;AAAA,EACF;AACA,QAAM,2BAA2B,eAAe;AAAA,IAC9C;AAAA,EACF;AACA,QAAM,mBAAmB,eAAe;AAAA,IACtC;AAAA,EACF;AACA,QAAM,mBAAmB,eAAe;AAAA,IACtC;AAAA,EACF;AACA,QAAM,iBAAiB,eAAe,QAAQ,OAAO;AAErD,SAAO;AAAA,IACL,wBAAwB,kBAAkB;AAAA,IAC1C,oBAAoB,kBAAkB;AAAA,IACtC,yBAAyB,kBAAkB;AAAA,IAC3C,6BAA6B,kBAAkB;AAAA,IAC/C,qBAAqB,kBAAkB;AAAA,IACvC,qBAAqB,kBAAkB;AAAA,EACzC;AACF;AAEA,IAAO,kCAAQ;",
  "names": []
}
