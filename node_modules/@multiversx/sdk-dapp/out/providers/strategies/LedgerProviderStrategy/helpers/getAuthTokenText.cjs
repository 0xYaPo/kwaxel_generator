"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getAuthTokenText_exports = {};
__export(getAuthTokenText_exports, {
  getAuthTokenText: () => getAuthTokenText
});
module.exports = __toCommonJS(getAuthTokenText_exports);
var import_decodeLoginToken = require("../../../../services/nativeAuth/helpers/decodeLoginToken");
var import_getLedgerVersionOptions = __toESM(require("./getLedgerVersionOptions"));
var import_secondsToTimeString = require("./secondsToTimeString");
const getAuthTokenText = ({
  loginToken,
  version
}) => {
  if (!loginToken || !version) {
    return null;
  }
  const { ledgerWithUsernames } = (0, import_getLedgerVersionOptions.default)(version);
  const nativeAuthInfo = (0, import_decodeLoginToken.decodeLoginToken)(loginToken);
  if (nativeAuthInfo == null) {
    return null;
  }
  const confirmAddressText = "Confirm Ledger Address";
  const authText = "Authorise Authentication Token";
  if (ledgerWithUsernames) {
    const time = (0, import_secondsToTimeString.secondsToTimeString)(nativeAuthInfo.ttl);
    return {
      data: `${nativeAuthInfo.origin} for ${time}.`,
      confirmAddressText,
      authText
    };
  }
  return {
    data: loginToken,
    confirmAddressText,
    authText
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getAuthTokenText
});
//# sourceMappingURL=getAuthTokenText.cjs.map
