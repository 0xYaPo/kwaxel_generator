{
  "version": 3,
  "sources": ["../../../../../src/providers/strategies/LedgerProviderStrategy/helpers/getAuthTokenText.ts"],
  "sourcesContent": ["import { decodeLoginToken } from 'services/nativeAuth/helpers/decodeLoginToken';\nimport getLedgerVersionOptions from './getLedgerVersionOptions';\nimport { secondsToTimeString } from './secondsToTimeString';\n\nexport const getAuthTokenText = ({\n  loginToken,\n  version\n}: {\n  loginToken?: string;\n  version?: string;\n}) => {\n  if (!loginToken || !version) {\n    return null;\n  }\n\n  const { ledgerWithUsernames } = getLedgerVersionOptions(version);\n  const nativeAuthInfo = decodeLoginToken(loginToken);\n  if (nativeAuthInfo == null) {\n    return null;\n  }\n\n  const confirmAddressText = 'Confirm Ledger Address';\n  const authText = 'Authorise Authentication Token';\n\n  if (ledgerWithUsernames) {\n    const time = secondsToTimeString(nativeAuthInfo.ttl);\n\n    return {\n      data: `${nativeAuthInfo.origin} for ${time}.`,\n      confirmAddressText,\n      authText\n    };\n  }\n\n  return {\n    data: loginToken,\n    confirmAddressText,\n    authText\n  };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAAiC;AACjC,qCAAoC;AACpC,iCAAoC;AAE7B,MAAM,mBAAmB,CAAC;AAAA,EAC/B;AAAA,EACA;AACF,MAGM;AACJ,MAAI,CAAC,cAAc,CAAC,SAAS;AAC3B,WAAO;AAAA,EACT;AAEA,QAAM,EAAE,oBAAoB,QAAI,+BAAAA,SAAwB,OAAO;AAC/D,QAAM,qBAAiB,0CAAiB,UAAU;AAClD,MAAI,kBAAkB,MAAM;AAC1B,WAAO;AAAA,EACT;AAEA,QAAM,qBAAqB;AAC3B,QAAM,WAAW;AAEjB,MAAI,qBAAqB;AACvB,UAAM,WAAO,gDAAoB,eAAe,GAAG;AAEnD,WAAO;AAAA,MACL,MAAM,GAAG,eAAe,MAAM,QAAQ,IAAI;AAAA,MAC1C;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,SAAO;AAAA,IACL,MAAM;AAAA,IACN;AAAA,IACA;AAAA,EACF;AACF;",
  "names": ["getLedgerVersionOptions"]
}
