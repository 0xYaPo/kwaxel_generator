"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getLedgerProvider_exports = {};
__export(getLedgerProvider_exports, {
  getLedgerProvider: () => getLedgerProvider
});
module.exports = __toCommonJS(getLedgerProvider_exports);
var import_sdk_hw_provider = require("@multiversx/sdk-hw-provider");
var import_getIsLoggedIn = require("../../../../methods/account/getIsLoggedIn");
var import_accountProvider = require("../../../../providers/helpers/accountProvider");
var import_accountSelectors = require("../../../../store/selectors/accountSelectors");
var import_loginInfoSelectors = require("../../../../store/selectors/loginInfoSelectors");
var import_store = require("../../../../store/store");
var import_getLedgerConfiguration = require("./getLedgerConfiguration");
async function getLedgerProvider(props) {
  const isLoggedIn = (0, import_getIsLoggedIn.getIsLoggedIn)();
  const shouldInitProvider = props?.shouldInitProvider || !isLoggedIn;
  const ledgerLogin = (0, import_loginInfoSelectors.ledgerLoginSelector)((0, import_store.getState)());
  const ledgerAccount = (0, import_accountSelectors.ledgerAccountSelector)((0, import_store.getState)());
  const provider = (0, import_accountProvider.getAccountProvider)();
  const ledgerProvider = new import_sdk_hw_provider.HWProvider();
  const initHWProvider = async () => {
    const hasAddressIndex = ledgerLogin?.index != null;
    if (provider instanceof import_sdk_hw_provider.HWProvider && provider.isInitialized()) {
      if (hasAddressIndex) {
        await provider.setAddressIndex(ledgerLogin.index);
      }
      return provider;
    }
    if (shouldInitProvider) {
      const isInitialized = await ledgerProvider.init();
      if (!isInitialized) {
        throw new Error("Failed to initialize Ledger Provider");
      }
    }
    if (hasAddressIndex) {
      await ledgerProvider.setAddressIndex(ledgerLogin.index);
    }
    return ledgerProvider;
  };
  try {
    if (!shouldInitProvider && ledgerAccount) {
      return {
        ledgerProvider,
        ledgerConfig: {
          version: ledgerAccount.version,
          dataEnabled: ledgerAccount.hasContractDataEnabled
        }
      };
    }
    const initializedLedgerProvider = await initHWProvider();
    const ledgerConfig = await (0, import_getLedgerConfiguration.getLedgerConfiguration)(
      initializedLedgerProvider
    );
    return { ledgerProvider: initializedLedgerProvider, ledgerConfig };
  } catch (err) {
    console.error("Could not initialize ledger app", err);
    throw err;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getLedgerProvider
});
//# sourceMappingURL=getLedgerProvider.cjs.map
