"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var signLedgerMessage_exports = {};
__export(signLedgerMessage_exports, {
  signLedgerMessage: () => signLedgerMessage
});
module.exports = __toCommonJS(signLedgerMessage_exports);
var import_providerFactory = require("../../../../constants/providerFactory.constants");
var import_getLedgerErrorCodes = require("./getLedgerErrorCodes");
var import_signMessage = require("../../helpers/signMessage/signMessage");
async function signLedgerMessage({
  message,
  handleSignMessage
}) {
  try {
    const signedMessage = await (0, import_signMessage.signMessage)({
      message,
      handleSignMessage,
      providerType: import_providerFactory.providerLabels.ledger
    });
    return signedMessage;
  } catch (error) {
    const { errorMessage } = (0, import_getLedgerErrorCodes.getLedgerErrorCodes)(error);
    throw errorMessage ? { message: errorMessage } : error;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  signLedgerMessage
});
//# sourceMappingURL=signLedgerMessage.cjs.map
