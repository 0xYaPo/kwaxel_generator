{
  "version": 3,
  "sources": ["../../../../../../src/providers/strategies/LedgerProviderStrategy/helpers/updateAccountsList/updateAccountsList.ts"],
  "sourcesContent": ["import BigNumber from 'bignumber.js';\n\nimport { getEconomics } from 'apiCalls/economics/getEconomics';\nimport { formatAmount } from 'lib/sdkDappUtils';\nimport { getNetworkConfig } from 'methods/network/getNetworkConfig';\nimport { ProviderErrorsEnum } from 'types';\nimport { fetchAccount } from 'utils/account/fetchAccount';\nimport { getUsdValue } from 'utils/operations/getUsdValue';\n\nimport {\n  IUpdateAccountsList,\n  UpdateAccountObjectType\n} from './updateAccountsList.types';\nimport { ILedgerAccount } from '../../types/ledger.types';\n\n/**\n * Updates the list of accounts and fetches their balances.\n *\n * This function performs the following steps:\n * 1. Checks if the manager and provider are initialized; if not, throws an error.\n * 2. Retrieves the starting index for pagination and the current list of accounts.\n * 3. Checks if there is already data for the current page to avoid unnecessary fetching.\n * 4. If no data is present, it fetches the accounts from the wallet provider.\n * 5. Updates the state manager with the new account data and their balances.\n * 6. Handles errors by reverting to existing accounts and logging the error.\n */\nexport const updateAccountsList = async ({\n  manager,\n  provider\n}: IUpdateAccountsList) => {\n  if (!manager || !provider) {\n    throw new Error(ProviderErrorsEnum.notInitialized);\n  }\n\n  const { network } = getNetworkConfig();\n  const startIndex = manager.getAccountScreenData()?.startIndex || 0;\n  const allAccounts = manager.getAllAccounts();\n  const economics = await getEconomics({ baseURL: network.apiAddress });\n\n  const filterByStartIndexRange = (account: ILedgerAccount) =>\n    account.index >= startIndex &&\n    account.index < startIndex + manager.addressesPerPage;\n\n  const allAccountsObject = allAccounts.reduce(\n    (accountsObject: UpdateAccountObjectType, account) =>\n      Object.assign(accountsObject, { [account.index]: account }),\n    {}\n  );\n\n  const currentAccounts = allAccounts.filter(filterByStartIndexRange);\n  const isStartIndexInAccounts = Boolean(allAccountsObject[startIndex]);\n\n  manager.updateAccountScreen({\n    isLoading: !isStartIndexInAccounts\n  });\n\n  if (currentAccounts.length > 0) {\n    manager.updateAccountScreen({ accounts: currentAccounts });\n    return;\n  }\n\n  try {\n    const page = Math.floor(startIndex / manager.addressesPerPage);\n\n    const accountsArray = await provider.getAccounts(\n      page,\n      manager.addressesPerPage\n    );\n\n    const accountsWithBalance = accountsArray.map(\n      (address, accountIindex): ILedgerAccount => ({\n        address,\n        balance: '...',\n        index: accountIindex + startIndex\n      })\n    );\n\n    const newAllAccounts = [...allAccounts, ...accountsWithBalance];\n    const balancePromises = accountsArray.map((address) =>\n      fetchAccount({ address, baseURL: network.apiAddress })\n    );\n\n    const balances = await Promise.all(balancePromises);\n    const newAllAccountsObject = newAllAccounts.reduce(\n      (accountsObject: UpdateAccountObjectType, account) =>\n        Object.assign(accountsObject, { [account.address]: account }),\n\n      {}\n    );\n\n    balances.forEach((account) => {\n      if (!account || !economics || !economics.price) {\n        return;\n      }\n\n      const balanceBigNumber = new BigNumber(account.balance);\n      const formattedBalance = balanceBigNumber\n        .dividedBy(BigNumber(10).pow(18))\n        .toFormat(4)\n        .toString();\n\n      if (balanceBigNumber.isNaN()) {\n        return;\n      }\n\n      const usdValue = getUsdValue({\n        amount: formatAmount({ input: account.balance }),\n        usd: economics?.price\n      });\n\n      newAllAccountsObject[account.address].balance = formattedBalance;\n      newAllAccountsObject[account.address].usdValue = usdValue;\n    });\n\n    const newAllAccountsArray = Object.values(newAllAccountsObject).sort(\n      (alpha, beta) => alpha.index - beta.index\n    );\n\n    const accountsScreenArray = newAllAccountsArray.filter(\n      filterByStartIndexRange\n    );\n\n    manager.updateAllAccounts(newAllAccountsArray);\n    manager.updateAccountScreen({\n      accounts: accountsScreenArray,\n      isLoading: false\n    });\n  } catch (error) {\n    console.error('Failed to fetch accounts:', error);\n  }\n};\n"],
  "mappings": "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",
  "names": ["BigNumber"]
}
