{
  "version": 3,
  "sources": ["../../../../../src/providers/strategies/LedgerProviderStrategy/helpers/authenticateLedgerAccount.ts"],
  "sourcesContent": ["import { HWProvider } from '@multiversx/sdk-hw-provider/out';\nimport { BigNumber } from 'bignumber.js';\n\nimport { ACCOUNTS_ENDPOINT } from 'apiCalls';\nimport { IEventBus } from 'lib/sdkDappUi';\nimport { LedgerConnectStateManager } from 'managers/internal/LedgerConnectStateManager/LedgerConnectStateManager';\nimport { getExplorerAddress } from 'methods/network/getExplorerAddress';\nimport { ProviderTypeEnum } from 'providers/types/providerFactory.types';\nimport { setLedgerAccount } from 'store/actions';\nimport { setLedgerLogin } from 'store/actions/loginInfo/loginInfoActions';\nimport { getExplorerLink } from 'utils/transactions/getExplorerLink';\n\nimport { getAuthTokenText } from './getAuthTokenText';\nimport { updateAccountsList } from './updateAccountsList';\nimport {\n  LedgerConfigType,\n  LedgerLoginType\n} from '../types/ledgerProvider.types';\n\ninterface IGetLedgerLogin {\n  options?: {\n    callbackUrl?: string;\n    token?: string;\n  };\n  config: LedgerConfigType;\n  provider: HWProvider | null;\n  eventBus?: IEventBus | null;\n  login: LedgerLoginType | null;\n}\n\ninterface ISelectedAccount {\n  address: string;\n  signature: string;\n  addressIndex: number;\n}\n\nexport async function authenticateLedgerAccount({\n  options,\n  config,\n  provider,\n  login\n}: IGetLedgerLogin) {\n  const manager = LedgerConnectStateManager.getInstance();\n\n  const explorerAddress = getExplorerAddress();\n\n  const authData = getAuthTokenText({\n    loginToken: options?.token,\n    version: config.version\n  });\n\n  const accountsListProps = {\n    manager,\n    provider\n  };\n\n  // refresh account list\n  await updateAccountsList(accountsListProps);\n\n  // cycle trough accounts until user makes a choice\n  const selectedAccount = await new Promise<ISelectedAccount>(async function (\n    resolve,\n    reject\n  ) {\n    async function handleGoToPage(page: number) {\n      const addressesPerPage = manager ? manager.addressesPerPage ?? 1 : 1;\n      const startIndex = new BigNumber(page - 1).times(addressesPerPage);\n\n      manager?.updateStartIndex(Math.max(0, parseInt(startIndex.toString())));\n      await updateAccountsList(accountsListProps);\n    }\n\n    async function handleAccessWallet(payload: {\n      addressIndex: number;\n      selectedAddress: string;\n    }) {\n      if (!provider || !login) {\n        return;\n      }\n\n      manager?.updateConfirmScreen({\n        ...authData,\n        selectedAddress: payload.selectedAddress,\n        explorerLink: getExplorerLink({\n          to: `/${ACCOUNTS_ENDPOINT}/${payload.selectedAddress}`,\n          explorerAddress\n        })\n      });\n\n      try {\n        const loginInfo = options?.token\n          ? await provider.tokenLogin({\n              token: Buffer.from(`${options?.token}{}`),\n              addressIndex: payload.addressIndex\n            })\n          : await login({\n              addressIndex: payload.addressIndex\n            });\n\n        resolve({\n          address: loginInfo.address,\n          signature: loginInfo.signature\n            ? loginInfo.signature.toString('hex')\n            : '',\n          addressIndex: payload.addressIndex\n        });\n      } catch (err) {\n        console.error('User rejected login:', err);\n\n        const shouldGoBack = Boolean(manager?.getConfirmScreenData());\n        if (shouldGoBack) {\n          await updateAccountsList(accountsListProps);\n        }\n      }\n    }\n\n    async function handleCancel() {\n      await updateAccountsList(accountsListProps);\n      manager.unsubscribeFromAuthEvents({\n        handleCancel,\n        handleAccessWallet,\n        handleGoToPage\n      });\n      reject('User cancelled login');\n    }\n\n    manager.subscribeToAuthEvents({\n      handleCancel,\n      handleAccessWallet,\n      handleGoToPage\n    });\n  });\n\n  const { version, dataEnabled } = config;\n\n  // login is finished, data can be persisted in the store\n  setLedgerLogin({\n    index: selectedAccount.addressIndex,\n    loginType: ProviderTypeEnum.ledger\n  });\n\n  setLedgerAccount({\n    address: selectedAccount.address,\n    index: selectedAccount.addressIndex,\n    version,\n    hasContractDataEnabled: dataEnabled\n  });\n\n  return {\n    address: selectedAccount.address,\n    signature: selectedAccount.signature\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,uBAA0B;AAE1B,sBAAkC;AAElC,uCAA0C;AAC1C,gCAAmC;AACnC,6BAAiC;AACjC,qBAAiC;AACjC,8BAA+B;AAC/B,6BAAgC;AAEhC,8BAAiC;AACjC,gCAAmC;AAuBnC,eAAsB,0BAA0B;AAAA,EAC9C;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,GAAoB;AAClB,QAAM,UAAU,2DAA0B,YAAY;AAEtD,QAAM,sBAAkB,8CAAmB;AAE3C,QAAM,eAAW,0CAAiB;AAAA,IAChC,YAAY,SAAS;AAAA,IACrB,SAAS,OAAO;AAAA,EAClB,CAAC;AAED,QAAM,oBAAoB;AAAA,IACxB;AAAA,IACA;AAAA,EACF;AAGA,YAAM,8CAAmB,iBAAiB;AAG1C,QAAM,kBAAkB,MAAM,IAAI,QAA0B,eAC1D,SACA,QACA;AACA,mBAAe,eAAe,MAAc;AAC1C,YAAM,mBAAmB,UAAU,QAAQ,oBAAoB,IAAI;AACnE,YAAM,aAAa,IAAI,2BAAU,OAAO,CAAC,EAAE,MAAM,gBAAgB;AAEjE,eAAS,iBAAiB,KAAK,IAAI,GAAG,SAAS,WAAW,SAAS,CAAC,CAAC,CAAC;AACtE,gBAAM,8CAAmB,iBAAiB;AAAA,IAC5C;AAEA,mBAAe,mBAAmB,SAG/B;AACD,UAAI,CAAC,YAAY,CAAC,OAAO;AACvB;AAAA,MACF;AAEA,eAAS,oBAAoB;AAAA,QAC3B,GAAG;AAAA,QACH,iBAAiB,QAAQ;AAAA,QACzB,kBAAc,wCAAgB;AAAA,UAC5B,IAAI,IAAI,iCAAiB,IAAI,QAAQ,eAAe;AAAA,UACpD;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAED,UAAI;AACF,cAAM,YAAY,SAAS,QACvB,MAAM,SAAS,WAAW;AAAA,UACxB,OAAO,OAAO,KAAK,GAAG,SAAS,KAAK,IAAI;AAAA,UACxC,cAAc,QAAQ;AAAA,QACxB,CAAC,IACD,MAAM,MAAM;AAAA,UACV,cAAc,QAAQ;AAAA,QACxB,CAAC;AAEL,gBAAQ;AAAA,UACN,SAAS,UAAU;AAAA,UACnB,WAAW,UAAU,YACjB,UAAU,UAAU,SAAS,KAAK,IAClC;AAAA,UACJ,cAAc,QAAQ;AAAA,QACxB,CAAC;AAAA,MACH,SAAS,KAAK;AACZ,gBAAQ,MAAM,wBAAwB,GAAG;AAEzC,cAAM,eAAe,QAAQ,SAAS,qBAAqB,CAAC;AAC5D,YAAI,cAAc;AAChB,oBAAM,8CAAmB,iBAAiB;AAAA,QAC5C;AAAA,MACF;AAAA,IACF;AAEA,mBAAe,eAAe;AAC5B,gBAAM,8CAAmB,iBAAiB;AAC1C,cAAQ,0BAA0B;AAAA,QAChC;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AACD,aAAO,sBAAsB;AAAA,IAC/B;AAEA,YAAQ,sBAAsB;AAAA,MAC5B;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AAED,QAAM,EAAE,SAAS,YAAY,IAAI;AAGjC,8CAAe;AAAA,IACb,OAAO,gBAAgB;AAAA,IACvB,WAAW,wCAAiB;AAAA,EAC9B,CAAC;AAED,uCAAiB;AAAA,IACf,SAAS,gBAAgB;AAAA,IACzB,OAAO,gBAAgB;AAAA,IACvB;AAAA,IACA,wBAAwB;AAAA,EAC1B,CAAC;AAED,SAAO;AAAA,IACL,SAAS,gBAAgB;AAAA,IACzB,WAAW,gBAAgB;AAAA,EAC7B;AACF;",
  "names": []
}
