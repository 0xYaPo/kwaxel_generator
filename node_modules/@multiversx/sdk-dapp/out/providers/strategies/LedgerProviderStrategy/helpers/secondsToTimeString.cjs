"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var secondsToTimeString_exports = {};
__export(secondsToTimeString_exports, {
  secondsToTimeString: () => secondsToTimeString
});
module.exports = __toCommonJS(secondsToTimeString_exports);
var import_lodash = __toESM(require("lodash.isstring"));
const secondsToTimeString = (seconds) => {
  if (seconds <= 0 || isNaN(seconds) || !seconds || (0, import_lodash.default)(seconds)) {
    return "N/A time";
  }
  if (seconds >= 86400) {
    return "more than one day";
  }
  const hours = Math.floor(seconds / 3600);
  const remainingSeconds = seconds % 3600;
  const minutes = Math.floor(remainingSeconds / 60);
  const remainingSecondsAfterMinutes = remainingSeconds % 60;
  const parts = [];
  if (hours > 0) {
    parts.push(`${hours}h`);
  }
  if (minutes > 0) {
    parts.push(`${minutes}min`);
  }
  if (remainingSecondsAfterMinutes > 0) {
    parts.push(`${remainingSecondsAfterMinutes}sec`);
  }
  return parts.join(" ");
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  secondsToTimeString
});
//# sourceMappingURL=secondsToTimeString.cjs.map
