{
  "version": 3,
  "sources": ["../../../../src/providers/strategies/ExtensionProviderStrategy/ExtensionProviderStrategy.ts"],
  "sourcesContent": ["import { ExtensionProvider } from '@multiversx/sdk-extension-provider/out/extensionProvider';\nimport { providerLabels } from 'constants/providerFactory.constants';\nimport { Message, Transaction } from 'lib/sdkCore';\nimport { IDAppProviderAccount } from 'lib/sdkDappUtils';\nimport {\n  ProviderTypeEnum,\n  ProviderType\n} from 'providers/types/providerFactory.types';\nimport { ProviderErrorsEnum } from 'types/provider.types';\nimport { BaseProviderStrategy } from '../BaseProviderStrategy/BaseProviderStrategy';\nimport { signMessage } from '../helpers/signMessage/signMessage';\n\nexport class ExtensionProviderStrategy extends BaseProviderStrategy {\n  private readonly provider: ExtensionProvider;\n\n  constructor(address?: string) {\n    super(address);\n    this.provider = ExtensionProvider.getInstance();\n    this._login = this.provider.login.bind(this.provider);\n  }\n\n  async init(): Promise<boolean> {\n    this.initializeAddress();\n    return this.initializeProvider();\n  }\n\n  private async initializeProvider() {\n    const initialized = await this.provider.init();\n\n    if (this.address) {\n      this.setAccount({ address: this.address });\n    }\n\n    return initialized;\n  }\n\n  getAddress(): Promise<string | undefined> {\n    return this.provider.getAddress();\n  }\n\n  setAccount(account: IDAppProviderAccount): void {\n    return this.provider.setAccount(account);\n  }\n\n  isInitialized(): boolean {\n    return this.provider.isInitialized();\n  }\n\n  logout(): Promise<boolean> {\n    return this.provider.logout();\n  }\n\n  getType(): ProviderType {\n    return ProviderTypeEnum.extension;\n  }\n\n  cancelAction = async () => {\n    this.provider.cancelAction();\n  };\n\n  signTransactions = async (transactions: Transaction[]) => {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    const { manager, onClose } = await this.initSignState();\n\n    try {\n      const signedTransactions: Transaction[] =\n        (await this.provider.signTransactions(transactions)) ?? [];\n\n      return signedTransactions;\n    } catch (error) {\n      await onClose({ shouldCancelAction: false });\n      throw error;\n    } finally {\n      manager.closeUI();\n    }\n  };\n\n  signMessage = async (message: Message) => {\n    if (!this.provider) {\n      throw new Error(ProviderErrorsEnum.notInitialized);\n    }\n\n    const signedMessage = await signMessage({\n      message,\n      handleSignMessage: this.provider.signMessage.bind(this.provider),\n      cancelAction: this.cancelAction,\n      providerType: providerLabels.extension\n    });\n\n    return signedMessage;\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAkC;AAClC,6BAA+B;AAG/B,IAAAA,0BAGO;AACP,sBAAmC;AACnC,kCAAqC;AACrC,yBAA4B;AAErB,MAAM,kCAAkC,iDAAqB;AAAA,EAGlE,YAAY,SAAkB;AAC5B,UAAM,OAAO;AAwCf,wBAAe,YAAY;AACzB,WAAK,SAAS,aAAa;AAAA,IAC7B;AAEA,4BAAmB,OAAO,iBAAgC;AACxD,UAAI,CAAC,KAAK,UAAU;AAClB,cAAM,IAAI,MAAM,mCAAmB,cAAc;AAAA,MACnD;AAEA,YAAM,EAAE,SAAS,QAAQ,IAAI,MAAM,KAAK,cAAc;AAEtD,UAAI;AACF,cAAM,qBACH,MAAM,KAAK,SAAS,iBAAiB,YAAY,KAAM,CAAC;AAE3D,eAAO;AAAA,MACT,SAAS,OAAO;AACd,cAAM,QAAQ,EAAE,oBAAoB,MAAM,CAAC;AAC3C,cAAM;AAAA,MACR,UAAE;AACA,gBAAQ,QAAQ;AAAA,MAClB;AAAA,IACF;AAEA,uBAAc,OAAO,YAAqB;AACxC,UAAI,CAAC,KAAK,UAAU;AAClB,cAAM,IAAI,MAAM,mCAAmB,cAAc;AAAA,MACnD;AAEA,YAAM,gBAAgB,UAAM,gCAAY;AAAA,QACtC;AAAA,QACA,mBAAmB,KAAK,SAAS,YAAY,KAAK,KAAK,QAAQ;AAAA,QAC/D,cAAc,KAAK;AAAA,QACnB,cAAc,sCAAe;AAAA,MAC/B,CAAC;AAED,aAAO;AAAA,IACT;AA5EE,SAAK,WAAW,2CAAkB,YAAY;AAC9C,SAAK,SAAS,KAAK,SAAS,MAAM,KAAK,KAAK,QAAQ;AAAA,EACtD;AAAA,EAEA,MAAM,OAAyB;AAC7B,SAAK,kBAAkB;AACvB,WAAO,KAAK,mBAAmB;AAAA,EACjC;AAAA,EAEA,MAAc,qBAAqB;AACjC,UAAM,cAAc,MAAM,KAAK,SAAS,KAAK;AAE7C,QAAI,KAAK,SAAS;AAChB,WAAK,WAAW,EAAE,SAAS,KAAK,QAAQ,CAAC;AAAA,IAC3C;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,aAA0C;AACxC,WAAO,KAAK,SAAS,WAAW;AAAA,EAClC;AAAA,EAEA,WAAW,SAAqC;AAC9C,WAAO,KAAK,SAAS,WAAW,OAAO;AAAA,EACzC;AAAA,EAEA,gBAAyB;AACvB,WAAO,KAAK,SAAS,cAAc;AAAA,EACrC;AAAA,EAEA,SAA2B;AACzB,WAAO,KAAK,SAAS,OAAO;AAAA,EAC9B;AAAA,EAEA,UAAwB;AACtB,WAAO,yCAAiB;AAAA,EAC1B;AAwCF;",
  "names": ["import_providerFactory"]
}
