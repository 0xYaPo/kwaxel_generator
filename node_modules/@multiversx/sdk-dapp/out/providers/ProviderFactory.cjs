"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ProviderFactory_exports = {};
__export(ProviderFactory_exports, {
  ProviderFactory: () => ProviderFactory
});
module.exports = __toCommonJS(ProviderFactory_exports);
var import_constants = require("@multiversx/sdk-web-wallet-iframe-provider/out/constants");
var import_LedgerIdleStateManager = require("../managers/internal/LedgerIdleStateManager/LedgerIdleStateManager");
var import_getAddress = require("../methods/account/getAddress");
var import_strategies = require("../providers/strategies");
var import_loginInfoActions = require("../store/actions/loginInfo/loginInfoActions");
var import_configSelectors = require("../store/selectors/configSelectors");
var import_store = require("../store/store");
var import_DappProvider = require("./DappProvider/DappProvider");
var import_accountProvider = require("./helpers/accountProvider");
var import_clearInitiatedLogins = require("./helpers/clearInitiatedLogins");
var import_WebviewProviderStrategy = require("./strategies/WebviewProviderStrategy");
var import_providerFactory = require("./types/providerFactory.types");
class ProviderFactory {
  static set customProviders(providers) {
    this._customProviders = providers;
  }
  static get customProviders() {
    return this._customProviders;
  }
  static async create({
    type,
    anchor
  }) {
    let createdProvider = null;
    switch (type) {
      case import_providerFactory.ProviderTypeEnum.extension: {
        createdProvider = new import_strategies.ExtensionProviderStrategy();
        break;
      }
      case import_providerFactory.ProviderTypeEnum.crossWindow: {
        createdProvider = new import_strategies.CrossWindowProviderStrategy();
        break;
      }
      case import_providerFactory.ProviderTypeEnum.ledger: {
        createdProvider = new import_strategies.LedgerProviderStrategy({ anchor });
        const ledgerIdleStateManager = import_LedgerIdleStateManager.LedgerIdleStateManager.getInstance();
        await ledgerIdleStateManager.init();
        break;
      }
      case import_providerFactory.ProviderTypeEnum.metamask: {
        createdProvider = new import_strategies.IframeProviderStrategy({
          type: import_constants.IframeLoginTypes.metamask
        });
        break;
      }
      case import_providerFactory.ProviderTypeEnum.passkey: {
        createdProvider = new import_strategies.IframeProviderStrategy({
          type: import_constants.IframeLoginTypes.passkey
        });
        break;
      }
      case import_providerFactory.ProviderTypeEnum.walletConnect: {
        const walletConnectConfig = (0, import_configSelectors.walletConnectConfigSelector)((0, import_store.getState)());
        if (!walletConnectConfig?.walletConnectV2ProjectId) {
          throw new Error(import_strategies.WalletConnectV2Error.invalidConfig);
        }
        createdProvider = new import_strategies.WalletConnectProviderStrategy({
          anchor,
          ...walletConnectConfig
        });
        break;
      }
      case import_providerFactory.ProviderTypeEnum.webview: {
        createdProvider = new import_WebviewProviderStrategy.WebviewProviderStrategy();
        break;
      }
      default: {
        const address = (0, import_getAddress.getAddress)();
        for (const customProvider of this._customProviders) {
          if (customProvider.type === type) {
            createdProvider = await customProvider.constructor({
              address,
              anchor
            });
          }
        }
        break;
      }
    }
    if (!createdProvider) {
      throw new Error("Unable to create provider");
    }
    await createdProvider.init();
    const dappProvider = new import_DappProvider.DappProvider(createdProvider);
    (0, import_accountProvider.setAccountProvider)(dappProvider);
    const shouldClearInitiatedLogins = [
      import_providerFactory.ProviderTypeEnum.crossWindow,
      import_providerFactory.ProviderTypeEnum.metamask,
      import_providerFactory.ProviderTypeEnum.passkey
    ].includes(type);
    (0, import_clearInitiatedLogins.clearInitiatedLogins)(
      shouldClearInitiatedLogins ? { skipLoginMethod: type } : null
    );
    return dappProvider;
  }
  static async destroy() {
    const provider = (0, import_accountProvider.getAccountProvider)();
    provider.cancelLogin();
    (0, import_accountProvider.setAccountProvider)(null);
    (0, import_loginInfoActions.setProviderType)(import_providerFactory.ProviderTypeEnum.none);
  }
}
ProviderFactory._customProviders = [];
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ProviderFactory
});
//# sourceMappingURL=ProviderFactory.cjs.map
