{
  "version": 3,
  "sources": ["../../src/providers/ProviderFactory.ts"],
  "sourcesContent": ["import { IframeLoginTypes } from '@multiversx/sdk-web-wallet-iframe-provider/out/constants';\nimport { LedgerIdleStateManager } from 'managers/internal/LedgerIdleStateManager/LedgerIdleStateManager';\nimport { getAddress } from 'methods/account/getAddress';\nimport {\n  CrossWindowProviderStrategy,\n  ExtensionProviderStrategy,\n  IframeProviderStrategy,\n  LedgerProviderStrategy,\n  WalletConnectProviderStrategy,\n  WalletConnectV2Error\n} from 'providers/strategies';\nimport { setProviderType } from 'store/actions/loginInfo/loginInfoActions';\nimport { walletConnectConfigSelector } from 'store/selectors/configSelectors';\nimport { getState } from 'store/store';\nimport { DappProvider } from './DappProvider/DappProvider';\nimport {\n  getAccountProvider,\n  setAccountProvider\n} from './helpers/accountProvider';\nimport { clearInitiatedLogins } from './helpers/clearInitiatedLogins';\nimport { WebviewProviderStrategy } from './strategies/WebviewProviderStrategy';\nimport {\n  ICustomProvider,\n  IProvider,\n  IProviderFactory,\n  ProviderType,\n  ProviderTypeEnum\n} from './types/providerFactory.types';\n\nexport class ProviderFactory {\n  private static _customProviders: ICustomProvider[] = [];\n\n  public static set customProviders(providers: ICustomProvider[]) {\n    this._customProviders = providers;\n  }\n\n  public static get customProviders() {\n    return this._customProviders;\n  }\n\n  public static async create({\n    type,\n    anchor\n  }: IProviderFactory): Promise<DappProvider> {\n    let createdProvider: IProvider | null = null;\n\n    switch (type) {\n      case ProviderTypeEnum.extension: {\n        createdProvider = new ExtensionProviderStrategy();\n\n        break;\n      }\n\n      case ProviderTypeEnum.crossWindow: {\n        createdProvider = new CrossWindowProviderStrategy();\n\n        break;\n      }\n\n      case ProviderTypeEnum.ledger: {\n        createdProvider = new LedgerProviderStrategy({ anchor });\n\n        const ledgerIdleStateManager = LedgerIdleStateManager.getInstance();\n        await ledgerIdleStateManager.init();\n\n        break;\n      }\n\n      case ProviderTypeEnum.metamask: {\n        createdProvider = new IframeProviderStrategy({\n          type: IframeLoginTypes.metamask\n        });\n\n        break;\n      }\n\n      case ProviderTypeEnum.passkey: {\n        createdProvider = new IframeProviderStrategy({\n          type: IframeLoginTypes.passkey\n        });\n\n        break;\n      }\n      case ProviderTypeEnum.walletConnect: {\n        const walletConnectConfig = walletConnectConfigSelector(getState());\n\n        if (!walletConnectConfig?.walletConnectV2ProjectId) {\n          throw new Error(WalletConnectV2Error.invalidConfig);\n        }\n\n        createdProvider = new WalletConnectProviderStrategy({\n          anchor,\n          ...walletConnectConfig\n        });\n\n        break;\n      }\n      case ProviderTypeEnum.webview: {\n        createdProvider = new WebviewProviderStrategy();\n        break;\n      }\n\n      default: {\n        const address = getAddress();\n\n        for (const customProvider of this._customProviders) {\n          if (customProvider.type === type) {\n            createdProvider = await customProvider.constructor({\n              address,\n              anchor\n            });\n          }\n        }\n        break;\n      }\n    }\n\n    if (!createdProvider) {\n      throw new Error('Unable to create provider');\n    }\n\n    await createdProvider.init();\n\n    const dappProvider = new DappProvider(createdProvider);\n    setAccountProvider(dappProvider);\n\n    const shouldClearInitiatedLogins = (\n      [\n        ProviderTypeEnum.crossWindow,\n        ProviderTypeEnum.metamask,\n        ProviderTypeEnum.passkey\n      ] as readonly ProviderType[]\n    ).includes(type);\n\n    // Clear initiated logins and skip the login method if it's crossWindow or metamask\n    clearInitiatedLogins(\n      shouldClearInitiatedLogins ? { skipLoginMethod: type } : null\n    );\n\n    return dappProvider;\n  }\n\n  public static async destroy() {\n    const provider = getAccountProvider();\n    provider.cancelLogin();\n    setAccountProvider(null);\n    setProviderType(ProviderTypeEnum.none);\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAiC;AACjC,oCAAuC;AACvC,wBAA2B;AAC3B,wBAOO;AACP,8BAAgC;AAChC,6BAA4C;AAC5C,mBAAyB;AACzB,0BAA6B;AAC7B,6BAGO;AACP,kCAAqC;AACrC,qCAAwC;AACxC,6BAMO;AAEA,MAAM,gBAAgB;AAAA,EAG3B,WAAkB,gBAAgB,WAA8B;AAC9D,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EAEA,WAAkB,kBAAkB;AAClC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,aAAoB,OAAO;AAAA,IACzB;AAAA,IACA;AAAA,EACF,GAA4C;AAC1C,QAAI,kBAAoC;AAExC,YAAQ,MAAM;AAAA,MACZ,KAAK,wCAAiB,WAAW;AAC/B,0BAAkB,IAAI,4CAA0B;AAEhD;AAAA,MACF;AAAA,MAEA,KAAK,wCAAiB,aAAa;AACjC,0BAAkB,IAAI,8CAA4B;AAElD;AAAA,MACF;AAAA,MAEA,KAAK,wCAAiB,QAAQ;AAC5B,0BAAkB,IAAI,yCAAuB,EAAE,OAAO,CAAC;AAEvD,cAAM,yBAAyB,qDAAuB,YAAY;AAClE,cAAM,uBAAuB,KAAK;AAElC;AAAA,MACF;AAAA,MAEA,KAAK,wCAAiB,UAAU;AAC9B,0BAAkB,IAAI,yCAAuB;AAAA,UAC3C,MAAM,kCAAiB;AAAA,QACzB,CAAC;AAED;AAAA,MACF;AAAA,MAEA,KAAK,wCAAiB,SAAS;AAC7B,0BAAkB,IAAI,yCAAuB;AAAA,UAC3C,MAAM,kCAAiB;AAAA,QACzB,CAAC;AAED;AAAA,MACF;AAAA,MACA,KAAK,wCAAiB,eAAe;AACnC,cAAM,0BAAsB,wDAA4B,uBAAS,CAAC;AAElE,YAAI,CAAC,qBAAqB,0BAA0B;AAClD,gBAAM,IAAI,MAAM,uCAAqB,aAAa;AAAA,QACpD;AAEA,0BAAkB,IAAI,gDAA8B;AAAA,UAClD;AAAA,UACA,GAAG;AAAA,QACL,CAAC;AAED;AAAA,MACF;AAAA,MACA,KAAK,wCAAiB,SAAS;AAC7B,0BAAkB,IAAI,uDAAwB;AAC9C;AAAA,MACF;AAAA,MAEA,SAAS;AACP,cAAM,cAAU,8BAAW;AAE3B,mBAAW,kBAAkB,KAAK,kBAAkB;AAClD,cAAI,eAAe,SAAS,MAAM;AAChC,8BAAkB,MAAM,eAAe,YAAY;AAAA,cACjD;AAAA,cACA;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF;AACA;AAAA,MACF;AAAA,IACF;AAEA,QAAI,CAAC,iBAAiB;AACpB,YAAM,IAAI,MAAM,2BAA2B;AAAA,IAC7C;AAEA,UAAM,gBAAgB,KAAK;AAE3B,UAAM,eAAe,IAAI,iCAAa,eAAe;AACrD,mDAAmB,YAAY;AAE/B,UAAM,6BACJ;AAAA,MACE,wCAAiB;AAAA,MACjB,wCAAiB;AAAA,MACjB,wCAAiB;AAAA,IACnB,EACA,SAAS,IAAI;AAGf;AAAA,MACE,6BAA6B,EAAE,iBAAiB,KAAK,IAAI;AAAA,IAC3D;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,aAAoB,UAAU;AAC5B,UAAM,eAAW,2CAAmB;AACpC,aAAS,YAAY;AACrB,mDAAmB,IAAI;AACvB,iDAAgB,wCAAiB,IAAI;AAAA,EACvC;AACF;AAvHa,gBACI,mBAAsC,CAAC;",
  "names": []
}
