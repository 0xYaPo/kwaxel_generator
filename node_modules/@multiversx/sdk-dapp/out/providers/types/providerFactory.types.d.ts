import type { IDAppProviderBase } from '@multiversx/sdk-dapp-utils';
export interface IProvider<T extends ProviderType = ProviderType> extends IDAppProviderBase {
    init: () => Promise<boolean>;
    login: (options?: {
        callbackUrl?: string;
        token?: string;
    }) => Promise<{
        address: string;
        signature: string;
        multisig?: string;
        impersonate?: string;
        accessToken?: string;
        [key: string]: unknown;
    }>;
    logout: () => Promise<boolean>;
    cancelLogin?: () => void;
    getType: () => T;
    getAddress(): Promise<string | undefined>;
}
export interface IProviderConfig {
    account?: {
        address: string;
    };
}
export declare const ProviderTypeEnum: {
    readonly extension: "extension";
    readonly metamask: "metamask";
    readonly passkey: "passkey";
    readonly walletConnect: "walletConnect";
    readonly ledger: "ledger";
    readonly crossWindow: "crossWindow";
    readonly webview: "webview";
    readonly none: "";
};
export type ProviderType = (typeof ProviderTypeEnum)[keyof typeof ProviderTypeEnum] | (string & {});
export interface IProviderFactory<T extends ProviderType = ProviderType> {
    type: T;
    anchor?: HTMLElement;
}
export interface IProviderBase<T extends ProviderType = ProviderType> {
    name: string;
    type: T;
    iconUrl?: string;
}
export interface ICustomProvider<T extends ProviderType = ProviderType> extends IProviderBase<T> {
    constructor: (options?: {
        address?: string;
        anchor?: HTMLElement;
    }) => Promise<IProvider>;
}
