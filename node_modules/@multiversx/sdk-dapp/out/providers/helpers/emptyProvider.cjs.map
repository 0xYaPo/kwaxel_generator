{
  "version": 3,
  "sources": ["../../../src/providers/helpers/emptyProvider.ts"],
  "sourcesContent": ["import { Message, Transaction } from '@multiversx/sdk-core';\nimport {\n  IDAppProviderAccount,\n  IDAppProviderOptions\n} from '@multiversx/sdk-dapp-utils/out';\nimport {\n  IProvider,\n  ProviderType,\n  ProviderTypeEnum\n} from 'providers/types/providerFactory.types';\n\nimport { EngineTypes } from 'utils/walletconnect/__sdkWalletconnectProvider';\n\nconst notInitializedError = (caller: string) => {\n  return `Unable to perform ${caller}, Provider not initialized`;\n};\n\nexport class EmptyProvider implements IProvider {\n  init(): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  login<TOptions = { callbackUrl?: string } | undefined, TResponse = string>(\n    options?: TOptions\n  ): Promise<TResponse> {\n    throw new Error(notInitializedError(`login with options: ${options}`));\n  }\n\n  logout<TOptions = { callbackUrl?: string }, TResponse = boolean>(\n    options?: TOptions\n  ): Promise<TResponse> {\n    throw new Error(notInitializedError(`logout with options: ${options}`));\n  }\n\n  getAccount(): IDAppProviderAccount | null {\n    throw new Error(notInitializedError('unable to get account'));\n  }\n  setAccount(account: IDAppProviderAccount): void {\n    throw new Error(\n      notInitializedError(`unable to set account with: ${account}`)\n    );\n  }\n\n  isInitialized(): boolean {\n    return false;\n  }\n\n  isConnected(): boolean {\n    return false;\n  }\n\n  sendTransaction?<\n    TOptions = { callbackUrl?: string },\n    TResponse = Transaction\n  >(transaction: Transaction, options?: TOptions): Promise<TResponse> {\n    throw new Error(\n      notInitializedError(\n        `sendTransaction with transactions: ${transaction} options: ${options}`\n      )\n    );\n  }\n\n  signTransaction<TOptions = { callbackUrl?: string }, TResponse = Transaction>(\n    transaction: Transaction,\n    options?: TOptions\n  ): Promise<TResponse> {\n    throw new Error(\n      notInitializedError(\n        `signTransaction with transactions: ${JSON.stringify(transaction)} options: ${options}`\n      )\n    );\n  }\n\n  signTransactions<T>(transactions: T[]): Promise<T[]> {\n    throw new Error(\n      notInitializedError(\n        `signTransactions with transactions: ${JSON.stringify(transactions)}`\n      )\n    );\n  }\n\n  signMessage(\n    message: Message,\n    options?: IDAppProviderOptions\n  ): Promise<Message | null> {\n    throw new Error(\n      notInitializedError(`signMessage with ${message} and options ${options}`)\n    );\n  }\n\n  sendCustomMessage?({\n    method,\n    params\n  }: {\n    method: string;\n    params: any;\n  }): Promise<any> {\n    throw new Error(\n      notInitializedError(\n        `sendCustomMessage with method: ${method} params: ${params}`\n      )\n    );\n  }\n\n  sendCustomRequest?(options?: {\n    request: EngineTypes.RequestParams['request'];\n  }): Promise<any> {\n    throw new Error(\n      notInitializedError(`sendSessionEvent with options: ${options}`)\n    );\n  }\n\n  async getAddress(): Promise<string | undefined> {\n    throw new Error(notInitializedError('getAddress'));\n  }\n\n  getType(): ProviderType {\n    return ProviderTypeEnum.none;\n  }\n}\n\nexport const emptyProvider = new EmptyProvider();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,6BAIO;AAIP,MAAM,sBAAsB,CAAC,WAAmB;AAC9C,SAAO,qBAAqB,MAAM;AACpC;AAEO,MAAM,cAAmC;AAAA,EAC9C,OAAyB;AACvB,WAAO,QAAQ,QAAQ,KAAK;AAAA,EAC9B;AAAA,EAEA,MACE,SACoB;AACpB,UAAM,IAAI,MAAM,oBAAoB,uBAAuB,OAAO,EAAE,CAAC;AAAA,EACvE;AAAA,EAEA,OACE,SACoB;AACpB,UAAM,IAAI,MAAM,oBAAoB,wBAAwB,OAAO,EAAE,CAAC;AAAA,EACxE;AAAA,EAEA,aAA0C;AACxC,UAAM,IAAI,MAAM,oBAAoB,uBAAuB,CAAC;AAAA,EAC9D;AAAA,EACA,WAAW,SAAqC;AAC9C,UAAM,IAAI;AAAA,MACR,oBAAoB,+BAA+B,OAAO,EAAE;AAAA,IAC9D;AAAA,EACF;AAAA,EAEA,gBAAyB;AACvB,WAAO;AAAA,EACT;AAAA,EAEA,cAAuB;AACrB,WAAO;AAAA,EACT;AAAA,EAEA,gBAGE,aAA0B,SAAwC;AAClE,UAAM,IAAI;AAAA,MACR;AAAA,QACE,sCAAsC,WAAW,aAAa,OAAO;AAAA,MACvE;AAAA,IACF;AAAA,EACF;AAAA,EAEA,gBACE,aACA,SACoB;AACpB,UAAM,IAAI;AAAA,MACR;AAAA,QACE,sCAAsC,KAAK,UAAU,WAAW,CAAC,aAAa,OAAO;AAAA,MACvF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,iBAAoB,cAAiC;AACnD,UAAM,IAAI;AAAA,MACR;AAAA,QACE,uCAAuC,KAAK,UAAU,YAAY,CAAC;AAAA,MACrE;AAAA,IACF;AAAA,EACF;AAAA,EAEA,YACE,SACA,SACyB;AACzB,UAAM,IAAI;AAAA,MACR,oBAAoB,oBAAoB,OAAO,gBAAgB,OAAO,EAAE;AAAA,IAC1E;AAAA,EACF;AAAA,EAEA,kBAAmB;AAAA,IACjB;AAAA,IACA;AAAA,EACF,GAGiB;AACf,UAAM,IAAI;AAAA,MACR;AAAA,QACE,kCAAkC,MAAM,YAAY,MAAM;AAAA,MAC5D;AAAA,IACF;AAAA,EACF;AAAA,EAEA,kBAAmB,SAEF;AACf,UAAM,IAAI;AAAA,MACR,oBAAoB,kCAAkC,OAAO,EAAE;AAAA,IACjE;AAAA,EACF;AAAA,EAEA,MAAM,aAA0C;AAC9C,UAAM,IAAI,MAAM,oBAAoB,YAAY,CAAC;AAAA,EACnD;AAAA,EAEA,UAAwB;AACtB,WAAO,wCAAiB;AAAA,EAC1B;AACF;AAEO,MAAM,gBAAgB,IAAI,cAAc;",
  "names": []
}
