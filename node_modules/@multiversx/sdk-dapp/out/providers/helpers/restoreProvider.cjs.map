{
  "version": 3,
  "sources": ["../../../src/providers/helpers/restoreProvider.ts"],
  "sourcesContent": ["import { isMobileWebview } from 'lib/sdkWebviewProvider';\nimport { ProviderTypeEnum } from 'providers/types/providerFactory.types';\nimport { providerTypeSelector } from 'store/selectors';\nimport { getState } from 'store/store';\nimport { getIsInIframe } from 'utils/window/getIsInIframe';\nimport { setAccountProvider } from './accountProvider';\nimport { ProviderFactory } from '../ProviderFactory';\n\nexport async function restoreProvider() {\n  const isMobile = isMobileWebview();\n  const isInIframe = getIsInIframe();\n\n  const type =\n    isInIframe || isMobile\n      ? ProviderTypeEnum.webview\n      : providerTypeSelector(getState());\n\n  if (!type) {\n    return;\n  }\n\n  const provider = await ProviderFactory.create({\n    type\n  });\n\n  if (!provider) {\n    throw new Error('Provider not found');\n  }\n\n  /*\n    Check if the app is running in webview and the provider is already initialized.\n    - true: the app is embedded within another dApp (e.g., inside an iframe) and perform login using the provider.\n    - false: the parent is not a dApp and proceed with initializing the current app as a standalone iframe.\n  */\n  if (\n    isMobile ||\n    (type === ProviderTypeEnum.webview && provider.isInitialized())\n  ) {\n    await provider.login();\n  }\n\n  setAccountProvider(provider);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAAgC;AAChC,6BAAiC;AACjC,uBAAqC;AACrC,mBAAyB;AACzB,2BAA8B;AAC9B,6BAAmC;AACnC,6BAAgC;AAEhC,eAAsB,kBAAkB;AACtC,QAAM,eAAW,2CAAgB;AACjC,QAAM,iBAAa,oCAAc;AAEjC,QAAM,OACJ,cAAc,WACV,wCAAiB,cACjB,2CAAqB,uBAAS,CAAC;AAErC,MAAI,CAAC,MAAM;AACT;AAAA,EACF;AAEA,QAAM,WAAW,MAAM,uCAAgB,OAAO;AAAA,IAC5C;AAAA,EACF,CAAC;AAED,MAAI,CAAC,UAAU;AACb,UAAM,IAAI,MAAM,oBAAoB;AAAA,EACtC;AAOA,MACE,YACC,SAAS,wCAAiB,WAAW,SAAS,cAAc,GAC7D;AACA,UAAM,SAAS,MAAM;AAAA,EACvB;AAEA,iDAAmB,QAAQ;AAC7B;",
  "names": []
}
