import { Message, Transaction } from '@multiversx/sdk-core';
import { IDAppProviderAccount, IDAppProviderOptions } from '@multiversx/sdk-dapp-utils/out';
import { IProvider, ProviderType } from '../../providers/types/providerFactory.types';
import { EngineTypes } from '../../utils/walletconnect/__sdkWalletconnectProvider';
export declare class EmptyProvider implements IProvider {
    init(): Promise<boolean>;
    login<TOptions = {
        callbackUrl?: string;
    } | undefined, TResponse = string>(options?: TOptions): Promise<TResponse>;
    logout<TOptions = {
        callbackUrl?: string;
    }, TResponse = boolean>(options?: TOptions): Promise<TResponse>;
    getAccount(): IDAppProviderAccount | null;
    setAccount(account: IDAppProviderAccount): void;
    isInitialized(): boolean;
    isConnected(): boolean;
    sendTransaction?<TOptions = {
        callbackUrl?: string;
    }, TResponse = Transaction>(transaction: Transaction, options?: TOptions): Promise<TResponse>;
    signTransaction<TOptions = {
        callbackUrl?: string;
    }, TResponse = Transaction>(transaction: Transaction, options?: TOptions): Promise<TResponse>;
    signTransactions<T>(transactions: T[]): Promise<T[]>;
    signMessage(message: Message, options?: IDAppProviderOptions): Promise<Message | null>;
    sendCustomMessage?({ method, params }: {
        method: string;
        params: any;
    }): Promise<any>;
    sendCustomRequest?(options?: {
        request: EngineTypes.RequestParams['request'];
    }): Promise<any>;
    getAddress(): Promise<string | undefined>;
    getType(): ProviderType;
}
export declare const emptyProvider: EmptyProvider;
