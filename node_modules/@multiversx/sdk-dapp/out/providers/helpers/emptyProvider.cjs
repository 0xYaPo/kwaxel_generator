"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var emptyProvider_exports = {};
__export(emptyProvider_exports, {
  EmptyProvider: () => EmptyProvider,
  emptyProvider: () => emptyProvider
});
module.exports = __toCommonJS(emptyProvider_exports);
var import_providerFactory = require("../../providers/types/providerFactory.types");
const notInitializedError = (caller) => {
  return `Unable to perform ${caller}, Provider not initialized`;
};
class EmptyProvider {
  init() {
    return Promise.resolve(false);
  }
  login(options) {
    throw new Error(notInitializedError(`login with options: ${options}`));
  }
  logout(options) {
    throw new Error(notInitializedError(`logout with options: ${options}`));
  }
  getAccount() {
    throw new Error(notInitializedError("unable to get account"));
  }
  setAccount(account) {
    throw new Error(
      notInitializedError(`unable to set account with: ${account}`)
    );
  }
  isInitialized() {
    return false;
  }
  isConnected() {
    return false;
  }
  sendTransaction(transaction, options) {
    throw new Error(
      notInitializedError(
        `sendTransaction with transactions: ${transaction} options: ${options}`
      )
    );
  }
  signTransaction(transaction, options) {
    throw new Error(
      notInitializedError(
        `signTransaction with transactions: ${JSON.stringify(transaction)} options: ${options}`
      )
    );
  }
  signTransactions(transactions) {
    throw new Error(
      notInitializedError(
        `signTransactions with transactions: ${JSON.stringify(transactions)}`
      )
    );
  }
  signMessage(message, options) {
    throw new Error(
      notInitializedError(`signMessage with ${message} and options ${options}`)
    );
  }
  sendCustomMessage({
    method,
    params
  }) {
    throw new Error(
      notInitializedError(
        `sendCustomMessage with method: ${method} params: ${params}`
      )
    );
  }
  sendCustomRequest(options) {
    throw new Error(
      notInitializedError(`sendSessionEvent with options: ${options}`)
    );
  }
  async getAddress() {
    throw new Error(notInitializedError("getAddress"));
  }
  getType() {
    return import_providerFactory.ProviderTypeEnum.none;
  }
}
const emptyProvider = new EmptyProvider();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  EmptyProvider,
  emptyProvider
});
//# sourceMappingURL=emptyProvider.cjs.map
