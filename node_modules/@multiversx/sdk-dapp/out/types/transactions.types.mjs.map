{
  "version": 3,
  "sources": ["../../src/types/transactions.types.ts"],
  "sourcesContent": ["import { IPlainTransactionObject, Transaction } from 'lib/sdkCore';\nimport type { ITransactionListItem } from 'lib/sdkDappUi';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum,\n  TransactionTypesEnum\n} from 'types/enums.types';\nimport { ResultType } from './serverTransactions.types';\n\nexport interface SignedTransactionType extends IPlainTransactionObject {\n  hash: string;\n  status?: TransactionServerStatusesEnum | TransactionBatchStatusesEnum;\n  inTransit?: boolean;\n}\n\nexport interface MultiSignTransactionType {\n  multiTxData?: string;\n  transactionIndex: number;\n  transaction: Transaction;\n  needsSigning: boolean;\n}\n\ninterface MultiEsdtType {\n  type:\n    | TransactionTypesEnum.esdtTransaction\n    | TransactionTypesEnum.nftTransaction;\n  receiver: string;\n  token?: string;\n  nonce?: string;\n  amount?: string;\n  data: string;\n}\n\ninterface MultiEsdtScCallType {\n  type: TransactionTypesEnum.scCall;\n  receiver: string;\n  token?: string;\n  nonce?: string;\n  amount?: string;\n  data: string;\n}\n\nexport type MultiEsdtTransactionType = MultiEsdtType | MultiEsdtScCallType;\n\nexport interface TransactionDataTokenType {\n  tokenId: string;\n  amount: string;\n  receiver: string;\n  type?: MultiEsdtTransactionType['type'] | '';\n  nonce?: string;\n  multiTxData?: string;\n}\n\nexport type TransactionsDataTokensType =\n  | Record<string, TransactionDataTokenType>\n  | undefined;\n\nexport type TrackedTransactionResultType = SignedTransactionType & {\n  invalidTransaction: boolean;\n  results: ResultType[];\n  previousStatus: string;\n  hasStatusChanged: boolean;\n};\n\nexport enum TransactionDirectionEnum {\n  SELF = 'Self',\n  INTERNAL = 'Internal',\n  IN = 'In',\n  OUT = 'Out'\n}\n\n/**\n * Allows editing the title toast information\n */\nexport interface TransactionsDisplayInfoType {\n  /**\n   * Optional error message to be displayed in notification title in notification title if the transaction fails.\n   */\n  errorMessage?: string;\n\n  /**\n   * Optional success message to be displayed in notification title if the transaction succeeds.\n   */\n  successMessage?: string;\n\n  /**\n   * Optional message to be displayed in notification title while the transaction is processing.\n   */\n  processingMessage?: string;\n\n  /**\n   * Optional message to be displayed in notification title when the transaction is submitted.\n   */\n  submittedMessage?: string;\n\n  /**\n   * Optional duration of the transaction in milliseconds.\n   */\n  transactionDuration?: number;\n\n  /**\n   * Optional message to be displayed in notification title if the transaction times out.\n   */\n  timedOutMessage?: string;\n\n  /**\n   * Optional message to be displayed in notification title if the transaction is invalid.\n   */\n  invalidMessage?: string;\n\n  /**\n   * Optional message to be displayed in notification title when the transaction is received.\n   */\n  receivedMessage?: string;\n}\n\nexport type SessionTransactionType = {\n  transactions: SignedTransactionType[];\n  status?: TransactionBatchStatusesEnum | TransactionServerStatusesEnum;\n  errorMessage?: string;\n  /**\n   * Optional custom information to be displayed in the toast notification.\n   */\n  transactionsDisplayInfo?: TransactionsDisplayInfoType;\n  interpretedTransactions?: Record<string, ITransactionListItem>;\n  /**\n   * Optional custom information to be associated with the transaction session.\n   */\n  sessionInformation?: any;\n};\n"],
  "mappings": "AAgEO,IAAKA,OACVA,EAAA,KAAO,OACPA,EAAA,SAAW,WACXA,EAAA,GAAK,KACLA,EAAA,IAAM,MAJIA,OAAA",
  "names": ["TransactionDirectionEnum"]
}
