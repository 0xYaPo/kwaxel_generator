"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transaction_list_item_types_exports = {};
__export(transaction_list_item_types_exports, {
  TransactionActionMethodTypeEnum: () => TransactionActionMethodTypeEnum,
  TransactionIconTypeEnum: () => TransactionIconTypeEnum
});
module.exports = __toCommonJS(transaction_list_item_types_exports);
var TransactionIconTypeEnum = /* @__PURE__ */ ((TransactionIconTypeEnum2) => {
  TransactionIconTypeEnum2["FAILED"] = "failed";
  TransactionIconTypeEnum2["MULTIPLE_ASSETS"] = "multiple_assets";
  TransactionIconTypeEnum2["ASSET"] = "asset";
  TransactionIconTypeEnum2["NFT"] = "nft";
  TransactionIconTypeEnum2["SFT"] = "sft";
  TransactionIconTypeEnum2["CONTRACT"] = "contract";
  TransactionIconTypeEnum2["SYMBOL"] = "symbol";
  return TransactionIconTypeEnum2;
})(TransactionIconTypeEnum || {});
var TransactionActionMethodTypeEnum = /* @__PURE__ */ ((TransactionActionMethodTypeEnum2) => {
  TransactionActionMethodTypeEnum2["transfer"] = "Transfer";
  TransactionActionMethodTypeEnum2["delegate"] = "Delegate";
  TransactionActionMethodTypeEnum2["stake"] = "Stake";
  TransactionActionMethodTypeEnum2["unDelegate"] = "Undelegate";
  TransactionActionMethodTypeEnum2["stakeClaimRewards"] = "Stake Claim Rewards";
  TransactionActionMethodTypeEnum2["reDelegateRewards"] = "Redelegate Rewards";
  TransactionActionMethodTypeEnum2["withdraw"] = "Withdraw";
  TransactionActionMethodTypeEnum2["claimLockedAssets"] = "Claim Locked Assets";
  TransactionActionMethodTypeEnum2["swapTokensFixedInput"] = "Swap";
  TransactionActionMethodTypeEnum2["swapTokensFixedOutput"] = "Swap";
  TransactionActionMethodTypeEnum2["swap"] = "Swap";
  TransactionActionMethodTypeEnum2["multiPairSwap"] = "Multiple Pair Swap";
  TransactionActionMethodTypeEnum2["aggregateEgld"] = "Aggregate EGLD";
  TransactionActionMethodTypeEnum2["addLiquidity"] = "Add Liquidity";
  TransactionActionMethodTypeEnum2["addLiquidityProxy"] = "Add Liquidity Proxy";
  TransactionActionMethodTypeEnum2["removeLiquidity"] = "Remove Liquidity";
  TransactionActionMethodTypeEnum2["removeLiquidityProxy"] = "Remove Liquidity Proxy";
  TransactionActionMethodTypeEnum2["enterFarm"] = "Enter Farm";
  TransactionActionMethodTypeEnum2["enterFarmProxy"] = "Enter Farm Proxy";
  TransactionActionMethodTypeEnum2["enterFarmAndLockRewards"] = "Enter Farm & Lock Rewards";
  TransactionActionMethodTypeEnum2["enterFarmAndLockRewardsProxy"] = "Enter Farm & Lock Rewards Proxy";
  TransactionActionMethodTypeEnum2["exitFarm"] = "Exit Farm";
  TransactionActionMethodTypeEnum2["exitFarmProxy"] = "Exit Farm Proxy";
  TransactionActionMethodTypeEnum2["claimRewards"] = "Claim Rewards";
  TransactionActionMethodTypeEnum2["claimRewardsProxy"] = "Claim Rewards Proxy";
  TransactionActionMethodTypeEnum2["compoundRewards"] = "Reinvest Rewards";
  TransactionActionMethodTypeEnum2["compoundRewardsProxy"] = "Reinvest Rewards Proxy";
  TransactionActionMethodTypeEnum2["createNftMinter"] = "Create NFT Minter";
  TransactionActionMethodTypeEnum2["scDeploy"] = "Smart Contract Deploy";
  TransactionActionMethodTypeEnum2["wrapEgld"] = "Wrap EGLD";
  TransactionActionMethodTypeEnum2["unwrapEgld"] = "Unwrap EGLD";
  TransactionActionMethodTypeEnum2["lockAssets"] = "Lock Assets";
  TransactionActionMethodTypeEnum2["unlockAssets"] = "Unlock Assets";
  TransactionActionMethodTypeEnum2["mergeLockedAssetTokens"] = "Merge Locked Tokens";
  TransactionActionMethodTypeEnum2["stakeFarm"] = "Stake Farm";
  TransactionActionMethodTypeEnum2["stakeFarmProxy"] = "Stake Farm Proxy";
  TransactionActionMethodTypeEnum2["stakeFarmTokens"] = "Stake Farm Tokens";
  TransactionActionMethodTypeEnum2["stakeFarmTokensProxy"] = "Stake Farm Tokens Proxy";
  TransactionActionMethodTypeEnum2["unstakeFarm"] = "Unstake Farm";
  TransactionActionMethodTypeEnum2["unstakeFarmProxy"] = "Unstake Farm Proxy Proxy";
  TransactionActionMethodTypeEnum2["unstakeFarmTokens"] = "Unstake Farm Tokens";
  TransactionActionMethodTypeEnum2["unstakeFarmTokensProxy"] = "Unstake Farm Proxy";
  TransactionActionMethodTypeEnum2["claimDualYield"] = "Claim Dual Yield";
  TransactionActionMethodTypeEnum2["claimDualYieldProxy"] = "Claim Dual Yield Proxy";
  TransactionActionMethodTypeEnum2["unbondFarm"] = "Unbond Farm";
  TransactionActionMethodTypeEnum2["ClaimDeveloperRewards"] = "Claim Developer Rewards";
  TransactionActionMethodTypeEnum2["ChangeOwnerAddress"] = "Change Owner Address";
  TransactionActionMethodTypeEnum2["SetUserName"] = "Set Username";
  TransactionActionMethodTypeEnum2["SaveKeyValue"] = "Save Key Value";
  TransactionActionMethodTypeEnum2["ESDTTransfer"] = "Transfer ESDT";
  TransactionActionMethodTypeEnum2["ESDTBurn"] = "Burn ESDT";
  TransactionActionMethodTypeEnum2["ESDTFreeze"] = "Freeze ESDT";
  TransactionActionMethodTypeEnum2["ESDTUnFreeze"] = "Unfreeze ESDT";
  TransactionActionMethodTypeEnum2["ESDTWipe"] = "Wipe ESDT";
  TransactionActionMethodTypeEnum2["ESDTPause"] = "Pause ESDT";
  TransactionActionMethodTypeEnum2["ESDTUnPause"] = "Unpause ESDTBurn";
  TransactionActionMethodTypeEnum2["ESDTSetRole"] = "Set ESDT Role";
  TransactionActionMethodTypeEnum2["ESDTUnSetRole"] = "Unset ESDT Role";
  TransactionActionMethodTypeEnum2["ESDTSetLimitedTransfer"] = "Set ESDT Limited Transfer";
  TransactionActionMethodTypeEnum2["ESDTUnSetLimitedTransfer"] = "Unset ESDT Limited Transfer";
  TransactionActionMethodTypeEnum2["ESDTLocalBurn"] = "Local ESDT Burn";
  TransactionActionMethodTypeEnum2["ESDTLocalMint"] = "Local ESDT Mint";
  TransactionActionMethodTypeEnum2["ESDTNFTTransfer"] = "Transfer ESDT/NFT";
  TransactionActionMethodTypeEnum2["ESDTNFTCreate"] = "Create ESDT/NFT";
  TransactionActionMethodTypeEnum2["ESDTNFTAddQuantity"] = "Add ESDT/NFT Quantity";
  TransactionActionMethodTypeEnum2["ESDTNFTBurn"] = "Burn ESDT/NFT";
  TransactionActionMethodTypeEnum2["ESDTNFTAddURI"] = "Add ESDT/NFT URI";
  TransactionActionMethodTypeEnum2["ESDTNFTUpdateAttributes"] = "Update ESDT/NFT Attributes";
  TransactionActionMethodTypeEnum2["MultiESDTNFTTransfer"] = "Multiple ESDT/NFT Transfer";
  TransactionActionMethodTypeEnum2["SetGuardian"] = "Register Guardian";
  TransactionActionMethodTypeEnum2["GuardAccount"] = "Activate Guardian";
  TransactionActionMethodTypeEnum2["UnGuardAccount"] = "Deactivate Guardian";
  return TransactionActionMethodTypeEnum2;
})(TransactionActionMethodTypeEnum || {});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TransactionActionMethodTypeEnum,
  TransactionIconTypeEnum
});
//# sourceMappingURL=transaction-list-item.types.cjs.map
