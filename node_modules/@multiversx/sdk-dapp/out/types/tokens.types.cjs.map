{
  "version": 3,
  "sources": ["../../src/types/tokens.types.ts"],
  "sourcesContent": ["import { ScamInfoType } from './account.types';\n\nexport interface TokenRolesType {\n  address: string;\n  roles: string[];\n}\n\nexport interface TokenLockedAccountType {\n  address: string;\n  name: string;\n  balance: string;\n}\nexport interface TokenSupplyType {\n  supply: number;\n  circulatingSupply: number;\n  minted: number;\n  burnt: number;\n  initialMinted: number;\n  lockedAccounts?: TokenLockedAccountType[];\n}\n\nexport interface TokenType {\n  identifier: string;\n  ticker?: string;\n  name: string;\n  balance?: string;\n  decimals?: number;\n  owner: string;\n  minted: string;\n  burnt: string;\n  supply: string | number;\n  circulatingSupply: string | number;\n  canBurn: boolean;\n  canChangeOwner: boolean;\n  canFreeze: boolean;\n  canMint: boolean;\n  canPause: boolean;\n  canUpgrade: boolean;\n  canWipe: boolean;\n  isPaused: boolean;\n  transactions: number;\n  accounts: number;\n  price?: number;\n  marketCap?: number;\n  valueUsd?: number;\n  assets?: {\n    website?: string;\n    description?: string;\n    status?: string;\n    pngUrl?: string;\n    svgUrl?: string;\n    social?: any;\n    extraTokens?: string[];\n    lockedAccounts?: { [key: string]: string };\n    ledgerSignature?: string;\n  };\n}\n\nexport interface CollectionType {\n  collection: string;\n  type: NftEnumType;\n  name: string;\n  ticker: string;\n  timestamp: number;\n  canFreeze: boolean;\n  canWipe: boolean;\n  canPause: boolean;\n  canTransferRole: boolean;\n  owner: string;\n  decimals?: number;\n  assets?: {\n    website?: string;\n    description?: string;\n    status?: string;\n    pngUrl?: string;\n    svgUrl?: string;\n  };\n  scamInfo?: ScamInfoType;\n}\n\nexport enum EsdtEnumType {\n  FungibleESDT = 'FungibleESDT'\n}\n\nexport enum NftEnumType {\n  NonFungibleESDT = 'NonFungibleESDT',\n  SemiFungibleESDT = 'SemiFungibleESDT',\n  MetaESDT = 'MetaESDT'\n}\n\nexport interface NftType {\n  identifier: string;\n  collection: string;\n  ticker?: string;\n  timestamp: number;\n  attributes: string;\n  nonce: number;\n  type: NftEnumType;\n  name: string;\n  creator: string;\n  royalties: number;\n  balance: string;\n  uris?: string[];\n  url?: string;\n  thumbnailUrl?: string;\n  tags?: string[];\n  decimals?: number;\n  owner?: string;\n  supply?: string;\n  isWhitelistedStorage?: boolean;\n  owners?: {\n    address: string;\n    balance: string;\n  }[];\n  assets?: {\n    website?: string;\n    description?: string;\n    status?: string;\n    pngUrl?: string;\n    svgUrl?: string;\n  };\n  metadata?: {\n    description?: string;\n    fileType?: string;\n    fileUri?: string;\n    fileName?: string;\n  };\n  media?: {\n    url: string;\n    originalUrl: string;\n    thumbnailUrl: string;\n    fileType: string;\n    fileSize: number;\n  }[];\n  scamInfo?: ScamInfoType;\n}\n\nexport interface TokenAssets {\n  description: string;\n  status: string;\n  svgUrl: string;\n  website?: string;\n  pngUrl?: string;\n  social?: any;\n  extraTokens?: string[];\n  lockedAccounts?: { [key: string]: string };\n}\n\nexport interface TokenMediaType {\n  url?: string;\n  originalUrl?: string;\n  thumbnailUrl?: string;\n  fileType?: string;\n  fileSize?: number;\n}\n\nexport interface TokenOptionType {\n  tokenLabel: string;\n  tokenDecimals: number;\n  tokenAvatar: string;\n  assets?: TokenAssets;\n  type?: NftEnumType;\n  error?: string;\n  esdtPrice?: number;\n  ticker?: string;\n  identifier?: string;\n  name?: string;\n  isLoading?: boolean;\n}\n\nexport interface TokenInfoResponse {\n  identifier: string;\n  name: string;\n  ticker: string;\n  decimals: number;\n  type?: NftEnumType;\n  assets: TokenAssets;\n  media?: TokenMediaType[];\n  price: number;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgFO,IAAK,eAAL,kBAAKA,kBAAL;AACL,EAAAA,cAAA,kBAAe;AADL,SAAAA;AAAA,GAAA;AAIL,IAAK,cAAL,kBAAKC,iBAAL;AACL,EAAAA,aAAA,qBAAkB;AAClB,EAAAA,aAAA,sBAAmB;AACnB,EAAAA,aAAA,cAAW;AAHD,SAAAA;AAAA,GAAA;",
  "names": ["EsdtEnumType", "NftEnumType"]
}
