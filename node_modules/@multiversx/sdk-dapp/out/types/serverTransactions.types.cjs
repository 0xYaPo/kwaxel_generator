"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var serverTransactions_types_exports = {};
__export(serverTransactions_types_exports, {
  BatchTransactionStatus: () => BatchTransactionStatus,
  DecodeMethodEnum: () => DecodeMethodEnum,
  HiddenTransactionOperationType: () => HiddenTransactionOperationType,
  TransactionActionCategoryEnum: () => TransactionActionCategoryEnum,
  TransactionActionsEnum: () => TransactionActionsEnum,
  TransactionDirectionEnum: () => TransactionDirectionEnum,
  TransactionOperationActionTypeEnum: () => TransactionOperationActionTypeEnum,
  TransferTypeEnum: () => TransferTypeEnum,
  VisibleTransactionOperationType: () => VisibleTransactionOperationType
});
module.exports = __toCommonJS(serverTransactions_types_exports);
var TransactionActionsEnum = /* @__PURE__ */ ((TransactionActionsEnum2) => {
  TransactionActionsEnum2["transfer"] = "transfer";
  TransactionActionsEnum2["unBond"] = "unBond";
  TransactionActionsEnum2["unStake"] = "unStake";
  TransactionActionsEnum2["delegate"] = "delegate";
  TransactionActionsEnum2["stake"] = "stake";
  TransactionActionsEnum2["unDelegate"] = "unDelegate";
  TransactionActionsEnum2["stakeClaimRewards"] = "claimRewards";
  TransactionActionsEnum2["reDelegateRewards"] = "reDelegateRewards";
  TransactionActionsEnum2["withdraw"] = "withdraw";
  TransactionActionsEnum2["claimLockedAssets"] = "claimLockedAssets";
  TransactionActionsEnum2["swapTokensFixedInput"] = "swapTokensFixedInput";
  TransactionActionsEnum2["swapTokensFixedOutput"] = "swapTokensFixedOutput";
  TransactionActionsEnum2["swap"] = "swap";
  TransactionActionsEnum2["addLiquidity"] = "addLiquidity";
  TransactionActionsEnum2["addLiquidityProxy"] = "addLiquidityProxy";
  TransactionActionsEnum2["removeLiquidity"] = "removeLiquidity";
  TransactionActionsEnum2["removeLiquidityProxy"] = "removeLiquidityProxy";
  TransactionActionsEnum2["enterFarm"] = "enterFarm";
  TransactionActionsEnum2["enterFarmProxy"] = "enterFarmProxy";
  TransactionActionsEnum2["enterFarmAndLockRewards"] = "enterFarmAndLockRewards";
  TransactionActionsEnum2["enterFarmAndLockRewardsProxy"] = "enterFarmAndLockRewardsProxy";
  TransactionActionsEnum2["exitFarm"] = "exitFarm";
  TransactionActionsEnum2["exitFarmProxy"] = "exitFarmProxy";
  TransactionActionsEnum2["claimRewards"] = "claimRewards";
  TransactionActionsEnum2["claimRewardsProxy"] = "claimRewardsProxy";
  TransactionActionsEnum2["compoundRewards"] = "compoundRewards";
  TransactionActionsEnum2["compoundRewardsProxy"] = "compoundRewardsProxy";
  TransactionActionsEnum2["wrapEgld"] = "wrapEgld";
  TransactionActionsEnum2["unwrapEgld"] = "unwrapEgld";
  TransactionActionsEnum2["unlockAssets"] = "unlockAssets";
  TransactionActionsEnum2["mergeLockedAssetTokens"] = "mergeLockedAssetTokens";
  TransactionActionsEnum2["stakeFarm"] = "stakeFarm";
  TransactionActionsEnum2["stakeFarmProxy"] = "stakeFarmProxy";
  TransactionActionsEnum2["stakeFarmTokens"] = "stakeFarmTokens";
  TransactionActionsEnum2["stakeFarmTokensProxy"] = "stakeFarmTokensProxy";
  TransactionActionsEnum2["unstakeFarm"] = "unstakeFarm";
  TransactionActionsEnum2["unstakeFarmProxy"] = "unstakeFarmProxy";
  TransactionActionsEnum2["unstakeFarmTokens"] = "unstakeFarmTokens";
  TransactionActionsEnum2["unstakeFarmTokensProxy"] = "unstakeFarmTokensProxy";
  TransactionActionsEnum2["claimDualYield"] = "claimDualYield";
  TransactionActionsEnum2["claimDualYieldProxy"] = "claimDualYieldProxy";
  TransactionActionsEnum2["unbondFarm"] = "unbondFarm";
  TransactionActionsEnum2["ping"] = "ping";
  TransactionActionsEnum2["lockTokens"] = "lockTokens";
  TransactionActionsEnum2["migrateOldTokens"] = "migrateOldTokens";
  return TransactionActionsEnum2;
})(TransactionActionsEnum || {});
var TransactionActionCategoryEnum = /* @__PURE__ */ ((TransactionActionCategoryEnum2) => {
  TransactionActionCategoryEnum2["esdtNft"] = "esdtNft";
  TransactionActionCategoryEnum2["mex"] = "mex";
  TransactionActionCategoryEnum2["stake"] = "stake";
  TransactionActionCategoryEnum2["scCall"] = "scCall";
  return TransactionActionCategoryEnum2;
})(TransactionActionCategoryEnum || {});
var TransactionOperationActionTypeEnum = /* @__PURE__ */ ((TransactionOperationActionTypeEnum2) => {
  TransactionOperationActionTypeEnum2["none"] = "none";
  TransactionOperationActionTypeEnum2["transfer"] = "transfer";
  TransactionOperationActionTypeEnum2["burn"] = "burn";
  TransactionOperationActionTypeEnum2["addQuantity"] = "addQuantity";
  TransactionOperationActionTypeEnum2["create"] = "create";
  TransactionOperationActionTypeEnum2["multiTransfer"] = "multiTransfer";
  TransactionOperationActionTypeEnum2["localMint"] = "localMint";
  TransactionOperationActionTypeEnum2["localBurn"] = "localBurn";
  TransactionOperationActionTypeEnum2["wipe"] = "wipe";
  TransactionOperationActionTypeEnum2["freeze"] = "freeze";
  TransactionOperationActionTypeEnum2["writeLog"] = "writeLog";
  TransactionOperationActionTypeEnum2["signalError"] = "signalError";
  TransactionOperationActionTypeEnum2["ESDTLocalMint"] = "ESDTLocalMint";
  TransactionOperationActionTypeEnum2["ESDTLocalBurn"] = "ESDTLocalBurn";
  return TransactionOperationActionTypeEnum2;
})(TransactionOperationActionTypeEnum || {});
var VisibleTransactionOperationType = /* @__PURE__ */ ((VisibleTransactionOperationType2) => {
  VisibleTransactionOperationType2["nft"] = "nft";
  VisibleTransactionOperationType2["esdt"] = "esdt";
  VisibleTransactionOperationType2["egld"] = "egld";
  return VisibleTransactionOperationType2;
})(VisibleTransactionOperationType || {});
var HiddenTransactionOperationType = /* @__PURE__ */ ((HiddenTransactionOperationType2) => {
  HiddenTransactionOperationType2["none"] = "none";
  HiddenTransactionOperationType2["error"] = "error";
  HiddenTransactionOperationType2["log"] = "log";
  return HiddenTransactionOperationType2;
})(HiddenTransactionOperationType || {});
var TransferTypeEnum = /* @__PURE__ */ ((TransferTypeEnum2) => {
  TransferTypeEnum2["Transaction"] = "Transaction";
  TransferTypeEnum2["SmartContractResult"] = "SmartContractResult";
  return TransferTypeEnum2;
})(TransferTypeEnum || {});
var TransactionDirectionEnum = /* @__PURE__ */ ((TransactionDirectionEnum2) => {
  TransactionDirectionEnum2["SELF"] = "Self";
  TransactionDirectionEnum2["INTERNAL"] = "Internal";
  TransactionDirectionEnum2["IN"] = "In";
  TransactionDirectionEnum2["OUT"] = "Out";
  return TransactionDirectionEnum2;
})(TransactionDirectionEnum || {});
var DecodeMethodEnum = /* @__PURE__ */ ((DecodeMethodEnum2) => {
  DecodeMethodEnum2["raw"] = "raw";
  DecodeMethodEnum2["text"] = "text";
  DecodeMethodEnum2["decimal"] = "decimal";
  DecodeMethodEnum2["smart"] = "smart";
  return DecodeMethodEnum2;
})(DecodeMethodEnum || {});
var BatchTransactionStatus = /* @__PURE__ */ ((BatchTransactionStatus2) => {
  BatchTransactionStatus2["pending"] = "pending";
  BatchTransactionStatus2["success"] = "success";
  BatchTransactionStatus2["invalid"] = "invalid";
  BatchTransactionStatus2["dropped"] = "dropped";
  BatchTransactionStatus2["fail"] = "fail";
  return BatchTransactionStatus2;
})(BatchTransactionStatus || {});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BatchTransactionStatus,
  DecodeMethodEnum,
  HiddenTransactionOperationType,
  TransactionActionCategoryEnum,
  TransactionActionsEnum,
  TransactionDirectionEnum,
  TransactionOperationActionTypeEnum,
  TransferTypeEnum,
  VisibleTransactionOperationType
});
//# sourceMappingURL=serverTransactions.types.cjs.map
