"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var enums_types_exports = {};
__export(enums_types_exports, {
  ESDTTransferTypesEnum: () => ESDTTransferTypesEnum,
  EnvironmentsEnum: () => EnvironmentsEnum,
  GuardianActionsEnum: () => GuardianActionsEnum,
  SigningErrorsEnum: () => SigningErrorsEnum,
  SigningWarningsEnum: () => SigningWarningsEnum,
  TransactionBatchStatusesEnum: () => TransactionBatchStatusesEnum,
  TransactionServerStatusesEnum: () => TransactionServerStatusesEnum,
  TransactionTypesEnum: () => TransactionTypesEnum,
  TypesOfSmartContractCallsEnum: () => TypesOfSmartContractCallsEnum
});
module.exports = __toCommonJS(enums_types_exports);
var EnvironmentsEnum = /* @__PURE__ */ ((EnvironmentsEnum2) => {
  EnvironmentsEnum2["testnet"] = "testnet";
  EnvironmentsEnum2["devnet"] = "devnet";
  EnvironmentsEnum2["mainnet"] = "mainnet";
  return EnvironmentsEnum2;
})(EnvironmentsEnum || {});
var TransactionServerStatusesEnum = /* @__PURE__ */ ((TransactionServerStatusesEnum2) => {
  TransactionServerStatusesEnum2["pending"] = "pending";
  TransactionServerStatusesEnum2["fail"] = "fail";
  TransactionServerStatusesEnum2["invalid"] = "invalid";
  TransactionServerStatusesEnum2["success"] = "success";
  TransactionServerStatusesEnum2["executed"] = "executed";
  TransactionServerStatusesEnum2["notExecuted"] = "not executed";
  TransactionServerStatusesEnum2["rewardReverted"] = "reward-reverted";
  return TransactionServerStatusesEnum2;
})(TransactionServerStatusesEnum || {});
var TransactionTypesEnum = /* @__PURE__ */ ((TransactionTypesEnum2) => {
  TransactionTypesEnum2["MultiESDTNFTTransfer"] = "MultiESDTNFTTransfer";
  TransactionTypesEnum2["ESDTTransfer"] = "ESDTTransfer";
  TransactionTypesEnum2["ESDTNFTBurn"] = "ESDTNFTBurn";
  TransactionTypesEnum2["ESDTNFTTransfer"] = "ESDTNFTTransfer";
  TransactionTypesEnum2["esdtTransaction"] = "esdtTransaction";
  TransactionTypesEnum2["nftTransaction"] = "nftTransaction";
  TransactionTypesEnum2["scCall"] = "scCall";
  return TransactionTypesEnum2;
})(TransactionTypesEnum || {});
var TransactionBatchStatusesEnum = /* @__PURE__ */ ((TransactionBatchStatusesEnum2) => {
  TransactionBatchStatusesEnum2["signed"] = "signed";
  TransactionBatchStatusesEnum2["cancelled"] = "cancelled";
  TransactionBatchStatusesEnum2["success"] = "success";
  TransactionBatchStatusesEnum2["sent"] = "sent";
  TransactionBatchStatusesEnum2["fail"] = "fail";
  TransactionBatchStatusesEnum2["timedOut"] = "timedOut";
  TransactionBatchStatusesEnum2["invalid"] = "invalid";
  return TransactionBatchStatusesEnum2;
})(TransactionBatchStatusesEnum || {});
var TypesOfSmartContractCallsEnum = /* @__PURE__ */ ((TypesOfSmartContractCallsEnum2) => {
  TypesOfSmartContractCallsEnum2["MultiESDTNFTTransfer"] = "MultiESDTNFTTransfer";
  TypesOfSmartContractCallsEnum2["ESDTNFTTransfer"] = "ESDTNFTTransfer";
  return TypesOfSmartContractCallsEnum2;
})(TypesOfSmartContractCallsEnum || {});
var ESDTTransferTypesEnum = /* @__PURE__ */ ((ESDTTransferTypesEnum2) => {
  ESDTTransferTypesEnum2["ESDTNFTTransfer"] = "ESDTNFTTransfer";
  ESDTTransferTypesEnum2["ESDTNFTBurn"] = "ESDTNFTBurn";
  ESDTTransferTypesEnum2["ESDTNFTAddQuantity"] = "ESDTNFTAddQuantity";
  ESDTTransferTypesEnum2["ESDTNFTCreate"] = "ESDTNFTCreate";
  ESDTTransferTypesEnum2["MultiESDTNFTTransfer"] = "MultiESDTNFTTransfer";
  ESDTTransferTypesEnum2["ESDTTransfer"] = "ESDTTransfer";
  ESDTTransferTypesEnum2["ESDTBurn"] = "ESDTBurn";
  ESDTTransferTypesEnum2["ESDTLocalMint"] = "ESDTLocalMint";
  ESDTTransferTypesEnum2["ESDTLocalBurn"] = "ESDTLocalBurn";
  ESDTTransferTypesEnum2["ESDTWipe"] = "ESDTWipe";
  ESDTTransferTypesEnum2["ESDTFreeze"] = "ESDTFreeze";
  return ESDTTransferTypesEnum2;
})(ESDTTransferTypesEnum || {});
var GuardianActionsEnum = /* @__PURE__ */ ((GuardianActionsEnum2) => {
  GuardianActionsEnum2["SetGuardian"] = "SetGuardian";
  GuardianActionsEnum2["GuardAccount"] = "GuardAccount";
  GuardianActionsEnum2["UnGuardAccount"] = "UnGuardAccount";
  return GuardianActionsEnum2;
})(GuardianActionsEnum || {});
var SigningErrorsEnum = /* @__PURE__ */ ((SigningErrorsEnum2) => {
  SigningErrorsEnum2["notInitialized"] = "Provider not initialized";
  SigningErrorsEnum2["errorSigning"] = "Error when signing";
  SigningErrorsEnum2["errorSigningTx"] = "Error signing transaction";
  SigningErrorsEnum2["missingProviderMessage"] = "You need a signer/valid signer to send a transaction, use either WalletProvider, LedgerProvider or WalletConnect";
  SigningErrorsEnum2["defaultTransactionStatusMessage"] = "Undefined transaction status";
  SigningErrorsEnum2["secondLoginAttemptError"] = "Action not allowed. User is logged in. Call logout() first";
  SigningErrorsEnum2["senderDifferentThanLoggedInAddress"] = "You cannot sign transactions from a different account";
  return SigningErrorsEnum2;
})(SigningErrorsEnum || {});
var SigningWarningsEnum = /* @__PURE__ */ ((SigningWarningsEnum2) => {
  SigningWarningsEnum2["cancelled"] = "Signing canceled";
  SigningWarningsEnum2["transactionCancelled"] = "Transaction canceled";
  return SigningWarningsEnum2;
})(SigningWarningsEnum || {});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ESDTTransferTypesEnum,
  EnvironmentsEnum,
  GuardianActionsEnum,
  SigningErrorsEnum,
  SigningWarningsEnum,
  TransactionBatchStatusesEnum,
  TransactionServerStatusesEnum,
  TransactionTypesEnum,
  TypesOfSmartContractCallsEnum
});
//# sourceMappingURL=enums.types.cjs.map
