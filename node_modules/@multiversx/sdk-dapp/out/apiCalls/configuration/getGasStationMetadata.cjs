"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getGasStationMetadata_exports = {};
__export(getGasStationMetadata_exports, {
  getGasStationMetadataFromApi: () => getGasStationMetadataFromApi
});
module.exports = __toCommonJS(getGasStationMetadata_exports);
var import_axios = __toESM(require("axios"));
var import_getCleanApiAddress = require("../../apiCalls/configuration/getCleanApiAddress");
const GAS_STATION_ENDPOINT = "transactions/ppu";
async function getGasStationMetadataFromApi(shard, customApiAddress) {
  const apiAddress = (0, import_getCleanApiAddress.getCleanApiAddress)(customApiAddress);
  const gasStationUrl = `${apiAddress}/${GAS_STATION_ENDPOINT}/${shard}`;
  try {
    const { data } = await import_axios.default.get(gasStationUrl);
    if (data) {
      return {
        [shard]: {
          lastBlock: data.lastBlock,
          fast: data.fast,
          faster: data.faster
        }
      };
    }
    return null;
  } catch (err) {
    console.error(
      "Error fetching gas station metadata from:",
      gasStationUrl,
      err
    );
    return null;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getGasStationMetadataFromApi
});
//# sourceMappingURL=getGasStationMetadata.cjs.map
