{
  "version": 3,
  "sources": ["../../../src/apiCalls/account/getAccountFromApi.ts"],
  "sourcesContent": ["import { ACCOUNTS_ENDPOINT } from 'apiCalls/endpoints';\nimport { axiosInstance } from 'apiCalls/utils/axiosInstance';\nimport { getCleanApiAddress } from 'apiCalls/utils/getCleanApiAddress';\nimport { TIMEOUT } from 'constants/network.constants';\nimport { AccountType } from 'types/account.types';\n\nexport const accountFetcher = ({\n  address,\n  baseURL\n}: {\n  address: string | null;\n  baseURL: string;\n}) => {\n  const apiAddress = getCleanApiAddress(baseURL);\n  const url = `${apiAddress}/${ACCOUNTS_ENDPOINT}/${address}?withGuardianInfo=true`;\n  // we need to get it with an axios instance because of cross-window user interaction issues\n  return axiosInstance.get(url, {\n    baseURL: apiAddress,\n    timeout: TIMEOUT\n  });\n};\n\nexport const getAccountFromApi = async ({\n  address,\n  baseURL\n}: {\n  address?: string;\n  baseURL: string;\n}) => {\n  if (!address) {\n    return null;\n  }\n\n  try {\n    const { data } = await accountFetcher({ address, baseURL });\n    return data as AccountType;\n  } catch (_err) {\n    console.error('error fetching configuration for ', address);\n  }\n\n  return null;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkC;AAClC,2BAA8B;AAC9B,gCAAmC;AACnC,qBAAwB;AAGjB,MAAM,iBAAiB,CAAC;AAAA,EAC7B;AAAA,EACA;AACF,MAGM;AACJ,QAAM,iBAAa,8CAAmB,OAAO;AAC7C,QAAM,MAAM,GAAG,UAAU,IAAI,kCAAiB,IAAI,OAAO;AAEzD,SAAO,mCAAc,IAAI,KAAK;AAAA,IAC5B,SAAS;AAAA,IACT,SAAS;AAAA,EACX,CAAC;AACH;AAEO,MAAM,oBAAoB,OAAO;AAAA,EACtC;AAAA,EACA;AACF,MAGM;AACJ,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,EACT;AAEA,MAAI;AACF,UAAM,EAAE,KAAK,IAAI,MAAM,eAAe,EAAE,SAAS,QAAQ,CAAC;AAC1D,WAAO;AAAA,EACT,SAAS,MAAM;AACb,YAAQ,MAAM,qCAAqC,OAAO;AAAA,EAC5D;AAEA,SAAO;AACT;",
  "names": []
}
