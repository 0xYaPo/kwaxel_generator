"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getAccountFromApi_exports = {};
__export(getAccountFromApi_exports, {
  accountFetcher: () => accountFetcher,
  getAccountFromApi: () => getAccountFromApi
});
module.exports = __toCommonJS(getAccountFromApi_exports);
var import_endpoints = require("../../apiCalls/endpoints");
var import_axiosInstance = require("../../apiCalls/utils/axiosInstance");
var import_getCleanApiAddress = require("../../apiCalls/utils/getCleanApiAddress");
var import_network = require("../../constants/network.constants");
const accountFetcher = ({
  address,
  baseURL
}) => {
  const apiAddress = (0, import_getCleanApiAddress.getCleanApiAddress)(baseURL);
  const url = `${apiAddress}/${import_endpoints.ACCOUNTS_ENDPOINT}/${address}?withGuardianInfo=true`;
  return import_axiosInstance.axiosInstance.get(url, {
    baseURL: apiAddress,
    timeout: import_network.TIMEOUT
  });
};
const getAccountFromApi = async ({
  address,
  baseURL
}) => {
  if (!address) {
    return null;
  }
  try {
    const { data } = await accountFetcher({ address, baseURL });
    return data;
  } catch (_err) {
    console.error("error fetching configuration for ", address);
  }
  return null;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  accountFetcher,
  getAccountFromApi
});
//# sourceMappingURL=getAccountFromApi.cjs.map
