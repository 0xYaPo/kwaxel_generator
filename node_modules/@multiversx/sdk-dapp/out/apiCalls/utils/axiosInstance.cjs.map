{
  "version": 3,
  "sources": ["../../../src/apiCalls/utils/axiosInstance.ts"],
  "sourcesContent": ["import { buildAxiosFetch } from '@lifeomic/axios-fetch';\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\n\ntype RequestInit = {\n  method?: string;\n  headers?: Record<string, string>;\n  body?: string;\n  [key: string]: any;\n};\n\n// Needs to be used beacause an async call made after cross-window user interaction makes the dapp unresponsive\n\nconst fetch = buildAxiosFetch(axios);\n\nconst getFormattedAxiosResponse = async <T>(response: Response, config?: T) => {\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n\n  // Clone the response to be able to read it twice (for status and data)\n  const clonedResponse = response.clone();\n\n  // Parse the JSON body asynchronously\n  const jsonPromise = clonedResponse.json();\n\n  // Return the standardized response object\n  const [responseData] = await Promise.all([jsonPromise]);\n  return {\n    data: responseData,\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers,\n    config\n  };\n};\n\nasync function customPost<T = any, R = AxiosResponse<T, any>, D = any>(\n  url: string,\n  data?: D,\n  config?: AxiosRequestConfig<D> | undefined\n): Promise<R> {\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(config?.headers || {})\n      },\n      ...config\n    } as RequestInit);\n\n    return getFormattedAxiosResponse(response, config) as unknown as Promise<R>;\n  } catch (error) {\n    console.error('Fetch Error:', error);\n    throw error;\n  }\n}\n\nasync function customGet<T = any, R = AxiosResponse<T, any>, D = any>(\n  url: string,\n  config?: AxiosRequestConfig<D> | undefined\n): Promise<R> {\n  try {\n    const response = await fetch(url, config as RequestInit);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    return getFormattedAxiosResponse(response, config) as unknown as Promise<R>;\n  } catch (error) {\n    console.error('Fetch Error:', error);\n    throw error;\n  }\n}\n\nasync function customPatch<T = any, R = AxiosResponse<T, any>, D = any>(\n  url: string,\n  data?: D,\n  config?: AxiosRequestConfig<D> | undefined\n): Promise<R> {\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      body: data ? JSON.stringify(data) : undefined,\n      headers: config?.headers || {},\n      ...config\n    } as RequestInit);\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    return getFormattedAxiosResponse(response, config) as unknown as Promise<R>;\n  } catch (error) {\n    console.error('Fetch Error:', error);\n    throw error;\n  }\n}\n\nconst axiosInstance = axios.create();\naxiosInstance.get = customGet;\naxiosInstance.post = customPost;\naxiosInstance.patch = customPatch;\n\nexport { axiosInstance };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBAAgC;AAChC,mBAAyD;AAWzD,MAAM,YAAQ,oCAAgB,aAAAA,OAAK;AAEnC,MAAM,4BAA4B,OAAU,UAAoB,WAAe;AAC7E,MAAI,CAAC,SAAS,IAAI;AAChB,UAAM,IAAI,MAAM,uBAAuB,SAAS,MAAM,EAAE;AAAA,EAC1D;AAGA,QAAM,iBAAiB,SAAS,MAAM;AAGtC,QAAM,cAAc,eAAe,KAAK;AAGxC,QAAM,CAAC,YAAY,IAAI,MAAM,QAAQ,IAAI,CAAC,WAAW,CAAC;AACtD,SAAO;AAAA,IACL,MAAM;AAAA,IACN,QAAQ,SAAS;AAAA,IACjB,YAAY,SAAS;AAAA,IACrB,SAAS,SAAS;AAAA,IAClB;AAAA,EACF;AACF;AAEA,eAAe,WACb,KACA,MACA,QACY;AACZ,MAAI;AACF,UAAM,WAAW,MAAM,MAAM,KAAK;AAAA,MAChC,QAAQ;AAAA,MACR,MAAM,OAAO,KAAK,UAAU,IAAI,IAAI;AAAA,MACpC,SAAS;AAAA,QACP,gBAAgB;AAAA,QAChB,GAAI,QAAQ,WAAW,CAAC;AAAA,MAC1B;AAAA,MACA,GAAG;AAAA,IACL,CAAgB;AAEhB,WAAO,0BAA0B,UAAU,MAAM;AAAA,EACnD,SAAS,OAAO;AACd,YAAQ,MAAM,gBAAgB,KAAK;AACnC,UAAM;AAAA,EACR;AACF;AAEA,eAAe,UACb,KACA,QACY;AACZ,MAAI;AACF,UAAM,WAAW,MAAM,MAAM,KAAK,MAAqB;AACvD,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,uBAAuB,SAAS,MAAM,EAAE;AAAA,IAC1D;AAEA,WAAO,0BAA0B,UAAU,MAAM;AAAA,EACnD,SAAS,OAAO;AACd,YAAQ,MAAM,gBAAgB,KAAK;AACnC,UAAM;AAAA,EACR;AACF;AAEA,eAAe,YACb,KACA,MACA,QACY;AACZ,MAAI;AACF,UAAM,WAAW,MAAM,MAAM,KAAK;AAAA,MAChC,QAAQ;AAAA,MACR,MAAM,OAAO,KAAK,UAAU,IAAI,IAAI;AAAA,MACpC,SAAS,QAAQ,WAAW,CAAC;AAAA,MAC7B,GAAG;AAAA,IACL,CAAgB;AAEhB,QAAI,CAAC,SAAS,IAAI;AAChB,YAAM,IAAI,MAAM,uBAAuB,SAAS,MAAM,EAAE;AAAA,IAC1D;AAEA,WAAO,0BAA0B,UAAU,MAAM;AAAA,EACnD,SAAS,OAAO;AACd,YAAQ,MAAM,gBAAgB,KAAK;AACnC,UAAM;AAAA,EACR;AACF;AAEA,MAAM,gBAAgB,aAAAA,QAAM,OAAO;AACnC,cAAc,MAAM;AACpB,cAAc,OAAO;AACrB,cAAc,QAAQ;",
  "names": ["axios"]
}
