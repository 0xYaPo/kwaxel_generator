"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var axiosInstance_exports = {};
__export(axiosInstance_exports, {
  axiosInstance: () => axiosInstance
});
module.exports = __toCommonJS(axiosInstance_exports);
var import_axios_fetch = require("@lifeomic/axios-fetch");
var import_axios = __toESM(require("axios"));
const fetch = (0, import_axios_fetch.buildAxiosFetch)(import_axios.default);
const getFormattedAxiosResponse = async (response, config) => {
  if (!response.ok) {
    throw new Error(`HTTP error! Status: ${response.status}`);
  }
  const clonedResponse = response.clone();
  const jsonPromise = clonedResponse.json();
  const [responseData] = await Promise.all([jsonPromise]);
  return {
    data: responseData,
    status: response.status,
    statusText: response.statusText,
    headers: response.headers,
    config
  };
};
async function customPost(url, data, config) {
  try {
    const response = await fetch(url, {
      method: "POST",
      body: data ? JSON.stringify(data) : void 0,
      headers: {
        "Content-Type": "application/json",
        ...config?.headers || {}
      },
      ...config
    });
    return getFormattedAxiosResponse(response, config);
  } catch (error) {
    console.error("Fetch Error:", error);
    throw error;
  }
}
async function customGet(url, config) {
  try {
    const response = await fetch(url, config);
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    return getFormattedAxiosResponse(response, config);
  } catch (error) {
    console.error("Fetch Error:", error);
    throw error;
  }
}
async function customPatch(url, data, config) {
  try {
    const response = await fetch(url, {
      method: "PATCH",
      body: data ? JSON.stringify(data) : void 0,
      headers: config?.headers || {},
      ...config
    });
    if (!response.ok) {
      throw new Error(`HTTP error! Status: ${response.status}`);
    }
    return getFormattedAxiosResponse(response, config);
  } catch (error) {
    console.error("Fetch Error:", error);
    throw error;
  }
}
const axiosInstance = import_axios.default.create();
axiosInstance.get = customGet;
axiosInstance.post = customPost;
axiosInstance.patch = customPatch;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  axiosInstance
});
//# sourceMappingURL=axiosInstance.cjs.map
