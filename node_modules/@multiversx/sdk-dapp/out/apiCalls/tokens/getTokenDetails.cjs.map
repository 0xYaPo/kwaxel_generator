{
  "version": 3,
  "sources": ["../../../src/apiCalls/tokens/getTokenDetails.ts"],
  "sourcesContent": ["import { NFTS_ENDPOINT, TOKENS_ENDPOINT } from 'apiCalls/endpoints';\nimport { axiosInstance } from 'apiCalls/utils/axiosInstance';\nimport { networkSelector } from 'store/selectors';\nimport { getState } from 'store/store';\nimport { TokenOptionType, TokenInfoResponse } from 'types/tokens.types';\nimport { getIdentifierType } from 'utils/validation/getIdentifierType';\n\nexport async function getTokenDetails({\n  tokenId\n}: {\n  tokenId: string;\n}): Promise<TokenOptionType> {\n  const network = networkSelector(getState());\n  const { isNft } = getIdentifierType(tokenId);\n\n  const tokenIdentifier = tokenId;\n  const tokenEndpoint = isNft ? NFTS_ENDPOINT : TOKENS_ENDPOINT;\n\n  if (!tokenIdentifier) {\n    return {\n      tokenDecimals: Number(network.decimals),\n      tokenLabel: '',\n      tokenAvatar: ''\n    };\n  }\n\n  try {\n    const { data: selectedToken } = await axiosInstance.get<TokenInfoResponse>(\n      `${network.apiAddress}/${tokenEndpoint}/${tokenIdentifier}`\n    );\n\n    const tokenDecimals = selectedToken\n      ? selectedToken?.decimals\n      : Number(network.decimals);\n    const tokenLabel = selectedToken ? selectedToken?.name : '';\n    const tokenAvatar = selectedToken\n      ? selectedToken?.assets?.svgUrl ?? selectedToken?.media?.[0]?.thumbnailUrl\n      : '';\n\n    return {\n      tokenDecimals: tokenDecimals,\n      tokenLabel,\n      type: selectedToken?.type,\n      tokenAvatar,\n      identifier: selectedToken?.identifier,\n      assets: selectedToken?.assets,\n      esdtPrice: selectedToken?.price,\n      ticker: selectedToken?.ticker,\n      name: selectedToken?.name\n    };\n  } catch (error: any) {\n    return {\n      error: `Error fetching token ${tokenIdentifier}: ${error.toString()}`,\n      tokenDecimals: Number(network.decimals),\n      tokenLabel: '',\n      tokenAvatar: '',\n      identifier: tokenIdentifier\n    };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA+C;AAC/C,2BAA8B;AAC9B,uBAAgC;AAChC,mBAAyB;AAEzB,+BAAkC;AAElC,eAAsB,gBAAgB;AAAA,EACpC;AACF,GAE6B;AAC3B,QAAM,cAAU,sCAAgB,uBAAS,CAAC;AAC1C,QAAM,EAAE,MAAM,QAAI,4CAAkB,OAAO;AAE3C,QAAM,kBAAkB;AACxB,QAAM,gBAAgB,QAAQ,iCAAgB;AAE9C,MAAI,CAAC,iBAAiB;AACpB,WAAO;AAAA,MACL,eAAe,OAAO,QAAQ,QAAQ;AAAA,MACtC,YAAY;AAAA,MACZ,aAAa;AAAA,IACf;AAAA,EACF;AAEA,MAAI;AACF,UAAM,EAAE,MAAM,cAAc,IAAI,MAAM,mCAAc;AAAA,MAClD,GAAG,QAAQ,UAAU,IAAI,aAAa,IAAI,eAAe;AAAA,IAC3D;AAEA,UAAM,gBAAgB,gBAClB,eAAe,WACf,OAAO,QAAQ,QAAQ;AAC3B,UAAM,aAAa,gBAAgB,eAAe,OAAO;AACzD,UAAM,cAAc,gBAChB,eAAe,QAAQ,UAAU,eAAe,QAAQ,CAAC,GAAG,eAC5D;AAEJ,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,MAAM,eAAe;AAAA,MACrB;AAAA,MACA,YAAY,eAAe;AAAA,MAC3B,QAAQ,eAAe;AAAA,MACvB,WAAW,eAAe;AAAA,MAC1B,QAAQ,eAAe;AAAA,MACvB,MAAM,eAAe;AAAA,IACvB;AAAA,EACF,SAAS,OAAY;AACnB,WAAO;AAAA,MACL,OAAO,wBAAwB,eAAe,KAAK,MAAM,SAAS,CAAC;AAAA,MACnE,eAAe,OAAO,QAAQ,QAAQ;AAAA,MACtC,YAAY;AAAA,MACZ,aAAa;AAAA,MACb,YAAY;AAAA,IACd;AAAA,EACF;AACF;",
  "names": []
}
