{
  "version": 3,
  "sources": ["../../../src/apiCalls/tokens/getPersistedTokenDetails.ts"],
  "sourcesContent": ["import { NFTS_ENDPOINT, TOKENS_ENDPOINT } from 'apiCalls/endpoints';\nimport { getPersistedToken } from 'apiCalls/tokens/getPersistedToken';\nimport { networkSelector } from 'store/selectors/networkSelectors';\nimport { getState } from 'store/store';\n\nimport { NftEnumType } from 'types/tokens.types';\nimport { getIdentifierType } from 'utils/validation/getIdentifierType';\n\nexport interface TokenAssets {\n  description: string;\n  status: string;\n  svgUrl: string;\n  website?: string;\n  pngUrl?: string;\n  social?: any;\n  extraTokens?: string[];\n  lockedAccounts?: { [key: string]: string };\n}\n\nexport interface TokenMediaType {\n  url?: string;\n  originalUrl?: string;\n  thumbnailUrl?: string;\n  fileType?: string;\n  fileSize?: number;\n}\n\nexport interface TokenOptionType {\n  tokenLabel: string;\n  tokenDecimals: number;\n  tokenImageUrl: string;\n  assets?: TokenAssets;\n  type?: NftEnumType;\n  error?: string;\n  esdtPrice?: number;\n  ticker?: string;\n  identifier?: string;\n  name?: string;\n}\n\ninterface TokenInfoResponse {\n  identifier: string;\n  name: string;\n  ticker: string;\n  decimals: number;\n  type?: NftEnumType;\n  assets: TokenAssets;\n  media?: TokenMediaType[];\n  price: number;\n}\n\nexport async function getPersistedTokenDetails({\n  tokenId\n}: {\n  tokenId?: string;\n}): Promise<TokenOptionType> {\n  const network = networkSelector(getState());\n\n  const noData = {\n    tokenDecimals: Number(network.decimals),\n    tokenLabel: '',\n    tokenImageUrl: ''\n  };\n\n  const { isNft } = getIdentifierType(tokenId);\n\n  const tokenIdentifier = tokenId;\n  const tokenEndpoint = isNft ? NFTS_ENDPOINT : TOKENS_ENDPOINT;\n\n  if (!tokenIdentifier) {\n    return noData;\n  }\n\n  try {\n    const selectedToken = await getPersistedToken<TokenInfoResponse>(\n      `${network.apiAddress}/${tokenEndpoint}/${tokenIdentifier}`\n    );\n\n    const tokenDecimals = selectedToken\n      ? selectedToken?.decimals\n      : Number(network.decimals);\n    const tokenLabel = selectedToken ? selectedToken?.name : '';\n    const tokenImageUrl = selectedToken\n      ? selectedToken?.assets?.svgUrl ?? selectedToken?.media?.[0]?.thumbnailUrl\n      : '';\n\n    return {\n      tokenDecimals: tokenDecimals,\n      tokenLabel,\n      type: selectedToken?.type,\n      tokenImageUrl,\n      identifier: selectedToken?.identifier,\n      assets: selectedToken?.assets,\n      esdtPrice: selectedToken?.price,\n      ticker: selectedToken?.ticker,\n      name: selectedToken?.name\n    };\n  } catch (error) {\n    return {\n      ...noData,\n      error: `${error}`\n    };\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAA+C;AAC/C,+BAAkC;AAClC,8BAAgC;AAChC,mBAAyB;AAGzB,+BAAkC;AA6ClC,eAAsB,yBAAyB;AAAA,EAC7C;AACF,GAE6B;AAC3B,QAAM,cAAU,6CAAgB,uBAAS,CAAC;AAE1C,QAAM,SAAS;AAAA,IACb,eAAe,OAAO,QAAQ,QAAQ;AAAA,IACtC,YAAY;AAAA,IACZ,eAAe;AAAA,EACjB;AAEA,QAAM,EAAE,MAAM,QAAI,4CAAkB,OAAO;AAE3C,QAAM,kBAAkB;AACxB,QAAM,gBAAgB,QAAQ,iCAAgB;AAE9C,MAAI,CAAC,iBAAiB;AACpB,WAAO;AAAA,EACT;AAEA,MAAI;AACF,UAAM,gBAAgB,UAAM;AAAA,MAC1B,GAAG,QAAQ,UAAU,IAAI,aAAa,IAAI,eAAe;AAAA,IAC3D;AAEA,UAAM,gBAAgB,gBAClB,eAAe,WACf,OAAO,QAAQ,QAAQ;AAC3B,UAAM,aAAa,gBAAgB,eAAe,OAAO;AACzD,UAAM,gBAAgB,gBAClB,eAAe,QAAQ,UAAU,eAAe,QAAQ,CAAC,GAAG,eAC5D;AAEJ,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,MAAM,eAAe;AAAA,MACrB;AAAA,MACA,YAAY,eAAe;AAAA,MAC3B,QAAQ,eAAe;AAAA,MACvB,WAAW,eAAe;AAAA,MAC1B,QAAQ,eAAe;AAAA,MACvB,MAAM,eAAe;AAAA,IACvB;AAAA,EACF,SAAS,OAAO;AACd,WAAO;AAAA,MACL,GAAG;AAAA,MACH,OAAO,GAAG,KAAK;AAAA,IACjB;AAAA,EACF;AACF;",
  "names": []
}
