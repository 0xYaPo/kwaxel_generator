{
  "version": 3,
  "sources": ["../../../src/apiCalls/transactions/getTransactionsByHashes.ts"],
  "sourcesContent": ["import {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums.types';\nimport { ServerTransactionType } from 'types/serverTransactions.types';\nimport {\n  TrackedTransactionResultType,\n  SignedTransactionType\n} from 'types/transactions.types';\nimport { getServerTransactionsByHashes } from './getServerTransactionsByHashes';\n\nexport const getTransactionsByHashes = async (\n  pendingTransactions: SignedTransactionType[]\n): Promise<TrackedTransactionResultType[]> => {\n  const hashes = pendingTransactions.map((tx) => tx.hash);\n\n  const responseData = await getServerTransactionsByHashes(hashes);\n\n  return pendingTransactions.map((transaction) => {\n    const txOnNetwork = responseData.find(\n      (txResponse: ServerTransactionType) =>\n        txResponse?.txHash === transaction.hash\n    );\n\n    return {\n      ...transaction,\n      status: txOnNetwork?.status as\n        | TransactionServerStatusesEnum\n        | TransactionBatchStatusesEnum,\n      invalidTransaction: txOnNetwork == null,\n      results: txOnNetwork?.results ?? [],\n      previousStatus: transaction.status?.toString() || '',\n      hasStatusChanged: Boolean(\n        txOnNetwork && txOnNetwork.status !== transaction.status\n      )\n    };\n  });\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,2CAA8C;AAEvC,MAAM,0BAA0B,OACrC,wBAC4C;AAC5C,QAAM,SAAS,oBAAoB,IAAI,CAAC,OAAO,GAAG,IAAI;AAEtD,QAAM,eAAe,UAAM,oEAA8B,MAAM;AAE/D,SAAO,oBAAoB,IAAI,CAAC,gBAAgB;AAC9C,UAAM,cAAc,aAAa;AAAA,MAC/B,CAAC,eACC,YAAY,WAAW,YAAY;AAAA,IACvC;AAEA,WAAO;AAAA,MACL,GAAG;AAAA,MACH,QAAQ,aAAa;AAAA,MAGrB,oBAAoB,eAAe;AAAA,MACnC,SAAS,aAAa,WAAW,CAAC;AAAA,MAClC,gBAAgB,YAAY,QAAQ,SAAS,KAAK;AAAA,MAClD,kBAAkB;AAAA,QAChB,eAAe,YAAY,WAAW,YAAY;AAAA,MACpD;AAAA,IACF;AAAA,EACF,CAAC;AACH;",
  "names": []
}
