"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var mvx_constants_exports = {};
__export(mvx_constants_exports, {
  ALL_SHARDS_SHARD_ID: () => ALL_SHARDS_SHARD_ID,
  EXTRA_GAS_LIMIT_GUARDED_TX: () => EXTRA_GAS_LIMIT_GUARDED_TX,
  GAS_LIMIT: () => GAS_LIMIT,
  GAS_PER_DATA_BYTE: () => GAS_PER_DATA_BYTE,
  GAS_PRICE: () => GAS_PRICE,
  GAS_PRICE_MODIFIER: () => GAS_PRICE_MODIFIER,
  LEDGER_CONTRACT_DATA_ENABLED_VALUE: () => LEDGER_CONTRACT_DATA_ENABLED_VALUE,
  METACHAIN_SHARD_ID: () => METACHAIN_SHARD_ID,
  MULTI_TRANSFER_EGLD_TOKEN: () => MULTI_TRANSFER_EGLD_TOKEN,
  REFUNDED_GAS: () => REFUNDED_GAS,
  VERSION: () => VERSION
});
module.exports = __toCommonJS(mvx_constants_exports);
const GAS_PRICE_MODIFIER = 0.01;
const GAS_PER_DATA_BYTE = 1500;
const GAS_LIMIT = 5e4;
const EXTRA_GAS_LIMIT_GUARDED_TX = 5e4;
const GAS_PRICE = 1e9;
const VERSION = 1;
const LEDGER_CONTRACT_DATA_ENABLED_VALUE = 1;
const METACHAIN_SHARD_ID = 4294967295;
const ALL_SHARDS_SHARD_ID = 4294967280;
const REFUNDED_GAS = "refundedGas";
const MULTI_TRANSFER_EGLD_TOKEN = "EGLD-000000";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ALL_SHARDS_SHARD_ID,
  EXTRA_GAS_LIMIT_GUARDED_TX,
  GAS_LIMIT,
  GAS_PER_DATA_BYTE,
  GAS_PRICE,
  GAS_PRICE_MODIFIER,
  LEDGER_CONTRACT_DATA_ENABLED_VALUE,
  METACHAIN_SHARD_ID,
  MULTI_TRANSFER_EGLD_TOKEN,
  REFUNDED_GAS,
  VERSION
});
//# sourceMappingURL=mvx.constants.cjs.map
