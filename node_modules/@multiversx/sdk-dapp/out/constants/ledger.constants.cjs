"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ledger_constants_exports = {};
__export(ledger_constants_exports, {
  LEDGER_HASH_SIGN_MINIMUM_VERSION: () => LEDGER_HASH_SIGN_MINIMUM_VERSION,
  LEDGER_MULTI_ACCOUNT_MINIMUM_VERSION: () => LEDGER_MULTI_ACCOUNT_MINIMUM_VERSION,
  LEDGER_SIGN_AUTH_TOKEN_MINIMUM_VERSION: () => LEDGER_SIGN_AUTH_TOKEN_MINIMUM_VERSION,
  LEDGER_WITH_GUARDIANS_MINIMUM_VERSION: () => LEDGER_WITH_GUARDIANS_MINIMUM_VERSION,
  LEDGER_WITH_USERNAMES_MINIMUM_VERSION: () => LEDGER_WITH_USERNAMES_MINIMUM_VERSION,
  LEDGER_WITH_WHITELISTED_TOKENS_MINIMUM_VERSION: () => LEDGER_WITH_WHITELISTED_TOKENS_MINIMUM_VERSION,
  ledgerErrorCodes: () => ledgerErrorCodes
});
module.exports = __toCommonJS(ledger_constants_exports);
const LEDGER_MULTI_ACCOUNT_MINIMUM_VERSION = "1.0.8";
const LEDGER_HASH_SIGN_MINIMUM_VERSION = "1.0.11";
const LEDGER_SIGN_AUTH_TOKEN_MINIMUM_VERSION = "1.0.15";
const LEDGER_WITH_WHITELISTED_TOKENS_MINIMUM_VERSION = "1.0.17";
const LEDGER_WITH_GUARDIANS_MINIMUM_VERSION = "1.0.22";
const LEDGER_WITH_USERNAMES_MINIMUM_VERSION = "1.0.23";
const ledgerErrorCodes = {
  36864: {
    code: "codeSuccess",
    message: "Success"
  },
  27013: {
    code: "ERR_USER_DENIED",
    message: "Rejected by user"
  },
  27904: {
    code: "ERR_UNKNOWN_INSTRUCTION",
    message: "Unknown instruction"
  },
  28160: {
    code: "ERR_WRONG_CLA",
    message: "Wrong CLA"
  },
  28161: {
    code: "ERR_INVALID_ARGUMENTS",
    message: "Invalid arguments"
  },
  28162: {
    code: "ERR_INVALID_MESSAGE",
    message: "Invalid message"
  },
  28163: {
    code: "ERR_INVALID_P1",
    message: "Invalid P1"
  },
  28164: {
    code: "ERR_MESSAGE_TOO_LONG",
    message: "Message too long"
  },
  28165: {
    code: "ERR_RECEIVER_TOO_LONG",
    message: "Receiver too long"
  },
  28166: {
    code: "ERR_AMOUNT_TOO_LONG",
    message: "Amount too long"
  },
  28167: {
    code: "ERR_CONTRACT_DATA_DISABLED",
    message: "Contract data disabled in app options"
  },
  28168: {
    code: "ERR_MESSAGE_INCOMPLETE",
    message: "Message incomplete"
  },
  28176: {
    code: "ERR_SIGNATURE_FAILED",
    message: "Signature failed"
  },
  28169: {
    code: "ERR_WRONG_TX_VERSION",
    message: "Wrong TX version"
  },
  28170: {
    code: "ERR_NONCE_TOO_LONG",
    message: "Nonce too long"
  },
  28171: {
    code: "ERR_INVALID_AMOUNT",
    message: "Invalid amount"
  },
  28172: {
    code: "ERR_INVALID_FEE",
    message: "Invalid fee"
  },
  28173: {
    code: "ERR_PRETTY_FAILED",
    message: "Pretty failed"
  },
  28174: {
    code: "ERR_DATA_TOO_LONG",
    message: "Data too long"
  },
  28175: {
    code: "ERR_WRONG_TX_OPTIONS",
    message: "Invalid transaction options"
  },
  28177: {
    code: "ERR_SIGN_TX_DEPRECATED",
    message: "Regular transaction signing is deprecated in this version. Use hash signing."
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LEDGER_HASH_SIGN_MINIMUM_VERSION,
  LEDGER_MULTI_ACCOUNT_MINIMUM_VERSION,
  LEDGER_SIGN_AUTH_TOKEN_MINIMUM_VERSION,
  LEDGER_WITH_GUARDIANS_MINIMUM_VERSION,
  LEDGER_WITH_USERNAMES_MINIMUM_VERSION,
  LEDGER_WITH_WHITELISTED_TOKENS_MINIMUM_VERSION,
  ledgerErrorCodes
});
//# sourceMappingURL=ledger.constants.cjs.map
