{
  "version": 3,
  "sources": ["../../src/__mocks__/server.ts"],
  "sourcesContent": ["import {\n  DefaultBodyType,\n  PathParams,\n  ResponseComposition,\n  rest,\n  RestContext,\n  RestRequest\n} from 'msw';\nimport { setupServer } from 'msw/node';\nimport { testAddress, testNetwork } from './accountConfig';\nimport {\n  account,\n  blocks,\n  dappConfig,\n  networkConfig,\n  socketResponse,\n  websocketConfig\n} from './data';\nimport { wrapEgldContract } from './data/wrapEgldContract';\n\nexport const mockResponse =\n  <T extends DefaultBodyType>(body: T) =>\n  (\n    _req: RestRequest<never, PathParams<string>>,\n    res: ResponseComposition<DefaultBodyType>,\n    ctx: RestContext\n  ) => {\n    return res(ctx.status(200), ctx.json(body));\n  };\n\nconst handlers = [\n  rest.get(`${testNetwork.apiAddress}/dapp/config`, mockResponse(dappConfig)),\n\n  rest.get(\n    `${testNetwork.apiAddress}/network/config`,\n    mockResponse(networkConfig)\n  ),\n  rest.get(\n    `https://${websocketConfig.url}/socket.io/`,\n    mockResponse(socketResponse)\n  ),\n  rest.get(\n    `${testNetwork.apiAddress}/websocket/config`,\n    mockResponse(websocketConfig)\n  ),\n  rest.get(\n    `${testNetwork.apiAddress}/accounts/${testAddress}`,\n    mockResponse(account)\n  ),\n  rest.get(\n    `${testNetwork.apiAddress}/accounts/${wrapEgldContract.address}`,\n    mockResponse(wrapEgldContract)\n  ),\n  rest.get(`${testNetwork.apiAddress}/blocks`, mockResponse(blocks))\n];\n\n// This configures a request mocking server with the given request handlers.\nconst server = setupServer(...handlers);\n\nexport { server, rest };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAOO;AACP,kBAA4B;AAC5B,2BAAyC;AACzC,kBAOO;AACP,8BAAiC;AAE1B,MAAM,eACX,CAA4B,SAC5B,CACE,MACA,KACA,QACG;AACH,SAAO,IAAI,IAAI,OAAO,GAAG,GAAG,IAAI,KAAK,IAAI,CAAC;AAC5C;AAEF,MAAM,WAAW;AAAA,EACf,gBAAK,IAAI,GAAG,iCAAY,UAAU,gBAAgB,aAAa,sBAAU,CAAC;AAAA,EAE1E,gBAAK;AAAA,IACH,GAAG,iCAAY,UAAU;AAAA,IACzB,aAAa,yBAAa;AAAA,EAC5B;AAAA,EACA,gBAAK;AAAA,IACH,WAAW,4BAAgB,GAAG;AAAA,IAC9B,aAAa,0BAAc;AAAA,EAC7B;AAAA,EACA,gBAAK;AAAA,IACH,GAAG,iCAAY,UAAU;AAAA,IACzB,aAAa,2BAAe;AAAA,EAC9B;AAAA,EACA,gBAAK;AAAA,IACH,GAAG,iCAAY,UAAU,aAAa,gCAAW;AAAA,IACjD,aAAa,mBAAO;AAAA,EACtB;AAAA,EACA,gBAAK;AAAA,IACH,GAAG,iCAAY,UAAU,aAAa,yCAAiB,OAAO;AAAA,IAC9D,aAAa,wCAAgB;AAAA,EAC/B;AAAA,EACA,gBAAK,IAAI,GAAG,iCAAY,UAAU,WAAW,aAAa,kBAAM,CAAC;AACnE;AAGA,MAAM,aAAS,yBAAY,GAAG,QAAQ;",
  "names": []
}
