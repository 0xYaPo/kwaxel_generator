{
  "version": 3,
  "sources": ["../../../src/store/middleware/logoutMiddleware.ts"],
  "sourcesContent": ["import { WritableDraft } from 'immer';\nimport { Address } from 'lib/sdkCore';\nimport {\n  addLoginExpiresAt,\n  removeLoginExpiresAt\n} from 'store/actions/loginInfo/loginInfoActions';\nimport {\n  accountInfoSelector,\n  isLoggedInSelector,\n  loginExpiresAtSelector\n} from 'store/selectors';\nimport { initialState as initialAccountState } from 'store/slices/account/accountSlice';\nimport { initialState as initialLoginInfoState } from 'store/slices/loginInfo/loginInfoSlice';\nimport { initialState as initialToastState } from 'store/slices/toast/toastSlice';\nimport { initialState as initialTransactionsState } from 'store/slices/transactions/transactionsSlice';\nimport { getStore } from 'store/store';\nimport { StoreType } from '../store.types';\n\nexport const resetStore = (store: WritableDraft<StoreType>) => {\n  store.account = initialAccountState;\n  store.loginInfo = initialLoginInfoState;\n  store.transactions = initialTransactionsState;\n  store.toasts = initialToastState;\n};\n\nexport function getNewLoginExpiresTimestamp() {\n  return new Date().setHours(new Date().getHours() + 24);\n}\n\nexport function setLoginExpiresAt(expiresAt: number | null) {\n  if (expiresAt == null) {\n    removeLoginExpiresAt();\n    return;\n  }\n  addLoginExpiresAt(expiresAt);\n}\n\nexport const logoutMiddleware = (state: StoreType) => {\n  const isLoggedIn = isLoggedInSelector(state);\n  const loginTimestamp = loginExpiresAtSelector(state);\n  const { address, publicKey } = accountInfoSelector(state);\n\n  if (address && publicKey !== new Address(address).toHex()) {\n    resetStore(state);\n  }\n\n  if (!isLoggedIn) {\n    return;\n  }\n\n  if (loginTimestamp == null) {\n    setLoginExpiresAt(getNewLoginExpiresTimestamp());\n    return;\n  }\n\n  const now = Date.now();\n  const isExpired = loginTimestamp - now < 0;\n\n  if (isExpired) {\n    // logout\n    setLoginExpiresAt(null);\n    getStore().setState(resetStore);\n  }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,qBAAwB;AACxB,8BAGO;AACP,uBAIO;AACP,0BAAoD;AACpD,4BAAsD;AACtD,wBAAkD;AAClD,+BAAyD;AACzD,mBAAyB;AAGlB,MAAM,aAAa,CAAC,UAAoC;AAC7D,QAAM,UAAU,oBAAAA;AAChB,QAAM,YAAY,sBAAAC;AAClB,QAAM,eAAe,yBAAAC;AACrB,QAAM,SAAS,kBAAAC;AACjB;AAEO,SAAS,8BAA8B;AAC5C,UAAO,oBAAI,KAAK,GAAE,UAAS,oBAAI,KAAK,GAAE,SAAS,IAAI,EAAE;AACvD;AAEO,SAAS,kBAAkB,WAA0B;AAC1D,MAAI,aAAa,MAAM;AACrB,sDAAqB;AACrB;AAAA,EACF;AACA,iDAAkB,SAAS;AAC7B;AAEO,MAAM,mBAAmB,CAAC,UAAqB;AACpD,QAAM,iBAAa,qCAAmB,KAAK;AAC3C,QAAM,qBAAiB,yCAAuB,KAAK;AACnD,QAAM,EAAE,SAAS,UAAU,QAAI,sCAAoB,KAAK;AAExD,MAAI,WAAW,cAAc,IAAI,uBAAQ,OAAO,EAAE,MAAM,GAAG;AACzD,eAAW,KAAK;AAAA,EAClB;AAEA,MAAI,CAAC,YAAY;AACf;AAAA,EACF;AAEA,MAAI,kBAAkB,MAAM;AAC1B,sBAAkB,4BAA4B,CAAC;AAC/C;AAAA,EACF;AAEA,QAAM,MAAM,KAAK,IAAI;AACrB,QAAM,YAAY,iBAAiB,MAAM;AAEzC,MAAI,WAAW;AAEb,sBAAkB,IAAI;AACtB,+BAAS,EAAE,SAAS,UAAU;AAAA,EAChC;AACF;",
  "names": ["initialAccountState", "initialLoginInfoState", "initialTransactionsState", "initialToastState"]
}
