{
  "version": 3,
  "sources": ["../../../src/store/selectors/transactionsSelector.ts"],
  "sourcesContent": ["import { StoreType } from 'store/store.types';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums.types';\nimport {\n  SignedTransactionType,\n  SessionTransactionType\n} from 'types/transactions.types';\n\nexport const transactionsSliceSelector = ({ transactions }: StoreType) =>\n  transactions;\n\nexport const pendingTransactionsSessionsSelector = ({\n  transactions: state\n}: StoreType): Record<string, SessionTransactionType> => {\n  const pendingSessions: Record<string, SessionTransactionType> = {};\n\n  Object.entries(state).forEach(([sessionId, data]) => {\n    const hasPendingTransactions = data.transactions.some(\n      ({ status }) => status === TransactionServerStatusesEnum.pending\n    );\n    if (hasPendingTransactions && data.status === 'sent') {\n      pendingSessions[sessionId] = data;\n    }\n  });\n\n  return pendingSessions;\n};\n\nexport const successfulTransactionsSessionsSelector = ({\n  transactions: state\n}: StoreType): Record<string, SessionTransactionType> => {\n  const successfulSessions: Record<string, SessionTransactionType> = {};\n\n  Object.entries(state).forEach(([sessionId, data]) => {\n    const hasSuccessfulTransactions = data.transactions.some(\n      ({ status }) => status === TransactionServerStatusesEnum.success\n    );\n    if (hasSuccessfulTransactions && data.status === 'sent') {\n      successfulSessions[sessionId] = data;\n    }\n  });\n\n  return successfulSessions;\n};\n\nexport const failedTransactionsSessionsSelector = ({\n  transactions: state\n}: StoreType): Record<string, SessionTransactionType> => {\n  const failedSessions: Record<string, SessionTransactionType> = {};\n\n  Object.entries(state).forEach(([sessionId, data]) => {\n    const hasFailedTransactions = data.transactions.some(\n      ({ status }) =>\n        status &&\n        [\n          TransactionServerStatusesEnum.fail,\n          TransactionServerStatusesEnum.invalid,\n          TransactionBatchStatusesEnum.cancelled,\n          TransactionBatchStatusesEnum.timedOut\n        ].includes(status)\n    );\n    if (hasFailedTransactions && data.status === 'sent') {\n      failedSessions[sessionId] = data;\n    }\n  });\n\n  return failedSessions;\n};\n\nexport const pendingTransactionsSelector = ({\n  transactions: state\n}: StoreType): SignedTransactionType[] => {\n  const pendingTransactions: SignedTransactionType[] = [];\n\n  Object.values(state).forEach(({ transactions }) => {\n    transactions.forEach((transaction) => {\n      if (\n        transaction.status &&\n        [\n          TransactionServerStatusesEnum.pending,\n          TransactionBatchStatusesEnum.sent\n        ].includes(transaction.status)\n      ) {\n        pendingTransactions.push(transaction);\n      }\n    });\n  });\n\n  return pendingTransactions;\n};\n\nexport const successfulTransactionsSelector = ({\n  transactions: state\n}: StoreType) => {\n  const successfulTransactions: SignedTransactionType[] = [];\n\n  Object.values(state).forEach(({ transactions }) => {\n    transactions.forEach((transaction) => {\n      if (transaction.status === TransactionServerStatusesEnum.success) {\n        successfulTransactions.push(transaction);\n      }\n    });\n  });\n\n  return successfulTransactions;\n};\n\nexport const failedTransactionsSelector = ({\n  transactions: state\n}: StoreType) => {\n  const failedTransactions: SignedTransactionType[] = [];\n\n  Object.values(state).forEach(({ transactions }) => {\n    transactions.forEach((transaction) => {\n      if (\n        transaction.status &&\n        [\n          TransactionServerStatusesEnum.fail,\n          TransactionServerStatusesEnum.invalid,\n          TransactionBatchStatusesEnum.cancelled,\n          TransactionBatchStatusesEnum.timedOut\n        ].includes(transaction.status)\n      ) {\n        failedTransactions.push(transaction);\n      }\n    });\n  });\n\n  return failedTransactions;\n};\n\nexport const timedOutTransactionsSelector = ({\n  transactions: state\n}: StoreType) => {\n  const timedOutTransactions: SignedTransactionType[] = [];\n\n  Object.values(state).forEach(({ transactions }) => {\n    transactions.forEach((transaction) => {\n      if (transaction.status === TransactionBatchStatusesEnum.timedOut) {\n        timedOutTransactions.push(transaction);\n      }\n    });\n  });\n\n  return timedOutTransactions;\n};\n"],
  "mappings": "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",
  "names": []
}
