{
  "version": 3,
  "sources": ["../../../../src/store/slices/toast/toastSlice.types.ts"],
  "sourcesContent": ["import { SignedTransactionType } from 'types/transactions.types';\n\nexport type ToastsSliceType = {\n  customToasts: CustomToastType[];\n  transactionToasts: ITransactionToast[];\n};\n\ninterface ISharedCustomToast {\n  toastId: string;\n  /**\n   * Duration in miliseconds\n   */\n  duration?: number;\n  onClose?: () => void;\n}\n\nexport interface ISimpleToast extends ISharedCustomToast {\n  icon?: string;\n  iconClassName?: string;\n  title?: string;\n  message: string;\n  /**\n   * Use `subtitle` to display a row of information between `title` and `message`\n   */\n  subtitle?: string;\n  instantiateToastElement?: never;\n}\n\nexport interface IComponentToast extends ISharedCustomToast {\n  /**\n   * A function that creates a custom toast component.\n   *\n   * Use `instantiateToastElement` to display a custom agnostic component.\n   *\n   * @returns {HTMLElement | null} The custom toast component to be displayed, or `null` if no component is created.\n   *\n   * **\u26A0\uFE0F Warning**: Toasts with components will not be persisted on page reload because agnostic components are not serializable.\n   */\n  instantiateToastElement: (() => HTMLElement) | null;\n  icon?: never;\n  iconClassName?: never;\n  title?: never;\n  message?: never;\n  subtitle?: never;\n}\n\nexport type CustomToastType = ISimpleToast | IComponentToast;\n\nexport interface ITransactionToast {\n  startTime: number;\n  endTime: number;\n  toastId: string;\n  transaction?: SignedTransactionType;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;AAAA;",
  "names": []
}
