"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transactionStateByStatus_exports = {};
__export(transactionStateByStatus_exports, {
  failBatchTransactionsStates: () => failBatchTransactionsStates,
  failServerTransactionsStates: () => failServerTransactionsStates,
  getIsTransactionFailed: () => getIsTransactionFailed,
  getIsTransactionNotExecuted: () => getIsTransactionNotExecuted,
  getIsTransactionPending: () => getIsTransactionPending,
  getIsTransactionSuccessful: () => getIsTransactionSuccessful,
  getIsTransactionTimedOut: () => getIsTransactionTimedOut,
  invalidBatchTransactionsStates: () => invalidBatchTransactionsStates,
  isBatchTransactionFailed: () => isBatchTransactionFailed,
  isBatchTransactionInvalid: () => isBatchTransactionInvalid,
  isBatchTransactionPending: () => isBatchTransactionPending,
  isBatchTransactionSuccessful: () => isBatchTransactionSuccessful,
  isBatchTransactionTimedOut: () => isBatchTransactionTimedOut,
  isServerTransactionFailed: () => isServerTransactionFailed,
  isServerTransactionNotExecuted: () => isServerTransactionNotExecuted,
  isServerTransactionPending: () => isServerTransactionPending,
  isServerTransactionSuccessful: () => isServerTransactionSuccessful,
  notExecutedServerTransactionsStates: () => notExecutedServerTransactionsStates,
  pendingBatchTransactionsStates: () => pendingBatchTransactionsStates,
  pendingServerTransactionsStatuses: () => pendingServerTransactionsStatuses,
  successBatchTransactionsStates: () => successBatchTransactionsStates,
  successServerTransactionsStates: () => successServerTransactionsStates,
  timedOutBatchTransactionsStates: () => timedOutBatchTransactionsStates
});
module.exports = __toCommonJS(transactionStateByStatus_exports);
var import_enums = require("../../../types/enums.types");
const pendingBatchTransactionsStates = [
  import_enums.TransactionBatchStatusesEnum.sent
];
const successBatchTransactionsStates = [
  import_enums.TransactionBatchStatusesEnum.success
];
const failBatchTransactionsStates = [
  import_enums.TransactionBatchStatusesEnum.fail,
  import_enums.TransactionBatchStatusesEnum.cancelled,
  import_enums.TransactionBatchStatusesEnum.timedOut
];
const invalidBatchTransactionsStates = [
  import_enums.TransactionBatchStatusesEnum.invalid
];
const timedOutBatchTransactionsStates = [
  import_enums.TransactionBatchStatusesEnum.timedOut
];
const pendingServerTransactionsStatuses = [
  import_enums.TransactionServerStatusesEnum.pending
];
const successServerTransactionsStates = [
  import_enums.TransactionServerStatusesEnum.success
];
const failServerTransactionsStates = [
  import_enums.TransactionServerStatusesEnum.fail,
  import_enums.TransactionServerStatusesEnum.invalid
];
const notExecutedServerTransactionsStates = [
  import_enums.TransactionServerStatusesEnum.notExecuted
];
function getIsTransactionPending(status) {
  return status != null && (isBatchTransactionPending(status) || isServerTransactionPending(status));
}
function getIsTransactionSuccessful(status) {
  return status != null && (isBatchTransactionSuccessful(status) || isServerTransactionSuccessful(status));
}
function getIsTransactionFailed(status) {
  return status != null && (isBatchTransactionFailed(status) || isServerTransactionFailed(status));
}
function getIsTransactionNotExecuted(status) {
  return status != null && (isBatchTransactionInvalid(status) || isServerTransactionNotExecuted(status));
}
function getIsTransactionTimedOut(status) {
  return status != null && isBatchTransactionTimedOut(status);
}
function isBatchTransactionPending(status) {
  return status != null && pendingBatchTransactionsStates.includes(status);
}
function isBatchTransactionSuccessful(status) {
  return status != null && successBatchTransactionsStates.includes(status);
}
function isBatchTransactionFailed(status) {
  return status != null && failBatchTransactionsStates.includes(status);
}
function isBatchTransactionInvalid(status) {
  return status != null && invalidBatchTransactionsStates.includes(status);
}
function isBatchTransactionTimedOut(status) {
  return status != null && timedOutBatchTransactionsStates.includes(status);
}
function isServerTransactionPending(status) {
  return status != null && pendingServerTransactionsStatuses.includes(status);
}
function isServerTransactionSuccessful(status) {
  return status != null && successServerTransactionsStates.includes(status);
}
function isServerTransactionFailed(status) {
  return status != null && failServerTransactionsStates.includes(status);
}
function isServerTransactionNotExecuted(status) {
  return status != null && notExecutedServerTransactionsStates.includes(status);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  failBatchTransactionsStates,
  failServerTransactionsStates,
  getIsTransactionFailed,
  getIsTransactionNotExecuted,
  getIsTransactionPending,
  getIsTransactionSuccessful,
  getIsTransactionTimedOut,
  invalidBatchTransactionsStates,
  isBatchTransactionFailed,
  isBatchTransactionInvalid,
  isBatchTransactionPending,
  isBatchTransactionSuccessful,
  isBatchTransactionTimedOut,
  isServerTransactionFailed,
  isServerTransactionNotExecuted,
  isServerTransactionPending,
  isServerTransactionSuccessful,
  notExecutedServerTransactionsStates,
  pendingBatchTransactionsStates,
  pendingServerTransactionsStatuses,
  successBatchTransactionsStates,
  successServerTransactionsStates,
  timedOutBatchTransactionsStates
});
//# sourceMappingURL=transactionStateByStatus.cjs.map
