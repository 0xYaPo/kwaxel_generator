"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var transactionsActions_exports = {};
__export(transactionsActions_exports, {
  clearCompletedTransactions: () => clearCompletedTransactions,
  createTransactionsSession: () => createTransactionsSession,
  updateSessionStatus: () => updateSessionStatus,
  updateTransactionStatus: () => updateTransactionStatus
});
module.exports = __toCommonJS(transactionsActions_exports);
var import_getTransactionsStatus = require("../../../managers/TransactionManager/helpers/getTransactionsStatus");
var import_store = require("../../../store/store");
var import_enums = require("../../../types/enums.types");
const createTransactionsSession = ({
  transactions,
  transactionsDisplayInfo,
  status,
  sessionInformation
}) => {
  const sessionId = Date.now().toString();
  (0, import_store.getStore)().setState(
    ({ transactions: state }) => {
      state[sessionId] = {
        transactions,
        status,
        transactionsDisplayInfo,
        interpretedTransactions: {},
        sessionInformation
      };
    },
    false,
    "createTransactionsSession"
  );
  return sessionId;
};
const updateSessionStatus = ({
  sessionId,
  status,
  errorMessage
}) => {
  (0, import_store.getStore)().setState(
    ({ transactions: state }) => {
      state[sessionId].status = status;
      state[sessionId].errorMessage = errorMessage;
    },
    false,
    "updateTransactionsSession"
  );
};
const updateTransactionStatus = ({
  sessionId,
  transaction: updatedTransaction
}) => {
  let newStatus = null;
  (0, import_store.getStore)().setState(
    ({ transactions: state }) => {
      const transactions = state[sessionId]?.transactions;
      if (transactions != null) {
        state[sessionId].transactions = transactions.map((transaction) => {
          if (transaction.hash === updatedTransaction.hash) {
            return {
              ...transaction,
              ...updatedTransaction ?? {}
            };
          }
          return transaction;
        });
        const status = (0, import_getTransactionsStatus.getTransactionsSessionStatus)([
          ...state[sessionId].transactions
          // Create a copy of the transactions array to avoid Proxy issues
        ]);
        if (status) {
          updateSessionStatus({
            sessionId,
            status
          });
          newStatus = status;
        }
      }
    },
    false,
    "updateTransactionStatus"
  );
  return newStatus;
};
const clearCompletedTransactions = () => {
  (0, import_store.getStore)().setState(
    ({ transactions: state, toasts: toastsState }) => {
      const sessionIds = Object.keys(state);
      const completedSessionIds = sessionIds.filter((sessionId) => {
        const session = state[sessionId];
        if (!session) {
          return false;
        }
        const { status } = session;
        const isPending = status === import_enums.TransactionServerStatusesEnum.pending || status === import_enums.TransactionBatchStatusesEnum.signed || status === import_enums.TransactionBatchStatusesEnum.sent;
        return !isPending;
      });
      completedSessionIds.forEach((sessionId) => {
        delete state[sessionId];
      });
      const filteredTransactionToasts = toastsState.transactionToasts.filter(
        (toast) => !completedSessionIds.includes(toast.toastId)
      );
      toastsState.transactionToasts = filteredTransactionToasts;
    },
    false,
    "clearCompletedTransactions"
  );
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  clearCompletedTransactions,
  createTransactionsSession,
  updateSessionStatus,
  updateTransactionStatus
});
//# sourceMappingURL=transactionsActions.cjs.map
