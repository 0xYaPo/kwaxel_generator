{
  "version": 3,
  "sources": ["../../../../src/store/actions/transactions/transactionsActions.ts"],
  "sourcesContent": ["import { getTransactionsSessionStatus } from 'managers/TransactionManager/helpers/getTransactionsStatus';\nimport { getStore } from 'store/store';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums.types';\nimport {\n  TransactionsDisplayInfoType,\n  SignedTransactionType\n} from 'types/transactions.types';\n\nexport type CreateTransactionsSessionType = {\n  transactions: SignedTransactionType[];\n  transactionsDisplayInfo?: TransactionsDisplayInfoType;\n  status: TransactionBatchStatusesEnum | TransactionServerStatusesEnum;\n  sessionInformation?: any;\n};\n\nexport const createTransactionsSession = ({\n  transactions,\n  transactionsDisplayInfo,\n  status,\n  sessionInformation\n}: CreateTransactionsSessionType) => {\n  const sessionId = Date.now().toString();\n  getStore().setState(\n    ({ transactions: state }) => {\n      state[sessionId] = {\n        transactions,\n        status,\n        transactionsDisplayInfo,\n        interpretedTransactions: {},\n        sessionInformation\n      };\n    },\n    false,\n    'createTransactionsSession'\n  );\n  return sessionId;\n};\n\nexport const updateSessionStatus = ({\n  sessionId,\n  status,\n  errorMessage\n}: {\n  sessionId: string;\n  status: TransactionBatchStatusesEnum;\n  errorMessage?: string;\n}) => {\n  getStore().setState(\n    ({ transactions: state }) => {\n      state[sessionId].status = status;\n      state[sessionId].errorMessage = errorMessage;\n    },\n    false,\n    'updateTransactionsSession'\n  );\n};\n\nexport const updateTransactionStatus = ({\n  sessionId,\n  transaction: updatedTransaction\n}: {\n  sessionId: string;\n  transaction: SignedTransactionType;\n}): TransactionBatchStatusesEnum | null => {\n  let newStatus: TransactionBatchStatusesEnum | null = null;\n  getStore().setState(\n    ({ transactions: state }) => {\n      const transactions = state[sessionId]?.transactions;\n      if (transactions != null) {\n        state[sessionId].transactions = transactions.map((transaction) => {\n          if (transaction.hash === updatedTransaction.hash) {\n            return {\n              ...transaction,\n              ...(updatedTransaction ?? {})\n            };\n          }\n          return transaction;\n        });\n\n        const status = getTransactionsSessionStatus([\n          ...state[sessionId].transactions // Create a copy of the transactions array to avoid Proxy issues\n        ]);\n\n        if (status) {\n          updateSessionStatus({\n            sessionId,\n            status\n          });\n          newStatus = status;\n        }\n      }\n    },\n    false,\n    'updateTransactionStatus'\n  );\n\n  return newStatus;\n};\n\nexport const clearCompletedTransactions = () => {\n  getStore().setState(\n    ({ transactions: state, toasts: toastsState }) => {\n      const sessionIds = Object.keys(state);\n\n      const completedSessionIds = sessionIds.filter((sessionId) => {\n        const session = state[sessionId];\n        if (!session) {\n          return false;\n        }\n\n        const { status } = session;\n\n        const isPending =\n          status === TransactionServerStatusesEnum.pending ||\n          status === TransactionBatchStatusesEnum.signed ||\n          status === TransactionBatchStatusesEnum.sent;\n\n        return !isPending;\n      });\n\n      completedSessionIds.forEach((sessionId) => {\n        delete state[sessionId];\n      });\n\n      const filteredTransactionToasts = toastsState.transactionToasts.filter(\n        (toast) => !completedSessionIds.includes(toast.toastId)\n      );\n\n      toastsState.transactionToasts = filteredTransactionToasts;\n    },\n    false,\n    'clearCompletedTransactions'\n  );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAA6C;AAC7C,mBAAyB;AACzB,mBAGO;AAaA,MAAM,4BAA4B,CAAC;AAAA,EACxC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAqC;AACnC,QAAM,YAAY,KAAK,IAAI,EAAE,SAAS;AACtC,6BAAS,EAAE;AAAA,IACT,CAAC,EAAE,cAAc,MAAM,MAAM;AAC3B,YAAM,SAAS,IAAI;AAAA,QACjB;AAAA,QACA;AAAA,QACA;AAAA,QACA,yBAAyB,CAAC;AAAA,QAC1B;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,SAAO;AACT;AAEO,MAAM,sBAAsB,CAAC;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AACF,MAIM;AACJ,6BAAS,EAAE;AAAA,IACT,CAAC,EAAE,cAAc,MAAM,MAAM;AAC3B,YAAM,SAAS,EAAE,SAAS;AAC1B,YAAM,SAAS,EAAE,eAAe;AAAA,IAClC;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEO,MAAM,0BAA0B,CAAC;AAAA,EACtC;AAAA,EACA,aAAa;AACf,MAG2C;AACzC,MAAI,YAAiD;AACrD,6BAAS,EAAE;AAAA,IACT,CAAC,EAAE,cAAc,MAAM,MAAM;AAC3B,YAAM,eAAe,MAAM,SAAS,GAAG;AACvC,UAAI,gBAAgB,MAAM;AACxB,cAAM,SAAS,EAAE,eAAe,aAAa,IAAI,CAAC,gBAAgB;AAChE,cAAI,YAAY,SAAS,mBAAmB,MAAM;AAChD,mBAAO;AAAA,cACL,GAAG;AAAA,cACH,GAAI,sBAAsB,CAAC;AAAA,YAC7B;AAAA,UACF;AACA,iBAAO;AAAA,QACT,CAAC;AAED,cAAM,aAAS,2DAA6B;AAAA,UAC1C,GAAG,MAAM,SAAS,EAAE;AAAA;AAAA,QACtB,CAAC;AAED,YAAI,QAAQ;AACV,8BAAoB;AAAA,YAClB;AAAA,YACA;AAAA,UACF,CAAC;AACD,sBAAY;AAAA,QACd;AAAA,MACF;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,SAAO;AACT;AAEO,MAAM,6BAA6B,MAAM;AAC9C,6BAAS,EAAE;AAAA,IACT,CAAC,EAAE,cAAc,OAAO,QAAQ,YAAY,MAAM;AAChD,YAAM,aAAa,OAAO,KAAK,KAAK;AAEpC,YAAM,sBAAsB,WAAW,OAAO,CAAC,cAAc;AAC3D,cAAM,UAAU,MAAM,SAAS;AAC/B,YAAI,CAAC,SAAS;AACZ,iBAAO;AAAA,QACT;AAEA,cAAM,EAAE,OAAO,IAAI;AAEnB,cAAM,YACJ,WAAW,2CAA8B,WACzC,WAAW,0CAA6B,UACxC,WAAW,0CAA6B;AAE1C,eAAO,CAAC;AAAA,MACV,CAAC;AAED,0BAAoB,QAAQ,CAAC,cAAc;AACzC,eAAO,MAAM,SAAS;AAAA,MACxB,CAAC;AAED,YAAM,4BAA4B,YAAY,kBAAkB;AAAA,QAC9D,CAAC,UAAU,CAAC,oBAAoB,SAAS,MAAM,OAAO;AAAA,MACxD;AAEA,kBAAY,oBAAoB;AAAA,IAClC;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
