{
  "version": 3,
  "sources": ["../../../../src/store/actions/sharedActions/sharedActions.ts"],
  "sourcesContent": ["import { Address } from 'lib/sdkCore';\nimport { ProviderType } from 'providers/types/providerFactory.types';\nimport { resetStore } from 'store/middleware/logoutMiddleware';\nimport { getStore } from 'store/store';\n\nexport const logoutAction = () => getStore().setState(resetStore);\nexport interface LoginActionPayloadType<T extends ProviderType = ProviderType> {\n  address: string;\n  providerType: T;\n}\n\nexport const loginAction = ({\n  address,\n  providerType\n}: LoginActionPayloadType) => {\n  getStore().setState(\n    ({ account, loginInfo }) => {\n      account.address = address;\n      account.publicKey = new Address(address).toHex();\n\n      if (loginInfo) {\n        loginInfo.providerType = providerType;\n      }\n    },\n    false,\n    'loginAction'\n  );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAwB;AAExB,8BAA2B;AAC3B,mBAAyB;AAElB,MAAM,eAAe,UAAM,uBAAS,EAAE,SAAS,kCAAU;AAMzD,MAAM,cAAc,CAAC;AAAA,EAC1B;AAAA,EACA;AACF,MAA8B;AAC5B,6BAAS,EAAE;AAAA,IACT,CAAC,EAAE,SAAS,UAAU,MAAM;AAC1B,cAAQ,UAAU;AAClB,cAAQ,YAAY,IAAI,uBAAQ,OAAO,EAAE,MAAM;AAE/C,UAAI,WAAW;AACb,kBAAU,eAAe;AAAA,MAC3B;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
