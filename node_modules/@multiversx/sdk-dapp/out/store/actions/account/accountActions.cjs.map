{
  "version": 3,
  "sources": ["../../../../src/store/actions/account/accountActions.ts"],
  "sourcesContent": ["import { LedgerAccountType } from 'store/slices/account/account.types';\nimport { emptyAccount } from 'store/slices/account/emptyAccount';\nimport { getStore } from 'store/store';\nimport { AccountType } from 'types/account.types';\nimport { BatchTransactionsWSResponseType } from 'types/websocket.types';\n\nexport const setAccount = (account: AccountType) => {\n  getStore().setState(\n    ({ account: state }) => {\n      const isSameAddress = state.address === account.address;\n      state.accounts = {\n        [state.address]: isSameAddress ? account : emptyAccount\n      };\n    },\n    false,\n    'setAccount'\n  );\n};\n\nexport const setLedgerAccount = (ledgerAccount: LedgerAccountType | null) =>\n  getStore().setState(\n    ({ account: state }) => {\n      state.ledgerAccount = ledgerAccount;\n    },\n    false,\n    'setLedgerAccount'\n  );\n\nexport const setWalletConnectAccount = (walletConnectAccount: string | null) =>\n  getStore().setState(\n    ({ account: state }) => {\n      state.walletConnectAccount = walletConnectAccount;\n    },\n    false,\n    'setWalletConnectAccount'\n  );\n\nexport const setWebsocketEvent = (message: string) =>\n  getStore().setState(\n    ({ account: state }) => {\n      state.websocketEvent = {\n        timestamp: Date.now(),\n        message\n      };\n    },\n    false,\n    'setWebsocketEvent'\n  );\n\nexport const setWebsocketBatchEvent = (data: BatchTransactionsWSResponseType) =>\n  getStore().setState(\n    ({ account: state }) => {\n      state.websocketBatchEvent = {\n        timestamp: Date.now(),\n        data\n      };\n    },\n    false,\n    'setWebsocketBatchEvent'\n  );\n\nexport const setAccountNonce = (nonce: number) => {\n  getStore().setState(\n    ({ account: state }) => {\n      state.accounts[state.address].nonce = nonce;\n    },\n    false,\n    'setAccountNonce'\n  );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,0BAA6B;AAC7B,mBAAyB;AAIlB,MAAM,aAAa,CAAC,YAAyB;AAClD,6BAAS,EAAE;AAAA,IACT,CAAC,EAAE,SAAS,MAAM,MAAM;AACtB,YAAM,gBAAgB,MAAM,YAAY,QAAQ;AAChD,YAAM,WAAW;AAAA,QACf,CAAC,MAAM,OAAO,GAAG,gBAAgB,UAAU;AAAA,MAC7C;AAAA,IACF;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAEO,MAAM,mBAAmB,CAAC,sBAC/B,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,SAAS,MAAM,MAAM;AACtB,UAAM,gBAAgB;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AACF;AAEK,MAAM,0BAA0B,CAAC,6BACtC,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,SAAS,MAAM,MAAM;AACtB,UAAM,uBAAuB;AAAA,EAC/B;AAAA,EACA;AAAA,EACA;AACF;AAEK,MAAM,oBAAoB,CAAC,gBAChC,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,SAAS,MAAM,MAAM;AACtB,UAAM,iBAAiB;AAAA,MACrB,WAAW,KAAK,IAAI;AAAA,MACpB;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,EACA;AACF;AAEK,MAAM,yBAAyB,CAAC,aACrC,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,SAAS,MAAM,MAAM;AACtB,UAAM,sBAAsB;AAAA,MAC1B,WAAW,KAAK,IAAI;AAAA,MACpB;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,EACA;AACF;AAEK,MAAM,kBAAkB,CAAC,UAAkB;AAChD,6BAAS,EAAE;AAAA,IACT,CAAC,EAAE,SAAS,MAAM,MAAM;AACtB,YAAM,SAAS,MAAM,OAAO,EAAE,QAAQ;AAAA,IACxC;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
