"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var toastsActions_exports = {};
__export(toastsActions_exports, {
  addCustomToast: () => addCustomToast,
  addTransactionToast: () => addTransactionToast,
  createCustomToast: () => createCustomToast,
  customToastCloseHandlersDictionary: () => customToastCloseHandlersDictionary,
  customToastComponentDictionary: () => customToastComponentDictionary,
  removeAllCustomToasts: () => removeAllCustomToasts,
  removeAllTransactionToasts: () => removeAllTransactionToasts,
  removeCustomToast: () => removeCustomToast,
  removeTransactionToast: () => removeTransactionToast
});
module.exports = __toCommonJS(toastsActions_exports);
var import_store = require("../../../store/store");
var import_utils = require("../../../utils");
const customToastComponentDictionary = {};
const customToastCloseHandlersDictionary = {};
const addCustomToast = (customToast, currentToastId) => {
  (0, import_store.getStore)().setState(
    ({ toasts: state }) => {
      const lastToastIndex = state.customToasts.length > 0 ? Math.max(
        ...state.customToasts.map(
          (toast) => parseInt(toast.toastId.split("-").pop() ?? "0")
        )
      ) : 0;
      const toastId = currentToastId ?? `custom-toast-${lastToastIndex + 1}`;
      const existingToastIndex = state.customToasts.findIndex(
        (toast) => toast.toastId === toastId
      );
      const newToast = {
        ...customToast,
        toastId
      };
      const isToastFound = existingToastIndex !== -1;
      if (isToastFound) {
        state.customToasts[existingToastIndex] = newToast;
        return;
      }
      state.customToasts.push({
        ...newToast,
        toastId
      });
    },
    false,
    "addCustomToast"
  );
};
const removeCustomToast = (toastId) => {
  (0, import_store.getStore)().setState(
    ({ toasts: state }) => {
      state.customToasts = state.customToasts.filter(
        (toast) => toast.toastId !== toastId
      );
    },
    false,
    "removeCustomToast"
  );
};
const removeAllCustomToasts = () => {
  (0, import_store.getStore)().setState(
    ({ toasts: state }) => {
      state.customToasts = [];
    },
    false,
    "removeAllCustomToasts"
  );
};
const removeAllTransactionToasts = () => {
  (0, import_store.getStore)().setState(({ toasts: state }) => {
    state.transactionToasts = [];
  });
};
const addTransactionToast = ({
  toastId,
  totalDuration
}) => {
  let newToastId = "";
  (0, import_store.getStore)().setState(
    ({ toasts: state }) => {
      const lastToastIndex = state.transactionToasts.length > 0 ? Math.max(
        ...state.transactionToasts.map(
          (toast) => parseInt(toast.toastId.split("-").pop() ?? "0")
        )
      ) : 0;
      newToastId = toastId ?? `transaction-toast-${lastToastIndex + 1}`;
      state.transactionToasts.push({
        startTime: (0, import_utils.getUnixTimestamp)(),
        endTime: (0, import_utils.getUnixTimestampWithAddedMilliseconds)(totalDuration),
        toastId: newToastId
      });
    },
    false,
    "addTransactionToast"
  );
  return newToastId;
};
const removeTransactionToast = (toastId) => {
  (0, import_store.getStore)().setState(
    ({ toasts: state }) => {
      state.transactionToasts = state.transactionToasts.filter((toast) => {
        return toast.toastId !== toastId;
      });
    },
    false,
    "removeTransactionToast"
  );
  delete customToastCloseHandlersDictionary[toastId];
  delete customToastComponentDictionary[toastId];
};
const createCustomToast = (props) => {
  const { toasts } = (0, import_store.getStore)().getState();
  const lastToastIndex = toasts.customToasts.length > 0 ? Math.max(
    ...toasts.customToasts.map(
      (toast) => parseInt(toast.toastId.split("-").pop() ?? "0")
    )
  ) : 0;
  const toastId = props.toastId || `custom-toast-${lastToastIndex + 1}`;
  if (props.onClose) {
    customToastCloseHandlersDictionary[toastId] = props.onClose;
  }
  if (props.instantiateToastElement) {
    customToastComponentDictionary[toastId] = props.instantiateToastElement;
    (0, import_store.getStore)().setState(
      ({ toasts: state }) => {
        const existingToastIndex = state.customToasts.findIndex(
          (toast2) => toast2.toastId === toastId
        );
        const toast = {
          ...props,
          instantiateToastElement: null,
          toastId
        };
        const isToastFound = existingToastIndex !== -1;
        if (isToastFound) {
          state.customToasts[existingToastIndex] = toast;
        } else {
          state.customToasts.push(toast);
        }
      },
      false,
      "createCustomToast"
    );
    return toastId;
  }
  addCustomToast(props, toastId);
  return toastId;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addCustomToast,
  addTransactionToast,
  createCustomToast,
  customToastCloseHandlersDictionary,
  customToastComponentDictionary,
  removeAllCustomToasts,
  removeAllTransactionToasts,
  removeCustomToast,
  removeTransactionToast
});
//# sourceMappingURL=toastsActions.cjs.map
