"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var initializeNetwork_exports = {};
__export(initializeNetwork_exports, {
  initializeNetwork: () => initializeNetwork
});
module.exports = __toCommonJS(initializeNetwork_exports);
var import_getNetworkConfigFromApi = require("../../../apiCalls/configuration/getNetworkConfigFromApi");
var import_getServerConfiguration = require("../../../apiCalls/configuration/getServerConfiguration");
var import_network = require("../../../constants/network.constants");
var import_emptyNetwork = require("../../../store/slices/network/emptyNetwork");
var import_networkActions = require("./networkActions");
const initializeNetwork = async ({
  customNetworkConfig = {},
  environment
}) => {
  const fetchConfigFromServer = !customNetworkConfig?.skipFetchFromServer;
  const customNetworkApiAddress = customNetworkConfig?.apiAddress;
  const isFoundEnv = environment && environment in import_network.fallbackNetworkConfigurations;
  const fallbackConfig = isFoundEnv ? import_network.fallbackNetworkConfigurations[environment] : {};
  const baseConfig = {
    ...import_emptyNetwork.emptyNetwork,
    ...fallbackConfig,
    ...customNetworkConfig
  };
  const localConfig = {
    ...baseConfig,
    apiTimeout: String(baseConfig.apiTimeout)
  };
  const fallbackApiAddress = fallbackConfig?.apiAddress;
  if (!isFoundEnv && fetchConfigFromServer) {
    const apiAddress = customNetworkApiAddress || fallbackApiAddress;
    const dappConfig = await (0, import_getServerConfiguration.getServerConfiguration)(apiAddress);
    const networkConfig = !localConfig.roundDuration ? await (0, import_getNetworkConfigFromApi.getNetworkConfigFromApi)(apiAddress) : null;
    if (networkConfig != null) {
      localConfig.roundDuration = networkConfig.erd_round_duration;
    }
    if (dappConfig != null) {
      const apiConfig = {
        ...localConfig,
        ...dappConfig,
        ...customNetworkConfig
      };
      (0, import_networkActions.initializeNetworkConfig)(apiConfig);
      return apiConfig;
    }
  }
  (0, import_networkActions.initializeNetworkConfig)(localConfig);
  return localConfig;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  initializeNetwork
});
//# sourceMappingURL=initializeNetwork.cjs.map
