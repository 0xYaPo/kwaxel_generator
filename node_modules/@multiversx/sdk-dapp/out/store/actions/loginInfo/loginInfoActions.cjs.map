{
  "version": 3,
  "sources": ["../../../../src/store/actions/loginInfo/loginInfoActions.ts"],
  "sourcesContent": ["import { ProviderType } from 'providers/types/providerFactory.types';\nimport {\n  LedgerLoginType,\n  WalletConnectLoginType\n} from 'store/slices/loginInfo/loginInfo.types';\nimport { getStore } from 'store/store';\nimport { TokenLoginType } from 'types/login.types';\n\nexport const setProviderType = <T extends ProviderType = ProviderType>(\n  providerType: T\n) =>\n  getStore().setState(\n    ({ loginInfo: state }) => {\n      state.providerType = providerType;\n    },\n    false,\n    'setProviderType'\n  );\n\nexport const setTokenLogin = (tokenLogin: TokenLoginType) =>\n  getStore().setState(\n    ({ loginInfo: state }) => {\n      state.tokenLogin = tokenLogin;\n    },\n    false,\n    'setTokenLogin'\n  );\n\nexport const setLoginToken = (loginToken: string) =>\n  getStore().setState(\n    ({ loginInfo: state }) => {\n      if (state.tokenLogin != null) {\n        state.tokenLogin.loginToken = loginToken;\n        return;\n      }\n      state.tokenLogin = {\n        loginToken\n      };\n    },\n    false,\n    'setLoginToken'\n  );\n\nexport const setTokenLoginSignature = (signature: string) =>\n  getStore().setState(\n    ({ loginInfo: state }) => {\n      if (state?.tokenLogin != null) {\n        state.tokenLogin.signature = signature;\n      }\n    },\n    false,\n    'setTokenLoginSignature'\n  );\n\nexport const setWalletConnectLogin = (\n  walletConnectLogin: WalletConnectLoginType | null\n) =>\n  getStore().setState(\n    ({ loginInfo: state }) => {\n      state.walletConnectLogin = walletConnectLogin;\n    },\n    false,\n    'setWalletConnectLogin'\n  );\n\nexport const setLedgerLogin = (ledgerLogin: LedgerLoginType | null) =>\n  getStore().setState(\n    ({ loginInfo: state }) => {\n      state.ledgerLogin = ledgerLogin;\n    },\n    false,\n    'setLedgerLogin'\n  );\n\nexport const setIsWalletConnectV2Initialized = (isInitialized: boolean) =>\n  getStore().setState(\n    ({ loginInfo: state }) => {\n      state.isWalletConnectV2Initialized = isInitialized;\n    },\n    false,\n    'setIsWalletConnectV2Initialized'\n  );\n\nexport const removeLoginExpiresAt = () =>\n  getStore().setState(\n    ({ loginInfo: state }) => {\n      state.loginExpiresAt = null;\n    },\n    false,\n    'removeLoginExpiresAt'\n  );\n\nexport const addLoginExpiresAt = (expiresAt: number) =>\n  getStore().setState(\n    ({ loginInfo: state }) => {\n      state.loginExpiresAt = expiresAt;\n    },\n    false,\n    'addLoginExpiresAt'\n  );\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA,mBAAyB;AAGlB,MAAM,kBAAkB,CAC7B,qBAEA,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,WAAW,MAAM,MAAM;AACxB,UAAM,eAAe;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AACF;AAEK,MAAM,gBAAgB,CAAC,mBAC5B,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,WAAW,MAAM,MAAM;AACxB,UAAM,aAAa;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AACF;AAEK,MAAM,gBAAgB,CAAC,mBAC5B,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,WAAW,MAAM,MAAM;AACxB,QAAI,MAAM,cAAc,MAAM;AAC5B,YAAM,WAAW,aAAa;AAC9B;AAAA,IACF;AACA,UAAM,aAAa;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AAAA,EACA;AAAA,EACA;AACF;AAEK,MAAM,yBAAyB,CAAC,kBACrC,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,WAAW,MAAM,MAAM;AACxB,QAAI,OAAO,cAAc,MAAM;AAC7B,YAAM,WAAW,YAAY;AAAA,IAC/B;AAAA,EACF;AAAA,EACA;AAAA,EACA;AACF;AAEK,MAAM,wBAAwB,CACnC,2BAEA,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,WAAW,MAAM,MAAM;AACxB,UAAM,qBAAqB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AACF;AAEK,MAAM,iBAAiB,CAAC,oBAC7B,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,WAAW,MAAM,MAAM;AACxB,UAAM,cAAc;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AACF;AAEK,MAAM,kCAAkC,CAAC,sBAC9C,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,WAAW,MAAM,MAAM;AACxB,UAAM,+BAA+B;AAAA,EACvC;AAAA,EACA;AAAA,EACA;AACF;AAEK,MAAM,uBAAuB,UAClC,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,WAAW,MAAM,MAAM;AACxB,UAAM,iBAAiB;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AACF;AAEK,MAAM,oBAAoB,CAAC,kBAChC,uBAAS,EAAE;AAAA,EACT,CAAC,EAAE,WAAW,MAAM,MAAM;AACxB,UAAM,iBAAiB;AAAA,EACzB;AAAA,EACA;AAAA,EACA;AACF;",
  "names": []
}
