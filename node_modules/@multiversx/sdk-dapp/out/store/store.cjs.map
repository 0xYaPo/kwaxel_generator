{
  "version": 3,
  "sources": ["../../src/store/store.ts"],
  "sourcesContent": ["import { createJSONStorage, devtools, persist } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport { createStore } from 'zustand/vanilla';\nimport { applyMiddlewares } from './middleware';\nimport {\n  networkSlice,\n  accountSlice,\n  loginInfoSlice,\n  configSlice,\n  toastSlice,\n  cacheSlice,\n  uiSlice\n} from './slices';\nimport { transactionsSlice } from './slices/transactions';\nimport {\n  InMemoryStorage,\n  defaultStorageCallback,\n  StorageCallback\n} from './storage';\nimport { StoreType } from './store.types';\n\nexport type MutatorsIn = [\n  ['zustand/devtools', never],\n  ['zustand/persist', unknown],\n  ['zustand/immer', never]\n];\n\nexport type MutatorsOut = [\n  ['zustand/devtools', never],\n  ['zustand/persist', StoreType],\n  ['zustand/immer', never]\n];\n\nexport const createDAppStore = (getStorageCallback: StorageCallback) => {\n  const store = createStore<StoreType, MutatorsOut>(\n    devtools(\n      persist(\n        immer((...args) => ({\n          network: networkSlice(...args),\n          account: accountSlice(...args),\n          loginInfo: loginInfoSlice(...args),\n          config: configSlice(...args),\n          transactions: transactionsSlice(...args),\n          toasts: toastSlice(...args),\n          cache: cacheSlice(...args),\n          ui: uiSlice(...args)\n        })),\n        {\n          name: 'sdk-dapp-store',\n          storage: createJSONStorage(getStorageCallback)\n        }\n      )\n    )\n  );\n  store.subscribe(applyMiddlewares);\n  return store;\n};\n\nexport type StoreApi = ReturnType<typeof createDAppStore>;\n\nlet store: StoreApi;\n\nexport const setDAppStore = (_store: StoreApi) => {\n  store = _store;\n};\n\nexport const getStore = () => {\n  if (!store) {\n    setDAppStore(createDAppStore(() => new InMemoryStorage()));\n  }\n  return store;\n};\n\n/**\n * Initialize store with the preferred storage by passing a callback.\n * Default storage is localStorage.\n * You can pass your own storage.\n * Call this function before using store, ideally before app bootstrapping.\n * @param getStorageCallback\n * @default () => localStorage\n * @returns persistent store instance\n * @example\n * initStore(() => window.localStorage);\n * initStore(() => window.sessionStorage);\n * initStore(() => new InMemoryStorage());\n * */\nexport const initStore = (getStorageCallback = defaultStorageCallback) => {\n  const dappStore = createDAppStore(getStorageCallback);\n  setDAppStore(dappStore);\n  return dappStore;\n};\n\nexport const getState = () => getStore().getState();\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAqD;AACrD,mBAAsB;AACtB,qBAA4B;AAC5B,IAAAA,qBAAiC;AACjC,oBAQO;AACP,0BAAkC;AAClC,qBAIO;AAeA,MAAM,kBAAkB,CAAC,uBAAwC;AACtE,QAAMC,aAAQ;AAAA,QACZ;AAAA,UACE;AAAA,YACE,oBAAM,IAAI,UAAU;AAAA,UAClB,aAAS,4BAAa,GAAG,IAAI;AAAA,UAC7B,aAAS,4BAAa,GAAG,IAAI;AAAA,UAC7B,eAAW,8BAAe,GAAG,IAAI;AAAA,UACjC,YAAQ,2BAAY,GAAG,IAAI;AAAA,UAC3B,kBAAc,uCAAkB,GAAG,IAAI;AAAA,UACvC,YAAQ,0BAAW,GAAG,IAAI;AAAA,UAC1B,WAAO,0BAAW,GAAG,IAAI;AAAA,UACzB,QAAI,uBAAQ,GAAG,IAAI;AAAA,QACrB,EAAE;AAAA,QACF;AAAA,UACE,MAAM;AAAA,UACN,aAAS,qCAAkB,kBAAkB;AAAA,QAC/C;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,EAAAA,OAAM,UAAU,mCAAgB;AAChC,SAAOA;AACT;AAIA,IAAI;AAEG,MAAM,eAAe,CAAC,WAAqB;AAChD,UAAQ;AACV;AAEO,MAAM,WAAW,MAAM;AAC5B,MAAI,CAAC,OAAO;AACV,iBAAa,gBAAgB,MAAM,IAAI,+BAAgB,CAAC,CAAC;AAAA,EAC3D;AACA,SAAO;AACT;AAeO,MAAM,YAAY,CAAC,qBAAqB,0CAA2B;AACxE,QAAM,YAAY,gBAAgB,kBAAkB;AACpD,eAAa,SAAS;AACtB,SAAO;AACT;AAEO,MAAM,WAAW,MAAM,SAAS,EAAE,SAAS;",
  "names": ["import_middleware", "store"]
}
