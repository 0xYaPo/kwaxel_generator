{
  "version": 3,
  "sources": ["../../../../../src/methods/trackTransactions/helpers/checkTransactionStatus/manageFailedTransactions.ts"],
  "sourcesContent": ["import {\n  updateTransactionStatus,\n  updateSessionStatus\n} from 'store/actions/transactions/transactionsActions';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums.types';\nimport { ResultType } from 'types/serverTransactions.types';\nimport { SignedTransactionType } from 'types/transactions.types';\nimport { runSessionCallbacks } from './runSessionCallbacks';\n\nexport async function manageFailedTransactions({\n  results,\n  hash,\n  sessionId\n}: {\n  results: ResultType[];\n  hash: string;\n  sessionId: string;\n}) {\n  const resultWithError = results?.find(\n    (scResult) => scResult?.returnMessage !== ''\n  );\n\n  updateTransactionStatus({\n    sessionId,\n    transaction: {\n      ...(resultWithError as unknown as SignedTransactionType),\n      hash,\n      status: TransactionServerStatusesEnum.fail,\n      inTransit: false\n    }\n  });\n\n  updateSessionStatus({\n    sessionId,\n    status: TransactionBatchStatusesEnum.fail,\n    errorMessage: resultWithError?.returnMessage\n  });\n\n  await runSessionCallbacks({\n    sessionId,\n    status: TransactionBatchStatusesEnum.fail\n  });\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAGO;AACP,mBAGO;AAGP,iCAAoC;AAEpC,eAAsB,yBAAyB;AAAA,EAC7C;AAAA,EACA;AAAA,EACA;AACF,GAIG;AACD,QAAM,kBAAkB,SAAS;AAAA,IAC/B,CAAC,aAAa,UAAU,kBAAkB;AAAA,EAC5C;AAEA,0DAAwB;AAAA,IACtB;AAAA,IACA,aAAa;AAAA,MACX,GAAI;AAAA,MACJ;AAAA,MACA,QAAQ,2CAA8B;AAAA,MACtC,WAAW;AAAA,IACb;AAAA,EACF,CAAC;AAED,sDAAoB;AAAA,IAClB;AAAA,IACA,QAAQ,0CAA6B;AAAA,IACrC,cAAc,iBAAiB;AAAA,EACjC,CAAC;AAED,YAAM,gDAAoB;AAAA,IACxB;AAAA,IACA,QAAQ,0CAA6B;AAAA,EACvC,CAAC;AACH;",
  "names": []
}
