"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var trackTransactions_exports = {};
__export(trackTransactions_exports, {
  trackTransactions: () => trackTransactions
});
module.exports = __toCommonJS(trackTransactions_exports);
var import_storage = require("../../constants/storage.constants");
var import_websocket = require("../../constants/websocket.constants");
var import_accountSelectors = require("../../store/selectors/accountSelectors");
var import_store = require("../../store/store");
var import_subscriptions = require("../../types/subscriptions.type");
var import_checkTransactionStatus = require("./helpers/checkTransactionStatus");
var import_getPollingInterval = require("./helpers/getPollingInterval");
async function trackTransactions() {
  const store = (0, import_store.getStore)();
  const pollingInterval = (0, import_getPollingInterval.getPollingInterval)();
  let pollingIntervalRef = null;
  let websocketStatusCheckIntervalRef = null;
  let timestamp = (0, import_accountSelectors.websocketEventSelector)(store.getState())?.timestamp;
  const recheckStatus = () => {
    (0, import_checkTransactionStatus.checkTransactionStatus)();
  };
  const startPolling = () => {
    pollingIntervalRef ??= setInterval(recheckStatus, pollingInterval);
  };
  const stopPolling = () => {
    if (pollingIntervalRef) {
      clearInterval(pollingIntervalRef);
      pollingIntervalRef = null;
    }
  };
  const setupWebSocketTracking = () => {
    stopPolling();
    const unsubscribeWebsocketEvent = store.subscribe(
      ({ account: { websocketEvent } }) => {
        if (websocketEvent?.message && timestamp !== websocketEvent.timestamp) {
          timestamp = websocketEvent.timestamp;
          recheckStatus();
        }
      }
    );
    import_storage.subscriptions.set(
      import_subscriptions.SubscriptionsEnum.websocketEventReceived,
      unsubscribeWebsocketEvent
    );
  };
  const startWatchingWebsocketStatus = () => {
    if (import_websocket.websocketConnection.status !== import_websocket.WebsocketConnectionStatusEnum.NOT_INITIALIZED || websocketStatusCheckIntervalRef) {
      return;
    }
    websocketStatusCheckIntervalRef = setInterval(() => {
      if (import_websocket.websocketConnection.status === import_websocket.WebsocketConnectionStatusEnum.COMPLETED) {
        clearInterval(websocketStatusCheckIntervalRef);
        websocketStatusCheckIntervalRef = null;
        setupWebSocketTracking();
      }
    }, 1e3);
  };
  recheckStatus();
  const stopTransactionsTracking = () => {
    stopPolling();
    if (websocketStatusCheckIntervalRef) {
      clearInterval(websocketStatusCheckIntervalRef);
      websocketStatusCheckIntervalRef = null;
    }
  };
  const unsubscribeWebsocketStatus = store.subscribe(
    ({ account: { address }, config: { websocketStatus } }, prevState) => {
      const hasStatusChange = prevState.config.websocketStatus !== websocketStatus;
      if (!hasStatusChange) {
        return;
      }
      switch (websocketStatus) {
        case import_websocket.WebsocketConnectionStatusEnum.COMPLETED:
          setupWebSocketTracking();
          break;
        case import_websocket.WebsocketConnectionStatusEnum.PENDING:
          startPolling();
          startWatchingWebsocketStatus();
          break;
        default:
          address ? startPolling() : stopTransactionsTracking();
          break;
      }
    }
  );
  import_storage.subscriptions.set(
    import_subscriptions.SubscriptionsEnum.websocketStatusChanged,
    unsubscribeWebsocketStatus
  );
  import_storage.subscriptions.set(
    import_subscriptions.SubscriptionsEnum.websocketEventReceived,
    stopTransactionsTracking
  );
  return { stopTransactionsTracking };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  trackTransactions
});
//# sourceMappingURL=trackTransactions.cjs.map
