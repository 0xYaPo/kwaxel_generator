{
  "version": 3,
  "sources": ["../../../src/methods/trackTransactions/trackTransactions.ts"],
  "sourcesContent": ["import { subscriptions } from 'constants/storage.constants';\nimport {\n  WebsocketConnectionStatusEnum,\n  websocketConnection\n} from 'constants/websocket.constants';\nimport { websocketEventSelector } from 'store/selectors/accountSelectors';\nimport { getStore } from 'store/store';\nimport { SubscriptionsEnum } from 'types/subscriptions.type';\nimport { checkTransactionStatus } from './helpers/checkTransactionStatus';\nimport { getPollingInterval } from './helpers/getPollingInterval';\n\n/**\n * Tracks transactions using websocket or polling\n * @returns stopTransactionsTracking function\n */\nexport async function trackTransactions() {\n  const store = getStore();\n  const pollingInterval = getPollingInterval();\n  let pollingIntervalRef: ReturnType<typeof setTimeout> | null = null;\n  let websocketStatusCheckIntervalRef: ReturnType<typeof setTimeout> | null =\n    null;\n  let timestamp = websocketEventSelector(store.getState())?.timestamp;\n\n  const recheckStatus = () => {\n    checkTransactionStatus();\n  };\n\n  const startPolling = () => {\n    pollingIntervalRef ??= setInterval(recheckStatus, pollingInterval);\n  };\n\n  const stopPolling = () => {\n    if (pollingIntervalRef) {\n      clearInterval(pollingIntervalRef);\n      pollingIntervalRef = null;\n    }\n  };\n\n  const setupWebSocketTracking = () => {\n    stopPolling();\n    const unsubscribeWebsocketEvent = store.subscribe(\n      ({ account: { websocketEvent } }) => {\n        if (websocketEvent?.message && timestamp !== websocketEvent.timestamp) {\n          timestamp = websocketEvent.timestamp;\n          recheckStatus();\n        }\n      }\n    );\n\n    subscriptions.set(\n      SubscriptionsEnum.websocketEventReceived,\n      unsubscribeWebsocketEvent\n    );\n  };\n\n  const startWatchingWebsocketStatus = () => {\n    if (\n      websocketConnection.status !==\n        WebsocketConnectionStatusEnum.NOT_INITIALIZED ||\n      websocketStatusCheckIntervalRef\n    ) {\n      return;\n    }\n\n    websocketStatusCheckIntervalRef = setInterval(() => {\n      if (\n        websocketConnection.status === WebsocketConnectionStatusEnum.COMPLETED\n      ) {\n        clearInterval(websocketStatusCheckIntervalRef!);\n        websocketStatusCheckIntervalRef = null;\n        setupWebSocketTracking();\n      }\n    }, 1000);\n  };\n\n  // Initial execution\n  recheckStatus();\n\n  const stopTransactionsTracking = () => {\n    stopPolling();\n    if (websocketStatusCheckIntervalRef) {\n      clearInterval(websocketStatusCheckIntervalRef);\n      websocketStatusCheckIntervalRef = null;\n    }\n  };\n\n  const unsubscribeWebsocketStatus = store.subscribe(\n    ({ account: { address }, config: { websocketStatus } }, prevState) => {\n      const hasStatusChange =\n        prevState.config.websocketStatus !== websocketStatus;\n\n      if (!hasStatusChange) {\n        return;\n      }\n\n      switch (websocketStatus) {\n        case WebsocketConnectionStatusEnum.COMPLETED:\n          setupWebSocketTracking();\n          break;\n        case WebsocketConnectionStatusEnum.PENDING:\n          startPolling();\n          startWatchingWebsocketStatus();\n          break;\n        default:\n          address ? startPolling() : stopTransactionsTracking();\n          break;\n      }\n    }\n  );\n\n  subscriptions.set(\n    SubscriptionsEnum.websocketStatusChanged,\n    unsubscribeWebsocketStatus\n  );\n  subscriptions.set(\n    SubscriptionsEnum.websocketEventReceived,\n    stopTransactionsTracking\n  );\n  return { stopTransactionsTracking };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAA8B;AAC9B,uBAGO;AACP,8BAAuC;AACvC,mBAAyB;AACzB,2BAAkC;AAClC,oCAAuC;AACvC,gCAAmC;AAMnC,eAAsB,oBAAoB;AACxC,QAAM,YAAQ,uBAAS;AACvB,QAAM,sBAAkB,8CAAmB;AAC3C,MAAI,qBAA2D;AAC/D,MAAI,kCACF;AACF,MAAI,gBAAY,gDAAuB,MAAM,SAAS,CAAC,GAAG;AAE1D,QAAM,gBAAgB,MAAM;AAC1B,8DAAuB;AAAA,EACzB;AAEA,QAAM,eAAe,MAAM;AACzB,2BAAuB,YAAY,eAAe,eAAe;AAAA,EACnE;AAEA,QAAM,cAAc,MAAM;AACxB,QAAI,oBAAoB;AACtB,oBAAc,kBAAkB;AAChC,2BAAqB;AAAA,IACvB;AAAA,EACF;AAEA,QAAM,yBAAyB,MAAM;AACnC,gBAAY;AACZ,UAAM,4BAA4B,MAAM;AAAA,MACtC,CAAC,EAAE,SAAS,EAAE,eAAe,EAAE,MAAM;AACnC,YAAI,gBAAgB,WAAW,cAAc,eAAe,WAAW;AACrE,sBAAY,eAAe;AAC3B,wBAAc;AAAA,QAChB;AAAA,MACF;AAAA,IACF;AAEA,iCAAc;AAAA,MACZ,uCAAkB;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AAEA,QAAM,+BAA+B,MAAM;AACzC,QACE,qCAAoB,WAClB,+CAA8B,mBAChC,iCACA;AACA;AAAA,IACF;AAEA,sCAAkC,YAAY,MAAM;AAClD,UACE,qCAAoB,WAAW,+CAA8B,WAC7D;AACA,sBAAc,+BAAgC;AAC9C,0CAAkC;AAClC,+BAAuB;AAAA,MACzB;AAAA,IACF,GAAG,GAAI;AAAA,EACT;AAGA,gBAAc;AAEd,QAAM,2BAA2B,MAAM;AACrC,gBAAY;AACZ,QAAI,iCAAiC;AACnC,oBAAc,+BAA+B;AAC7C,wCAAkC;AAAA,IACpC;AAAA,EACF;AAEA,QAAM,6BAA6B,MAAM;AAAA,IACvC,CAAC,EAAE,SAAS,EAAE,QAAQ,GAAG,QAAQ,EAAE,gBAAgB,EAAE,GAAG,cAAc;AACpE,YAAM,kBACJ,UAAU,OAAO,oBAAoB;AAEvC,UAAI,CAAC,iBAAiB;AACpB;AAAA,MACF;AAEA,cAAQ,iBAAiB;AAAA,QACvB,KAAK,+CAA8B;AACjC,iCAAuB;AACvB;AAAA,QACF,KAAK,+CAA8B;AACjC,uBAAa;AACb,uCAA6B;AAC7B;AAAA,QACF;AACE,oBAAU,aAAa,IAAI,yBAAyB;AACpD;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAEA,+BAAc;AAAA,IACZ,uCAAkB;AAAA,IAClB;AAAA,EACF;AACA,+BAAc;AAAA,IACZ,uCAAkB;AAAA,IAClB;AAAA,EACF;AACA,SAAO,EAAE,yBAAyB;AACpC;",
  "names": []
}
