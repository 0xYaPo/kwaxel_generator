{
  "version": 3,
  "sources": ["../../../src/methods/initApp/initApp.ts"],
  "sourcesContent": ["import { safeWindow } from 'constants/window.constants';\nimport { defineCustomElements } from 'lib/sdkDappUi';\nimport { ToastManager } from 'managers/internal/ToastManager/ToastManager';\nimport { LogoutManager } from 'managers/LogoutManager/LogoutManager';\nimport { registerSessionCallbacks } from 'managers/TransactionManager/helpers/sessionCallbacks';\nimport { restoreProvider } from 'providers/helpers/restoreProvider';\nimport { ProviderFactory } from 'providers/ProviderFactory';\nimport { ICustomProvider } from 'providers/types/providerFactory.types';\nimport { getDefaultNativeAuthConfig } from 'services/nativeAuth/methods/getDefaultNativeAuthConfig';\nimport { NativeAuthConfigType } from 'services/nativeAuth/nativeAuth.types';\nimport { initializeNetwork } from 'store/actions';\nimport {\n  setNativeAuthConfig,\n  setWalletConnectConfig\n} from 'store/actions/config/configActions';\nimport { defaultStorageCallback } from 'store/storage';\nimport { initStore } from 'store/store';\nimport { ThemesEnum } from 'types';\nimport { switchTheme } from 'utils/visual/switchTheme';\nimport { InitAppType } from './initApp.types';\nimport { REHYDRATE_STORE_TIMEOUT } from '../../constants';\nimport { getIsLoggedIn } from '../account/getIsLoggedIn';\nimport { registerWebsocketListener } from './websocket/registerWebsocket';\nimport { trackTransactions } from '../trackTransactions/trackTransactions';\nimport { setGasStationMetadata } from './gastStationMetadata/setGasStationMetadata';\nimport { getAccount } from '../account/getAccount';\n\nconst defaultInitAppProps = {\n  storage: {\n    getStorageCallback: defaultStorageCallback\n  }\n};\n\n/**\n * Flag indicating whether the app has already been initialized.\n *\n * Prevents repeated initialization steps such as provider restoration,\n * websocket listener registration, and transaction tracking setup.\n * This ensures that multiple calls to `initApp` do not cause duplicated\n * subscriptions or side effects.\n *\n * @internal\n */\nlet isAppInitialized = false;\nlet isInitializing = false;\n\n/**\n * Initializes the dApp with the given configuration.\n * @param props - The configuration for the dApp initialization.\n *\n * @example\n * ```ts\n   initApp({\n      nativeAuth: true,\n      environment: EnvironmentsEnum.devnet\n   });\n *  ```\n * */\nexport async function initApp({\n  storage = defaultInitAppProps.storage,\n  dAppConfig,\n  customProviders\n}: InitAppType) {\n  if (isInitializing) {\n    return;\n  }\n\n  isInitializing = true;\n\n  const defaultTheme = dAppConfig?.theme ?? ThemesEnum.dark;\n  await defineCustomElements();\n\n  switchTheme(defaultTheme);\n\n  const store = initStore(storage.getStorageCallback);\n\n  // Wait for store rehydration when using async storage (like React Native AsyncStorage)\n  // This ensures the store is fully populated before restoreProvider() executes\n  if (storage.getStorageCallback !== defaultStorageCallback) {\n    try {\n      await new Promise<void>((resolve, reject) => {\n        if (store.persist.hasHydrated()) {\n          resolve();\n        }\n\n        store.persist.onFinishHydration(() => {\n          resolve();\n        });\n\n        setTimeout(() => {\n          reject();\n        }, REHYDRATE_STORE_TIMEOUT);\n      });\n    } catch (error: any) {\n      console.warn(\n        `Store rehydration timed out after ${REHYDRATE_STORE_TIMEOUT / 1000} seconds. Continuing initialization...`,\n        error.message\n      );\n    }\n  }\n\n  const { apiAddress } = await initializeNetwork({\n    customNetworkConfig: dAppConfig.network,\n    environment: dAppConfig.environment\n  });\n\n  if (dAppConfig?.nativeAuth) {\n    const nativeAuthConfig: NativeAuthConfigType =\n      typeof dAppConfig.nativeAuth === 'boolean' &&\n      dAppConfig.nativeAuth === true\n        ? getDefaultNativeAuthConfig({ apiAddress })\n        : getDefaultNativeAuthConfig(dAppConfig.nativeAuth);\n\n    setNativeAuthConfig(nativeAuthConfig);\n  }\n\n  if (dAppConfig?.providers?.walletConnect) {\n    setWalletConnectConfig(dAppConfig.providers.walletConnect);\n  }\n\n  const isLoggedIn = getIsLoggedIn();\n  const account = getAccount();\n  const toastManager = ToastManager.getInstance();\n  await toastManager.init({\n    successfulToastLifetime:\n      dAppConfig.transactionTracking?.successfulToastLifetime\n  });\n\n  const usedProviders: ICustomProvider[] = [\n    ...((safeWindow as any)?.multiversx?.providers ?? []),\n    ...(customProviders || [])\n  ];\n\n  const uniqueProviders = usedProviders.filter(\n    (provider, index, arr) =>\n      index === arr.findIndex((item) => item.type === provider.type)\n  );\n\n  ProviderFactory.customProviders = uniqueProviders || [];\n\n  if (!isAppInitialized) {\n    await restoreProvider();\n\n    if (isLoggedIn) {\n      await registerWebsocketListener(account.address);\n      trackTransactions();\n      LogoutManager.getInstance().init();\n      registerSessionCallbacks({\n        onSuccess: dAppConfig.transactionTracking?.onSuccess,\n        onFail: dAppConfig.transactionTracking?.onFail\n      });\n    }\n  }\n\n  if (account.shard != null) {\n    await setGasStationMetadata({\n      shard: Number(account.shard),\n      apiAddress\n    });\n  }\n\n  isAppInitialized = true;\n  isInitializing = false;\n}\n"],
  "mappings": "04YA2BA,IAAMA,EAAsB,CAC1B,QAAS,CACP,mBAAoBC,CACtB,CACF,EAYIC,EAAmB,GACnBC,EAAiB,GAcrB,eAAsBC,GAAQ,CAC5B,QAAAC,EAAUL,EAAoB,QAC9B,WAAAM,EACA,gBAAAC,CACF,EAAgB,CACd,GAAIJ,EACF,OAGFA,EAAiB,GAEjB,IAAMK,EAAeF,GAAY,wBACjC,MAAMG,EAAqB,EAE3BC,EAAYF,CAAY,EAExB,IAAMG,EAAQC,EAAUP,EAAQ,kBAAkB,EAIlD,GAAIA,EAAQ,qBAAuBJ,EACjC,GAAI,CACF,MAAM,IAAI,QAAc,CAACY,EAASC,IAAW,CACvCH,EAAM,QAAQ,YAAY,GAC5BE,EAAQ,EAGVF,EAAM,QAAQ,kBAAkB,IAAM,CACpCE,EAAQ,CACV,CAAC,EAED,WAAW,IAAM,CACfC,EAAO,CACT,EAAGC,CAAuB,CAC5B,CAAC,CACH,OAASC,EAAY,CACnB,QAAQ,KACN,qCAAqCD,EAA0B,GAAI,yCACnEC,EAAM,OACR,CACF,CAGF,GAAM,CAAE,WAAAC,CAAW,EAAI,MAAMC,EAAkB,CAC7C,oBAAqBZ,EAAW,QAChC,YAAaA,EAAW,WAC1B,CAAC,EAED,GAAIA,GAAY,WAAY,CAC1B,IAAMa,EACJ,OAAOb,EAAW,YAAe,WACjCA,EAAW,aAAe,GACtBc,EAA2B,CAAE,WAAAH,CAAW,CAAC,EACzCG,EAA2Bd,EAAW,UAAU,EAEtDe,EAAoBF,CAAgB,CACtC,CAEIb,GAAY,WAAW,eACzBgB,EAAuBhB,EAAW,UAAU,aAAa,EAG3D,IAAMiB,EAAaC,EAAc,EAC3BC,EAAUC,EAAW,EAE3B,MADqBC,EAAa,YAAY,EAC3B,KAAK,CACtB,wBACErB,EAAW,qBAAqB,uBACpC,CAAC,EAOD,IAAMsB,EALmC,CACvC,GAAKC,GAAoB,YAAY,WAAa,CAAC,EACnD,GAAItB,GAAmB,CAAC,CAC1B,EAEsC,OACpC,CAACuB,EAAUC,EAAOC,IAChBD,IAAUC,EAAI,UAAWC,GAASA,EAAK,OAASH,EAAS,IAAI,CACjE,EAEAI,EAAgB,gBAAkBN,GAAmB,CAAC,EAEjD1B,IACH,MAAMiC,EAAgB,EAElBZ,IACF,MAAMa,EAA0BX,EAAQ,OAAO,EAC/CY,EAAkB,EAClBC,EAAc,YAAY,EAAE,KAAK,EACjCC,EAAyB,CACvB,UAAWjC,EAAW,qBAAqB,UAC3C,OAAQA,EAAW,qBAAqB,MAC1C,CAAC,IAIDmB,EAAQ,OAAS,MACnB,MAAMe,EAAsB,CAC1B,MAAO,OAAOf,EAAQ,KAAK,EAC3B,WAAAR,CACF,CAAC,EAGHf,EAAmB,GACnBC,EAAiB,EACnB",
  "names": ["defaultInitAppProps", "defaultStorageCallback", "isAppInitialized", "isInitializing", "initApp", "storage", "dAppConfig", "customProviders", "defaultTheme", "defineCustomElements", "switchTheme", "store", "initStore", "resolve", "reject", "REHYDRATE_STORE_TIMEOUT", "error", "apiAddress", "initializeNetwork", "nativeAuthConfig", "getDefaultNativeAuthConfig", "setNativeAuthConfig", "setWalletConnectConfig", "isLoggedIn", "getIsLoggedIn", "account", "getAccount", "ToastManager", "uniqueProviders", "safeWindow", "provider", "index", "arr", "item", "ProviderFactory", "restoreProvider", "registerWebsocketListener", "trackTransactions", "LogoutManager", "registerSessionCallbacks", "setGasStationMetadata"]
}
