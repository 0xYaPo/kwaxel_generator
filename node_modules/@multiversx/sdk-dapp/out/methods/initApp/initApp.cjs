"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var initApp_exports = {};
__export(initApp_exports, {
  initApp: () => initApp
});
module.exports = __toCommonJS(initApp_exports);
var import_window = require("../../constants/window.constants");
var import_sdkDappUi = require("../../lib/sdkDappUi");
var import_ToastManager = require("../../managers/internal/ToastManager/ToastManager");
var import_LogoutManager = require("../../managers/LogoutManager/LogoutManager");
var import_sessionCallbacks = require("../../managers/TransactionManager/helpers/sessionCallbacks");
var import_restoreProvider = require("../../providers/helpers/restoreProvider");
var import_ProviderFactory = require("../../providers/ProviderFactory");
var import_getDefaultNativeAuthConfig = require("../../services/nativeAuth/methods/getDefaultNativeAuthConfig");
var import_actions = require("../../store/actions");
var import_configActions = require("../../store/actions/config/configActions");
var import_storage = require("../../store/storage");
var import_store = require("../../store/store");
var import_types = require("../../types");
var import_switchTheme = require("../../utils/visual/switchTheme");
var import_constants = require("../../constants");
var import_getIsLoggedIn = require("../account/getIsLoggedIn");
var import_registerWebsocket = require("./websocket/registerWebsocket");
var import_trackTransactions = require("../trackTransactions/trackTransactions");
var import_setGasStationMetadata = require("./gastStationMetadata/setGasStationMetadata");
var import_getAccount = require("../account/getAccount");
const defaultInitAppProps = {
  storage: {
    getStorageCallback: import_storage.defaultStorageCallback
  }
};
let isAppInitialized = false;
let isInitializing = false;
async function initApp({
  storage = defaultInitAppProps.storage,
  dAppConfig,
  customProviders
}) {
  if (isInitializing) {
    return;
  }
  isInitializing = true;
  const defaultTheme = dAppConfig?.theme ?? import_types.ThemesEnum.dark;
  await (0, import_sdkDappUi.defineCustomElements)();
  (0, import_switchTheme.switchTheme)(defaultTheme);
  const store = (0, import_store.initStore)(storage.getStorageCallback);
  if (storage.getStorageCallback !== import_storage.defaultStorageCallback) {
    try {
      await new Promise((resolve, reject) => {
        if (store.persist.hasHydrated()) {
          resolve();
        }
        store.persist.onFinishHydration(() => {
          resolve();
        });
        setTimeout(() => {
          reject();
        }, import_constants.REHYDRATE_STORE_TIMEOUT);
      });
    } catch (error) {
      console.warn(
        `Store rehydration timed out after ${import_constants.REHYDRATE_STORE_TIMEOUT / 1e3} seconds. Continuing initialization...`,
        error.message
      );
    }
  }
  const { apiAddress } = await (0, import_actions.initializeNetwork)({
    customNetworkConfig: dAppConfig.network,
    environment: dAppConfig.environment
  });
  if (dAppConfig?.nativeAuth) {
    const nativeAuthConfig = typeof dAppConfig.nativeAuth === "boolean" && dAppConfig.nativeAuth === true ? (0, import_getDefaultNativeAuthConfig.getDefaultNativeAuthConfig)({ apiAddress }) : (0, import_getDefaultNativeAuthConfig.getDefaultNativeAuthConfig)(dAppConfig.nativeAuth);
    (0, import_configActions.setNativeAuthConfig)(nativeAuthConfig);
  }
  if (dAppConfig?.providers?.walletConnect) {
    (0, import_configActions.setWalletConnectConfig)(dAppConfig.providers.walletConnect);
  }
  const isLoggedIn = (0, import_getIsLoggedIn.getIsLoggedIn)();
  const account = (0, import_getAccount.getAccount)();
  const toastManager = import_ToastManager.ToastManager.getInstance();
  await toastManager.init({
    successfulToastLifetime: dAppConfig.transactionTracking?.successfulToastLifetime
  });
  const usedProviders = [
    ...import_window.safeWindow?.multiversx?.providers ?? [],
    ...customProviders || []
  ];
  const uniqueProviders = usedProviders.filter(
    (provider, index, arr) => index === arr.findIndex((item) => item.type === provider.type)
  );
  import_ProviderFactory.ProviderFactory.customProviders = uniqueProviders || [];
  if (!isAppInitialized) {
    await (0, import_restoreProvider.restoreProvider)();
    if (isLoggedIn) {
      await (0, import_registerWebsocket.registerWebsocketListener)(account.address);
      (0, import_trackTransactions.trackTransactions)();
      import_LogoutManager.LogoutManager.getInstance().init();
      (0, import_sessionCallbacks.registerSessionCallbacks)({
        onSuccess: dAppConfig.transactionTracking?.onSuccess,
        onFail: dAppConfig.transactionTracking?.onFail
      });
    }
  }
  if (account.shard != null) {
    await (0, import_setGasStationMetadata.setGasStationMetadata)({
      shard: Number(account.shard),
      apiAddress
    });
  }
  isAppInitialized = true;
  isInitializing = false;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  initApp
});
//# sourceMappingURL=initApp.cjs.map
