{
  "version": 3,
  "sources": ["../../../../src/methods/initApp/websocket/registerWebsocket.ts"],
  "sourcesContent": ["import { initializeWebsocketConnection } from './initializeWebsocketConnection';\n\n/**\n * Manages the WebSocket connection lifecycle.\n *\n * Holds a reference to the current WebSocket connection's `closeConnection` method,\n * allowing other parts of the application to close the connection on demand (e.g., on logout).\n *\n * This pattern avoids exporting mutable bindings directly by encapsulating\n * the reference within a stable object.\n *\n * @example\n * ```ts\n * await registerWebsocketListener(address);\n * websocketManager.closeConnectionRef?.();\n * ```\n */\nexport const websocketManager = {\n  closeConnectionRef: undefined as (() => void) | undefined\n};\n\nexport async function registerWebsocketListener(address: string) {\n  const { closeConnection } = await initializeWebsocketConnection(address);\n\n  websocketManager.closeConnectionRef = closeConnection;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAA8C;AAiBvC,MAAM,mBAAmB;AAAA,EAC9B,oBAAoB;AACtB;AAEA,eAAsB,0BAA0B,SAAiB;AAC/D,QAAM,EAAE,gBAAgB,IAAI,UAAM,oEAA8B,OAAO;AAEvE,mBAAiB,qBAAqB;AACxC;",
  "names": []
}
