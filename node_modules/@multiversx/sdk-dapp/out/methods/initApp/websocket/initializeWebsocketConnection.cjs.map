{
  "version": 3,
  "sources": ["../../../../src/methods/initApp/websocket/initializeWebsocketConnection.ts"],
  "sourcesContent": ["import { io } from 'socket.io-client';\nimport { getWebsocketUrl } from 'apiCalls/websocket';\nimport {\n  WebsocketConnectionStatusEnum,\n  websocketConnection\n} from 'constants/websocket.constants';\nimport {\n  setWebsocketBatchEvent,\n  setWebsocketEvent\n} from 'store/actions/account/accountActions';\nimport { setWebsocketStatus } from 'store/actions/config/configActions';\nimport { networkSelector } from 'store/selectors';\nimport { getStore } from 'store/store';\nimport { BatchTransactionsWSResponseType } from 'types/websocket.types';\nimport { retryMultipleTimes } from 'utils/retryMultipleTimes';\n\nconst TIMEOUT = 3000;\nconst RECONNECTION_ATTEMPTS = 3;\nconst RETRY_INTERVAL = 500;\nconst MESSAGE_DELAY = 1000;\nconst SOCKET_CONNECTION_DELAY = 1000;\nconst BATCH_UPDATED_EVENT = 'batchUpdated';\nconst CONNECT = 'connect';\nconst CONNECT_ERROR = 'connect_error';\nconst DISCONNECT = 'disconnect';\n\ntype TimeoutType = ReturnType<typeof setTimeout> | null;\n\nexport async function initializeWebsocketConnection(address: string) {\n  const { apiAddress, websocketUrl: customWebsocketUrl } = networkSelector(\n    getStore().getState()\n  );\n\n  if (!address) {\n    throw new Error('Websocket could not be initialized: address missing');\n  }\n\n  let messageTimeout: TimeoutType = null;\n  let batchTimeout: TimeoutType = null;\n\n  // Update socket status in store for status subscription\n  const updateSocketStatus = (status: WebsocketConnectionStatusEnum) => {\n    websocketConnection.status = status;\n    setWebsocketStatus(status);\n  };\n\n  const handleMessageReceived = (message: string) => {\n    if (messageTimeout) {\n      clearTimeout(messageTimeout);\n    }\n    messageTimeout = setTimeout(() => {\n      setWebsocketEvent(message);\n    }, MESSAGE_DELAY);\n  };\n\n  const handleBatchUpdate = (data: BatchTransactionsWSResponseType) => {\n    if (batchTimeout) {\n      clearTimeout(batchTimeout);\n    }\n    batchTimeout = setTimeout(() => {\n      setWebsocketBatchEvent(data);\n    }, MESSAGE_DELAY);\n  };\n\n  const closeConnection = () => {\n    const instance = websocketConnection.instance;\n    if (instance) {\n      instance.off(CONNECT_ERROR);\n      instance.off(CONNECT);\n      instance.off(BATCH_UPDATED_EVENT);\n      instance.off(DISCONNECT);\n      instance.close();\n      console.log('Websocket disconnected.');\n    }\n\n    updateSocketStatus(WebsocketConnectionStatusEnum.NOT_INITIALIZED);\n    websocketConnection.instance = null;\n\n    if (messageTimeout) {\n      clearTimeout(messageTimeout);\n    }\n\n    if (batchTimeout) {\n      clearTimeout(batchTimeout);\n    }\n  };\n\n  const initializeConnection = retryMultipleTimes(\n    async () => {\n      const retryWebsocketConnect = async (\n        retries = RECONNECTION_ATTEMPTS,\n        delay = RETRY_INTERVAL\n      ) => {\n        let attempt = 0;\n        let connectionCheckTimeout: TimeoutType = null;\n        let retryTimeout: TimeoutType = null;\n\n        const tryReconnect = async () => {\n          if (attempt >= retries) {\n            console.warn('WebSocket reconnection failed after max attempts.');\n            updateSocketStatus(WebsocketConnectionStatusEnum.NOT_INITIALIZED);\n            return;\n          }\n\n          attempt++;\n\n          // Clean up previous socket\n          websocketConnection.instance?.off();\n          websocketConnection.instance?.close();\n          websocketConnection.instance = null;\n\n          try {\n            // Attempt to reconnect\n            await initializeConnection(); // attempt to reconnect\n\n            // Wait briefly and check if socket is actually connected\n            connectionCheckTimeout = setTimeout(() => {\n              const isConnected = websocketConnection.instance?.connected;\n\n              if (!isConnected) {\n                // If not connected, retry the connection\n                retryTimeout = setTimeout(tryReconnect, delay);\n              }\n            }, SOCKET_CONNECTION_DELAY);\n          } catch {\n            // If reconnect fails, retry after delay\n            retryTimeout = setTimeout(tryReconnect, delay);\n          }\n        };\n\n        // Start the reconnection process\n        tryReconnect();\n\n        // Clear any timeouts\n        const clearTimeouts = () => {\n          if (connectionCheckTimeout) {\n            clearTimeout(connectionCheckTimeout);\n            connectionCheckTimeout = null;\n          }\n\n          if (retryTimeout) {\n            clearTimeout(retryTimeout);\n            retryTimeout = null;\n          }\n        };\n\n        return clearTimeouts;\n      };\n\n      updateSocketStatus(WebsocketConnectionStatusEnum.PENDING);\n\n      const websocketUrl =\n        customWebsocketUrl ?? (await getWebsocketUrl(apiAddress));\n\n      if (!websocketUrl) {\n        updateSocketStatus(WebsocketConnectionStatusEnum.NOT_INITIALIZED);\n        return;\n      }\n\n      websocketConnection.instance = io(websocketUrl, {\n        forceNew: true,\n        reconnection: true,\n        reconnectionAttempts: RECONNECTION_ATTEMPTS,\n        timeout: TIMEOUT,\n        query: { address }\n      });\n\n      websocketConnection.instance.onAny(handleMessageReceived);\n\n      websocketConnection.instance.on(BATCH_UPDATED_EVENT, handleBatchUpdate);\n\n      websocketConnection.instance.on(CONNECT, () => {\n        console.log('Websocket connected.');\n        updateSocketStatus(WebsocketConnectionStatusEnum.COMPLETED);\n      });\n\n      websocketConnection.instance.on(CONNECT_ERROR, async (error) => {\n        console.warn('Websocket connect error: ', error.message);\n        const clearTimeouts = await retryWebsocketConnect();\n        clearTimeouts();\n      });\n\n      websocketConnection.instance.on(DISCONNECT, async () => {\n        console.warn('Websocket disconnected. Trying to reconnect...');\n        const clearTimeouts = await retryWebsocketConnect();\n        clearTimeouts();\n      });\n    },\n    { retries: 2, delay: RETRY_INTERVAL }\n  );\n\n  if (\n    websocketConnection.status ===\n      WebsocketConnectionStatusEnum.NOT_INITIALIZED &&\n    !websocketConnection.instance?.active\n  ) {\n    await initializeConnection();\n  }\n\n  return {\n    closeConnection\n  };\n}\n"],
  "mappings": "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",
  "names": ["import_websocket"]
}
