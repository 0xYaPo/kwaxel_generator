{
  "version": 3,
  "sources": ["../../../src/methods/initApp/initApp.ts"],
  "sourcesContent": ["import { safeWindow } from 'constants/window.constants';\nimport { defineCustomElements } from 'lib/sdkDappUi';\nimport { ToastManager } from 'managers/internal/ToastManager/ToastManager';\nimport { LogoutManager } from 'managers/LogoutManager/LogoutManager';\nimport { registerSessionCallbacks } from 'managers/TransactionManager/helpers/sessionCallbacks';\nimport { restoreProvider } from 'providers/helpers/restoreProvider';\nimport { ProviderFactory } from 'providers/ProviderFactory';\nimport { ICustomProvider } from 'providers/types/providerFactory.types';\nimport { getDefaultNativeAuthConfig } from 'services/nativeAuth/methods/getDefaultNativeAuthConfig';\nimport { NativeAuthConfigType } from 'services/nativeAuth/nativeAuth.types';\nimport { initializeNetwork } from 'store/actions';\nimport {\n  setNativeAuthConfig,\n  setWalletConnectConfig\n} from 'store/actions/config/configActions';\nimport { defaultStorageCallback } from 'store/storage';\nimport { initStore } from 'store/store';\nimport { ThemesEnum } from 'types';\nimport { switchTheme } from 'utils/visual/switchTheme';\nimport { InitAppType } from './initApp.types';\nimport { REHYDRATE_STORE_TIMEOUT } from '../../constants';\nimport { getIsLoggedIn } from '../account/getIsLoggedIn';\nimport { registerWebsocketListener } from './websocket/registerWebsocket';\nimport { trackTransactions } from '../trackTransactions/trackTransactions';\nimport { setGasStationMetadata } from './gastStationMetadata/setGasStationMetadata';\nimport { getAccount } from '../account/getAccount';\n\nconst defaultInitAppProps = {\n  storage: {\n    getStorageCallback: defaultStorageCallback\n  }\n};\n\n/**\n * Flag indicating whether the app has already been initialized.\n *\n * Prevents repeated initialization steps such as provider restoration,\n * websocket listener registration, and transaction tracking setup.\n * This ensures that multiple calls to `initApp` do not cause duplicated\n * subscriptions or side effects.\n *\n * @internal\n */\nlet isAppInitialized = false;\nlet isInitializing = false;\n\n/**\n * Initializes the dApp with the given configuration.\n * @param props - The configuration for the dApp initialization.\n *\n * @example\n * ```ts\n   initApp({\n      nativeAuth: true,\n      environment: EnvironmentsEnum.devnet\n   });\n *  ```\n * */\nexport async function initApp({\n  storage = defaultInitAppProps.storage,\n  dAppConfig,\n  customProviders\n}: InitAppType) {\n  if (isInitializing) {\n    return;\n  }\n\n  isInitializing = true;\n\n  const defaultTheme = dAppConfig?.theme ?? ThemesEnum.dark;\n  await defineCustomElements();\n\n  switchTheme(defaultTheme);\n\n  const store = initStore(storage.getStorageCallback);\n\n  // Wait for store rehydration when using async storage (like React Native AsyncStorage)\n  // This ensures the store is fully populated before restoreProvider() executes\n  if (storage.getStorageCallback !== defaultStorageCallback) {\n    try {\n      await new Promise<void>((resolve, reject) => {\n        if (store.persist.hasHydrated()) {\n          resolve();\n        }\n\n        store.persist.onFinishHydration(() => {\n          resolve();\n        });\n\n        setTimeout(() => {\n          reject();\n        }, REHYDRATE_STORE_TIMEOUT);\n      });\n    } catch (error: any) {\n      console.warn(\n        `Store rehydration timed out after ${REHYDRATE_STORE_TIMEOUT / 1000} seconds. Continuing initialization...`,\n        error.message\n      );\n    }\n  }\n\n  const { apiAddress } = await initializeNetwork({\n    customNetworkConfig: dAppConfig.network,\n    environment: dAppConfig.environment\n  });\n\n  if (dAppConfig?.nativeAuth) {\n    const nativeAuthConfig: NativeAuthConfigType =\n      typeof dAppConfig.nativeAuth === 'boolean' &&\n      dAppConfig.nativeAuth === true\n        ? getDefaultNativeAuthConfig({ apiAddress })\n        : getDefaultNativeAuthConfig(dAppConfig.nativeAuth);\n\n    setNativeAuthConfig(nativeAuthConfig);\n  }\n\n  if (dAppConfig?.providers?.walletConnect) {\n    setWalletConnectConfig(dAppConfig.providers.walletConnect);\n  }\n\n  const isLoggedIn = getIsLoggedIn();\n  const account = getAccount();\n  const toastManager = ToastManager.getInstance();\n  await toastManager.init({\n    successfulToastLifetime:\n      dAppConfig.transactionTracking?.successfulToastLifetime\n  });\n\n  const usedProviders: ICustomProvider[] = [\n    ...((safeWindow as any)?.multiversx?.providers ?? []),\n    ...(customProviders || [])\n  ];\n\n  const uniqueProviders = usedProviders.filter(\n    (provider, index, arr) =>\n      index === arr.findIndex((item) => item.type === provider.type)\n  );\n\n  ProviderFactory.customProviders = uniqueProviders || [];\n\n  if (!isAppInitialized) {\n    await restoreProvider();\n\n    if (isLoggedIn) {\n      await registerWebsocketListener(account.address);\n      trackTransactions();\n      LogoutManager.getInstance().init();\n      registerSessionCallbacks({\n        onSuccess: dAppConfig.transactionTracking?.onSuccess,\n        onFail: dAppConfig.transactionTracking?.onFail\n      });\n    }\n  }\n\n  if (account.shard != null) {\n    await setGasStationMetadata({\n      shard: Number(account.shard),\n      apiAddress\n    });\n  }\n\n  isAppInitialized = true;\n  isInitializing = false;\n}\n"],
  "mappings": "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",
  "names": []
}
