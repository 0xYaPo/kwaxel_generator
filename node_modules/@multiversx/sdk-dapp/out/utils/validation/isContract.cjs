"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var isContract_exports = {};
__export(isContract_exports, {
  getAddressFromDataField: () => getAddressFromDataField,
  isContract: () => isContract,
  isSelfESDTContract: () => isSelfESDTContract
});
module.exports = __toCommonJS(isContract_exports);
var import_sdkCore = require("../../lib/sdkCore");
var import_types = require("../../types");
var import_base64Utils = require("../../utils/decoders/base64Utils");
var import_addressIsValid = require("./addressIsValid");
var import_hex = require("./hex");
function isContract(receiver, sender, data = "") {
  const isValid = (0, import_addressIsValid.addressIsValid)(receiver);
  if (!isValid) {
    return false;
  }
  const isContractAddress = new import_sdkCore.Address(receiver).isSmartContract();
  if (isContractAddress) {
    return true;
  }
  const extractedAddress = getAddressFromDataField({ receiver, data });
  if (!extractedAddress) {
    return false;
  }
  const isExtractedAddressContractCall = new import_sdkCore.Address(
    extractedAddress
  ).isSmartContract();
  return isExtractedAddressContractCall || isSelfESDTContract(receiver, sender, data);
}
function isSelfESDTContract(receiver, sender, data) {
  const parts = data?.split("@");
  if (parts == null) {
    return false;
  }
  const [type, ...restParts] = parts;
  const isSelfTransaction = sender != null && receiver != null && receiver === sender;
  const isCorrectESDTType = Object.values(import_types.ESDTTransferTypesEnum).includes(
    type
  );
  const areDataPartsValid = restParts.every(
    (part) => (0, import_hex.isHexValidCharacters)(part) && (0, import_hex.isHexValidLength)(part)
  );
  return isSelfTransaction && isCorrectESDTType && areDataPartsValid;
}
function getAddressFromDataField({
  receiver,
  data
}) {
  try {
    if (!data) {
      return receiver;
    }
    const parsedData = (0, import_base64Utils.isStringBase64)(data) ? Buffer.from(data, "base64").toString() : data;
    const addressIndex = getAddressIndex(parsedData);
    const parts = parsedData.split("@");
    return addressIndex > -1 ? parts[addressIndex] : receiver;
  } catch (err) {
    console.log(err);
    return;
  }
}
function getAddressIndex(data) {
  if (data.includes(import_types.TypesOfSmartContractCallsEnum.MultiESDTNFTTransfer)) {
    return 1;
  }
  if (data.includes(import_types.TypesOfSmartContractCallsEnum.ESDTNFTTransfer)) {
    return 4;
  }
  return -1;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getAddressFromDataField,
  isContract,
  isSelfESDTContract
});
//# sourceMappingURL=isContract.cjs.map
