{
  "version": 3,
  "sources": ["../../../src/utils/validation/isContract.ts"],
  "sourcesContent": ["import { Address } from 'lib/sdkCore';\nimport { ESDTTransferTypesEnum, TypesOfSmartContractCallsEnum } from 'types';\nimport { isStringBase64 } from 'utils/decoders/base64Utils';\nimport { addressIsValid } from './addressIsValid';\nimport { isHexValidCharacters, isHexValidLength } from './hex';\n\nexport function isContract(\n  receiver: string,\n  sender?: string,\n  data = ''\n): boolean {\n  const isValid = addressIsValid(receiver);\n\n  if (!isValid) {\n    return false;\n  }\n\n  const isContractAddress = new Address(receiver).isSmartContract();\n\n  if (isContractAddress) {\n    return true;\n  }\n\n  const extractedAddress = getAddressFromDataField({ receiver, data });\n\n  if (!extractedAddress) {\n    return false;\n  }\n\n  const isExtractedAddressContractCall = new Address(\n    extractedAddress\n  ).isSmartContract();\n\n  return (\n    isExtractedAddressContractCall || isSelfESDTContract(receiver, sender, data)\n  );\n}\n\nexport function isSelfESDTContract(\n  receiver: string,\n  sender?: string,\n  data?: string\n) {\n  const parts = data?.split('@');\n  if (parts == null) {\n    return false;\n  }\n  const [type, ...restParts] = parts;\n  const isSelfTransaction =\n    sender != null && receiver != null && receiver === sender;\n  const isCorrectESDTType = Object.values(ESDTTransferTypesEnum).includes(\n    type as ESDTTransferTypesEnum\n  );\n  const areDataPartsValid = restParts.every(\n    (part) => isHexValidCharacters(part) && isHexValidLength(part)\n  );\n  return isSelfTransaction && isCorrectESDTType && areDataPartsValid;\n}\n\nexport function getAddressFromDataField({\n  receiver,\n  data\n}: {\n  receiver: string;\n  data: string;\n}) {\n  try {\n    if (!data) {\n      return receiver;\n    }\n    const parsedData = isStringBase64(data)\n      ? Buffer.from(data, 'base64').toString()\n      : data;\n\n    const addressIndex = getAddressIndex(parsedData);\n\n    const parts = parsedData.split('@');\n    return addressIndex > -1 ? parts[addressIndex] : receiver;\n  } catch (err) {\n    console.log(err);\n    return;\n  }\n}\n\nfunction getAddressIndex(data: string) {\n  if (data.includes(TypesOfSmartContractCallsEnum.MultiESDTNFTTransfer)) {\n    return 1;\n  }\n  if (data.includes(TypesOfSmartContractCallsEnum.ESDTNFTTransfer)) {\n    return 4;\n  }\n  return -1;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAwB;AACxB,mBAAqE;AACrE,yBAA+B;AAC/B,4BAA+B;AAC/B,iBAAuD;AAEhD,SAAS,WACd,UACA,QACA,OAAO,IACE;AACT,QAAM,cAAU,sCAAe,QAAQ;AAEvC,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,EACT;AAEA,QAAM,oBAAoB,IAAI,uBAAQ,QAAQ,EAAE,gBAAgB;AAEhE,MAAI,mBAAmB;AACrB,WAAO;AAAA,EACT;AAEA,QAAM,mBAAmB,wBAAwB,EAAE,UAAU,KAAK,CAAC;AAEnE,MAAI,CAAC,kBAAkB;AACrB,WAAO;AAAA,EACT;AAEA,QAAM,iCAAiC,IAAI;AAAA,IACzC;AAAA,EACF,EAAE,gBAAgB;AAElB,SACE,kCAAkC,mBAAmB,UAAU,QAAQ,IAAI;AAE/E;AAEO,SAAS,mBACd,UACA,QACA,MACA;AACA,QAAM,QAAQ,MAAM,MAAM,GAAG;AAC7B,MAAI,SAAS,MAAM;AACjB,WAAO;AAAA,EACT;AACA,QAAM,CAAC,MAAM,GAAG,SAAS,IAAI;AAC7B,QAAM,oBACJ,UAAU,QAAQ,YAAY,QAAQ,aAAa;AACrD,QAAM,oBAAoB,OAAO,OAAO,kCAAqB,EAAE;AAAA,IAC7D;AAAA,EACF;AACA,QAAM,oBAAoB,UAAU;AAAA,IAClC,CAAC,aAAS,iCAAqB,IAAI,SAAK,6BAAiB,IAAI;AAAA,EAC/D;AACA,SAAO,qBAAqB,qBAAqB;AACnD;AAEO,SAAS,wBAAwB;AAAA,EACtC;AAAA,EACA;AACF,GAGG;AACD,MAAI;AACF,QAAI,CAAC,MAAM;AACT,aAAO;AAAA,IACT;AACA,UAAM,iBAAa,mCAAe,IAAI,IAClC,OAAO,KAAK,MAAM,QAAQ,EAAE,SAAS,IACrC;AAEJ,UAAM,eAAe,gBAAgB,UAAU;AAE/C,UAAM,QAAQ,WAAW,MAAM,GAAG;AAClC,WAAO,eAAe,KAAK,MAAM,YAAY,IAAI;AAAA,EACnD,SAAS,KAAK;AACZ,YAAQ,IAAI,GAAG;AACf;AAAA,EACF;AACF;AAEA,SAAS,gBAAgB,MAAc;AACrC,MAAI,KAAK,SAAS,2CAA8B,oBAAoB,GAAG;AACrE,WAAO;AAAA,EACT;AACA,MAAI,KAAK,SAAS,2CAA8B,eAAe,GAAG;AAChE,WAAO;AAAA,EACT;AACA,SAAO;AACT;",
  "names": []
}
