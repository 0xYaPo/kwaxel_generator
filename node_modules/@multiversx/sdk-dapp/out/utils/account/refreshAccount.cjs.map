{
  "version": 3,
  "sources": ["../../../src/utils/account/refreshAccount.ts"],
  "sourcesContent": ["import { getAddress } from 'methods/account/getAddress';\nimport { getLatestNonce } from 'methods/account/getLatestNonce';\nimport { getNetworkConfig } from 'methods/network/getNetworkConfig';\nimport { getAccountProvider } from 'providers/helpers/accountProvider';\nimport { setAccount } from 'store/actions';\nimport { fetchAccount } from './fetchAccount';\nimport { trimUsernameDomain } from './trimUsernameDomain';\n\nconst setNewAccount = async () => {\n  try {\n    const address = getAddress();\n    const { network } = getNetworkConfig();\n\n    try {\n      const account = await fetchAccount({\n        address,\n        baseURL: network.apiAddress\n      });\n\n      if (account != null) {\n        const accountData = {\n          ...account,\n          username: trimUsernameDomain(account.username),\n          nonce: getLatestNonce(account)\n        };\n\n        setAccount(accountData);\n\n        return accountData;\n      }\n    } catch (e) {\n      console.error('Failed getting account ', e);\n    }\n  } catch (e) {\n    console.error('Failed getting address ', e);\n  }\n\n  return null;\n};\n\nexport async function refreshAccount() {\n  const provider = getAccountProvider();\n\n  if (provider == null) {\n    throw 'Provider not initialized';\n  }\n\n  try {\n    if (!provider.init) {\n      throw 'Current provider does not have init() function';\n    }\n\n    const initialized = await provider.init();\n\n    if (!initialized) {\n      return;\n    }\n\n    return setNewAccount();\n  } catch (e) {\n    console.error('Failed initializing provider ', e);\n  }\n\n  return undefined;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA2B;AAC3B,4BAA+B;AAC/B,8BAAiC;AACjC,6BAAmC;AACnC,qBAA2B;AAC3B,0BAA6B;AAC7B,gCAAmC;AAEnC,MAAM,gBAAgB,YAAY;AAChC,MAAI;AACF,UAAM,cAAU,8BAAW;AAC3B,UAAM,EAAE,QAAQ,QAAI,0CAAiB;AAErC,QAAI;AACF,YAAM,UAAU,UAAM,kCAAa;AAAA,QACjC;AAAA,QACA,SAAS,QAAQ;AAAA,MACnB,CAAC;AAED,UAAI,WAAW,MAAM;AACnB,cAAM,cAAc;AAAA,UAClB,GAAG;AAAA,UACH,cAAU,8CAAmB,QAAQ,QAAQ;AAAA,UAC7C,WAAO,sCAAe,OAAO;AAAA,QAC/B;AAEA,uCAAW,WAAW;AAEtB,eAAO;AAAA,MACT;AAAA,IACF,SAAS,GAAG;AACV,cAAQ,MAAM,2BAA2B,CAAC;AAAA,IAC5C;AAAA,EACF,SAAS,GAAG;AACV,YAAQ,MAAM,2BAA2B,CAAC;AAAA,EAC5C;AAEA,SAAO;AACT;AAEA,eAAsB,iBAAiB;AACrC,QAAM,eAAW,2CAAmB;AAEpC,MAAI,YAAY,MAAM;AACpB,UAAM;AAAA,EACR;AAEA,MAAI;AACF,QAAI,CAAC,SAAS,MAAM;AAClB,YAAM;AAAA,IACR;AAEA,UAAM,cAAc,MAAM,SAAS,KAAK;AAExC,QAAI,CAAC,aAAa;AAChB;AAAA,IACF;AAEA,WAAO,cAAc;AAAA,EACvB,SAAS,GAAG;AACV,YAAQ,MAAM,iCAAiC,CAAC;AAAA,EAClD;AAEA,SAAO;AACT;",
  "names": []
}
