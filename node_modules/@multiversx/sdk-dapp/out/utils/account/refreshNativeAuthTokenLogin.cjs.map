{
  "version": 3,
  "sources": ["../../../src/utils/account/refreshNativeAuthTokenLogin.ts"],
  "sourcesContent": ["import { Address, Message } from 'lib/sdkCore';\nimport { getAccount } from 'methods/account/getAccount';\nimport { nativeAuth } from 'services/nativeAuth';\nimport { getDefaultNativeAuthConfig } from 'services/nativeAuth/methods/getDefaultNativeAuthConfig';\nimport { NativeAuthConfigType } from 'services/nativeAuth/nativeAuth.types';\nimport { setTokenLogin } from 'store/actions/loginInfo/loginInfoActions';\n\n/**\n * Use this function if you support multiple networks with network switching\n * @returns The native auth token\n */\nexport const refreshNativeAuthTokenLogin = async ({\n  signMessageCallback,\n  nativeAuthClientConfig\n}: {\n  signMessageCallback: (\n    messageToSign: Message,\n    options: Record<any, any>\n  ) => Promise<Message>;\n  nativeAuthClientConfig?: NativeAuthConfigType;\n}): Promise<string | null> => {\n  const { address } = getAccount();\n  const defaultNativeAuthConfig = getDefaultNativeAuthConfig();\n\n  const nativeAuthClient = nativeAuth(\n    nativeAuthClientConfig || defaultNativeAuthConfig\n  );\n\n  const loginToken = await nativeAuthClient.initialize({\n    noCache: Boolean(nativeAuthClientConfig)\n  });\n\n  if (!loginToken) {\n    return null;\n  }\n\n  const messageToSign = new Message({\n    address: new Address(address),\n    data: Buffer.from(`${address}${loginToken}`)\n  });\n\n  const signedMessage = await signMessageCallback(messageToSign, {});\n\n  if (!signedMessage?.signature) {\n    throw 'Message not signed';\n  }\n\n  setTokenLogin({\n    loginToken,\n    signature: Buffer.from(signedMessage.signature).toString('hex')\n  });\n\n  return nativeAuthClient.getToken({\n    address,\n    token: loginToken,\n    signature: Buffer.from(signedMessage.signature).toString('hex')\n  });\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAiC;AACjC,wBAA2B;AAC3B,wBAA2B;AAC3B,wCAA2C;AAE3C,8BAA8B;AAMvB,MAAM,8BAA8B,OAAO;AAAA,EAChD;AAAA,EACA;AACF,MAM8B;AAC5B,QAAM,EAAE,QAAQ,QAAI,8BAAW;AAC/B,QAAM,8BAA0B,8DAA2B;AAE3D,QAAM,uBAAmB;AAAA,IACvB,0BAA0B;AAAA,EAC5B;AAEA,QAAM,aAAa,MAAM,iBAAiB,WAAW;AAAA,IACnD,SAAS,QAAQ,sBAAsB;AAAA,EACzC,CAAC;AAED,MAAI,CAAC,YAAY;AACf,WAAO;AAAA,EACT;AAEA,QAAM,gBAAgB,IAAI,uBAAQ;AAAA,IAChC,SAAS,IAAI,uBAAQ,OAAO;AAAA,IAC5B,MAAM,OAAO,KAAK,GAAG,OAAO,GAAG,UAAU,EAAE;AAAA,EAC7C,CAAC;AAED,QAAM,gBAAgB,MAAM,oBAAoB,eAAe,CAAC,CAAC;AAEjE,MAAI,CAAC,eAAe,WAAW;AAC7B,UAAM;AAAA,EACR;AAEA,6CAAc;AAAA,IACZ;AAAA,IACA,WAAW,OAAO,KAAK,cAAc,SAAS,EAAE,SAAS,KAAK;AAAA,EAChE,CAAC;AAED,SAAO,iBAAiB,SAAS;AAAA,IAC/B;AAAA,IACA,OAAO;AAAA,IACP,WAAW,OAAO,KAAK,cAAc,SAAS,EAAE,SAAS,KAAK;AAAA,EAChE,CAAC;AACH;",
  "names": []
}
