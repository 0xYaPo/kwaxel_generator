"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var refreshAccount_exports = {};
__export(refreshAccount_exports, {
  refreshAccount: () => refreshAccount
});
module.exports = __toCommonJS(refreshAccount_exports);
var import_getAddress = require("../../methods/account/getAddress");
var import_getLatestNonce = require("../../methods/account/getLatestNonce");
var import_getNetworkConfig = require("../../methods/network/getNetworkConfig");
var import_accountProvider = require("../../providers/helpers/accountProvider");
var import_actions = require("../../store/actions");
var import_fetchAccount = require("./fetchAccount");
var import_trimUsernameDomain = require("./trimUsernameDomain");
const setNewAccount = async () => {
  try {
    const address = (0, import_getAddress.getAddress)();
    const { network } = (0, import_getNetworkConfig.getNetworkConfig)();
    try {
      const account = await (0, import_fetchAccount.fetchAccount)({
        address,
        baseURL: network.apiAddress
      });
      if (account != null) {
        const accountData = {
          ...account,
          username: (0, import_trimUsernameDomain.trimUsernameDomain)(account.username),
          nonce: (0, import_getLatestNonce.getLatestNonce)(account)
        };
        (0, import_actions.setAccount)(accountData);
        return accountData;
      }
    } catch (e) {
      console.error("Failed getting account ", e);
    }
  } catch (e) {
    console.error("Failed getting address ", e);
  }
  return null;
};
async function refreshAccount() {
  const provider = (0, import_accountProvider.getAccountProvider)();
  if (provider == null) {
    throw "Provider not initialized";
  }
  try {
    if (!provider.init) {
      throw "Current provider does not have init() function";
    }
    const initialized = await provider.init();
    if (!initialized) {
      return;
    }
    return setNewAccount();
  } catch (e) {
    console.error("Failed initializing provider ", e);
  }
  return void 0;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  refreshAccount
});
//# sourceMappingURL=refreshAccount.cjs.map
