"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var refreshNativeAuthTokenLogin_exports = {};
__export(refreshNativeAuthTokenLogin_exports, {
  refreshNativeAuthTokenLogin: () => refreshNativeAuthTokenLogin
});
module.exports = __toCommonJS(refreshNativeAuthTokenLogin_exports);
var import_sdkCore = require("../../lib/sdkCore");
var import_getAccount = require("../../methods/account/getAccount");
var import_nativeAuth = require("../../services/nativeAuth");
var import_getDefaultNativeAuthConfig = require("../../services/nativeAuth/methods/getDefaultNativeAuthConfig");
var import_loginInfoActions = require("../../store/actions/loginInfo/loginInfoActions");
const refreshNativeAuthTokenLogin = async ({
  signMessageCallback,
  nativeAuthClientConfig
}) => {
  const { address } = (0, import_getAccount.getAccount)();
  const defaultNativeAuthConfig = (0, import_getDefaultNativeAuthConfig.getDefaultNativeAuthConfig)();
  const nativeAuthClient = (0, import_nativeAuth.nativeAuth)(
    nativeAuthClientConfig || defaultNativeAuthConfig
  );
  const loginToken = await nativeAuthClient.initialize({
    noCache: Boolean(nativeAuthClientConfig)
  });
  if (!loginToken) {
    return null;
  }
  const messageToSign = new import_sdkCore.Message({
    address: new import_sdkCore.Address(address),
    data: Buffer.from(`${address}${loginToken}`)
  });
  const signedMessage = await signMessageCallback(messageToSign, {});
  if (!signedMessage?.signature) {
    throw "Message not signed";
  }
  (0, import_loginInfoActions.setTokenLogin)({
    loginToken,
    signature: Buffer.from(signedMessage.signature).toString("hex")
  });
  return nativeAuthClient.getToken({
    address,
    token: loginToken,
    signature: Buffer.from(signedMessage.signature).toString("hex")
  });
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  refreshNativeAuthTokenLogin
});
//# sourceMappingURL=refreshNativeAuthTokenLogin.cjs.map
