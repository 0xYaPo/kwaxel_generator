"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var setAxiosInterceptors_exports = {};
__export(setAxiosInterceptors_exports, {
  setAxiosInterceptors: () => setAxiosInterceptors
});
module.exports = __toCommonJS(setAxiosInterceptors_exports);
var import_axios = __toESM(require("axios"));
const setAxiosInterceptors = ({
  authenticatedDomains,
  bearerToken
}) => {
  import_axios.default.interceptors.request.clear();
  import_axios.default.interceptors.response.clear();
  import_axios.default.interceptors.response.use(
    (response) => response,
    (error) => {
      let url = error.config?.url;
      if (error.config?.params) {
        const queryString = new URLSearchParams(error.config.params);
        url += `?${queryString.toString()}`;
      }
      console.error("Axios error for: ", url);
      return Promise.reject(error);
    }
  );
  import_axios.default.interceptors.request.use(
    async (config) => {
      if (authenticatedDomains.includes(String(config?.baseURL)) && bearerToken) {
        config.headers.Authorization = `Bearer ${bearerToken}`;
      }
      return config;
    },
    (error) => Promise.reject(error)
  );
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  setAxiosInterceptors
});
//# sourceMappingURL=setAxiosInterceptors.cjs.map
