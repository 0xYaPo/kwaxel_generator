{
  "version": 3,
  "sources": ["../../../src/utils/network/setAxiosInterceptors.ts"],
  "sourcesContent": ["import axios, { AxiosError, InternalAxiosRequestConfig } from 'axios';\n\ninterface InterceptAxiosCallsConfig {\n  authenticatedDomains: string[];\n  bearerToken?: string;\n}\n\nexport const setAxiosInterceptors = ({\n  authenticatedDomains,\n  bearerToken\n}: InterceptAxiosCallsConfig): void => {\n  axios.interceptors.request.clear();\n  axios.interceptors.response.clear();\n\n  axios.interceptors.response.use(\n    (response) => response,\n    (error: AxiosError) => {\n      let url = error.config?.url;\n      if (error.config?.params) {\n        const queryString = new URLSearchParams(error.config.params);\n        url += `?${queryString.toString()}`;\n      }\n      console.error('Axios error for: ', url);\n      return Promise.reject(error);\n    }\n  );\n\n  axios.interceptors.request.use(\n    async (config: InternalAxiosRequestConfig) => {\n      if (\n        authenticatedDomains.includes(String(config?.baseURL)) &&\n        bearerToken\n      ) {\n        config.headers.Authorization = `Bearer ${bearerToken}`;\n      }\n      return config;\n    },\n    (error) => Promise.reject(error)\n  );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA8D;AAOvD,MAAM,uBAAuB,CAAC;AAAA,EACnC;AAAA,EACA;AACF,MAAuC;AACrC,eAAAA,QAAM,aAAa,QAAQ,MAAM;AACjC,eAAAA,QAAM,aAAa,SAAS,MAAM;AAElC,eAAAA,QAAM,aAAa,SAAS;AAAA,IAC1B,CAAC,aAAa;AAAA,IACd,CAAC,UAAsB;AACrB,UAAI,MAAM,MAAM,QAAQ;AACxB,UAAI,MAAM,QAAQ,QAAQ;AACxB,cAAM,cAAc,IAAI,gBAAgB,MAAM,OAAO,MAAM;AAC3D,eAAO,IAAI,YAAY,SAAS,CAAC;AAAA,MACnC;AACA,cAAQ,MAAM,qBAAqB,GAAG;AACtC,aAAO,QAAQ,OAAO,KAAK;AAAA,IAC7B;AAAA,EACF;AAEA,eAAAA,QAAM,aAAa,QAAQ;AAAA,IACzB,OAAO,WAAuC;AAC5C,UACE,qBAAqB,SAAS,OAAO,QAAQ,OAAO,CAAC,KACrD,aACA;AACA,eAAO,QAAQ,gBAAgB,UAAU,WAAW;AAAA,MACtD;AACA,aAAO;AAAA,IACT;AAAA,IACA,CAAC,UAAU,QAAQ,OAAO,KAAK;AAAA,EACjC;AACF;",
  "names": ["axios"]
}
