"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var base64Utils_exports = {};
__export(base64Utils_exports, {
  decodeBase64: () => decodeBase64,
  encodeToBase64: () => encodeToBase64,
  isStringBase64: () => isStringBase64
});
module.exports = __toCommonJS(base64Utils_exports);
function isStringBase64(str) {
  try {
    const atobDecoded = atob(str);
    const btoaEncoded = btoa(atobDecoded);
    const bufferFromDecoded = Buffer.from(str, "base64").toString();
    const bufferFromEncoded = Buffer.from(bufferFromDecoded).toString("base64");
    const isBtoaEqual = str === btoaEncoded || btoaEncoded.startsWith(str);
    const isBufferFromBase64Equal = str === bufferFromEncoded || bufferFromEncoded.startsWith(str);
    const isEqualToInitialString = isBtoaEqual && isBufferFromBase64Equal;
    if (isEqualToInitialString) {
      return true;
    }
  } catch (_e) {
    return false;
  }
  return false;
}
function encodeToBase64(string) {
  return btoa(string);
}
function decodeBase64(string) {
  if (!isStringBase64(string)) {
    return string;
  }
  return atob(string);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decodeBase64,
  encodeToBase64,
  isStringBase64
});
//# sourceMappingURL=base64Utils.cjs.map
