"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getInterpretedTransaction_exports = {};
__export(getInterpretedTransaction_exports, {
  getInterpretedTransaction: () => getInterpretedTransaction
});
module.exports = __toCommonJS(getInterpretedTransaction_exports);
var import_timeRemaining = require("../../../utils/operations/timeRemaining");
var import_validation = require("../../../utils/validation");
var import_explorerUrlBuilder = require("../explorerUrlBuilder");
var import_getExplorerLink = require("../getExplorerLink");
var import_getHumanReadableTimeFormat = require("../getHumanReadableTimeFormat");
var import_getTokenFromData = require("./helpers/getTokenFromData");
var import_getTransactionIconInfo = require("./helpers/getTransactionIconInfo");
var import_getTransactionMethod = require("./helpers/getTransactionMethod");
var import_getTransactionReceiver = require("./helpers/getTransactionReceiver");
var import_getTransactionReceiverAssets = require("./helpers/getTransactionReceiverAssets");
var import_getTransactionTokens = require("./helpers/getTransactionTokens");
var import_getTransactionTransferType = require("./helpers/getTransactionTransferType");
function getInterpretedTransaction({
  transaction,
  address,
  explorerAddress
}) {
  const tokenIdentifier = transaction.tokenIdentifier ?? (0, import_getTokenFromData.getTokenFromData)(transaction.data).tokenId;
  const receiver = (0, import_getTransactionReceiver.getTransactionReceiver)(transaction);
  const receiverAssets = (0, import_getTransactionReceiverAssets.getTransactionReceiverAssets)(transaction);
  const age = {
    timeAgo: (0, import_timeRemaining.timeAgo)(transaction.timestamp * 1e3, true),
    tooltip: (0, import_getHumanReadableTimeFormat.getHumanReadableTimeFormat)({
      value: transaction.timestamp,
      noSeconds: false,
      utc: true
    })
  };
  const direction = (0, import_getTransactionTransferType.getTransactionTransferType)({
    address,
    transaction,
    receiver
  });
  const method = {
    actionDescription: transaction.action?.description,
    name: (0, import_getTransactionMethod.getTransactionMethod)(transaction)
  };
  const transactionTokens = (0, import_getTransactionTokens.getTransactionTokens)(transaction);
  const senderLink = (0, import_getExplorerLink.getExplorerLink)({
    explorerAddress,
    to: import_explorerUrlBuilder.explorerUrlBuilder.accountDetails(transaction.sender)
  });
  const receiverLink = (0, import_getExplorerLink.getExplorerLink)({
    explorerAddress,
    to: import_explorerUrlBuilder.explorerUrlBuilder.accountDetails(receiver)
  });
  const senderShardLink = (0, import_getExplorerLink.getExplorerLink)({
    explorerAddress,
    to: import_explorerUrlBuilder.explorerUrlBuilder.senderShard(transaction.senderShard)
  });
  const receiverShardLink = (0, import_getExplorerLink.getExplorerLink)({
    explorerAddress,
    to: import_explorerUrlBuilder.explorerUrlBuilder.receiverShard(transaction.receiverShard)
  });
  const transactionHash = transaction.originalTxHash || transaction.txHash;
  const transactionLink = (0, import_getExplorerLink.getExplorerLink)({
    explorerAddress,
    to: import_explorerUrlBuilder.explorerUrlBuilder.transactionDetails(transactionHash)
  });
  return {
    ...transaction,
    txHash: transactionHash,
    tokenIdentifier,
    receiver,
    receiverAssets,
    transactionDetails: {
      age,
      direction,
      method,
      iconInfo: (0, import_getTransactionIconInfo.getTransactionIconInfo)(transaction),
      transactionTokens,
      isContract: (0, import_validation.isContract)(transaction.sender)
    },
    links: {
      senderLink,
      receiverLink,
      senderShardLink,
      receiverShardLink,
      transactionLink
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getInterpretedTransaction
});
//# sourceMappingURL=getInterpretedTransaction.cjs.map
