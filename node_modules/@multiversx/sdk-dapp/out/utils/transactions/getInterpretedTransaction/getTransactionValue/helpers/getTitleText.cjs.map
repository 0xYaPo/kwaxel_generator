{
  "version": 3,
  "sources": ["../../../../../../src/utils/transactions/getInterpretedTransaction/getTransactionValue/helpers/getTitleText.ts"],
  "sourcesContent": ["import { DECIMALS, formatAmount } from 'lib/sdkDappUtils';\nimport { TokenArgumentType } from 'types/serverTransactions.types';\nimport { getIdentifierType } from 'utils/validation/getIdentifierType';\nimport { getTransactionActionNftText } from './getTransactionActionNftText';\nimport {\n  EgldValueDataType,\n  NFTValueDataType,\n  TokenValueDataType\n} from '../types';\n\nexport interface GetTransactionValueReturnType {\n  egldValueData?: EgldValueDataType;\n  tokenValueData?: TokenValueDataType;\n  nftValueData?: NFTValueDataType;\n}\n\nexport const getTitleText = (\n  transactionTokens: TokenArgumentType[]\n): string => {\n  const tokensArray = transactionTokens.map((transactionToken) => {\n    const { isNft } = getIdentifierType(transactionToken.type);\n    if (isNft) {\n      const { badgeText, tokenFormattedAmount, tokenLinkText } =\n        getTransactionActionNftText({\n          token: transactionToken\n        });\n\n      const badge = badgeText != null ? `(${badgeText}) ` : '';\n\n      const value = `${badge}${tokenFormattedAmount} ${tokenLinkText}`;\n      return value;\n    }\n\n    const tokenFormattedAmount = transactionToken.value\n      ? formatAmount({\n          input: transactionToken.value,\n          decimals: transactionToken.decimals ?? DECIMALS,\n          digits: 2,\n          addCommas: true\n        })\n      : null;\n\n    const identifier = transactionToken.collection\n      ? transactionToken.identifier\n      : transactionToken.token;\n\n    const value = `${tokenFormattedAmount} ${transactionToken.ticker} (${identifier})`;\n    return value;\n  });\n\n  const joinedTokensWithLineBreak = decodeURI(tokensArray.join('%0A'));\n  return joinedTokensWithLineBreak;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAuC;AAEvC,+BAAkC;AAClC,yCAA4C;AAarC,MAAM,eAAe,CAC1B,sBACW;AACX,QAAM,cAAc,kBAAkB,IAAI,CAAC,qBAAqB;AAC9D,UAAM,EAAE,MAAM,QAAI,4CAAkB,iBAAiB,IAAI;AACzD,QAAI,OAAO;AACT,YAAM,EAAE,WAAW,sBAAAA,uBAAsB,cAAc,QACrD,gEAA4B;AAAA,QAC1B,OAAO;AAAA,MACT,CAAC;AAEH,YAAM,QAAQ,aAAa,OAAO,IAAI,SAAS,OAAO;AAEtD,YAAMC,SAAQ,GAAG,KAAK,GAAGD,qBAAoB,IAAI,aAAa;AAC9D,aAAOC;AAAA,IACT;AAEA,UAAM,uBAAuB,iBAAiB,YAC1C,kCAAa;AAAA,MACX,OAAO,iBAAiB;AAAA,MACxB,UAAU,iBAAiB,YAAY;AAAA,MACvC,QAAQ;AAAA,MACR,WAAW;AAAA,IACb,CAAC,IACD;AAEJ,UAAM,aAAa,iBAAiB,aAChC,iBAAiB,aACjB,iBAAiB;AAErB,UAAM,QAAQ,GAAG,oBAAoB,IAAI,iBAAiB,MAAM,KAAK,UAAU;AAC/E,WAAO;AAAA,EACT,CAAC;AAED,QAAM,4BAA4B,UAAU,YAAY,KAAK,KAAK,CAAC;AACnE,SAAO;AACT;",
  "names": ["tokenFormattedAmount", "value"]
}
