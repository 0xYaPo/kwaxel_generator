"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getValueFromOperations_exports = {};
__export(getValueFromOperations_exports, {
  getValueFromOperations: () => getValueFromOperations
});
module.exports = __toCommonJS(getValueFromOperations_exports);
var import_getEgldValueData = require("./getEgldValueData");
var import_getVisibleOperations = require("./getVisibleOperations");
let warningLogged = false;
const logError = (hash) => {
  if (!warningLogged) {
    console.error(
      `Operations field missing for txHash: ${hash}.
        Unable to compute value field.`
    );
    warningLogged = true;
  }
};
function getValueFromOperations(transaction) {
  try {
    if (transaction.operations) {
      const [operation] = (0, import_getVisibleOperations.getVisibleOperations)(transaction);
      return (0, import_getEgldValueData.getEgldValueData)(operation?.value);
    } else {
      logError(transaction.txHash);
    }
  } catch {
    logError(transaction.txHash);
  }
  return (0, import_getEgldValueData.getEgldValueData)(transaction.value);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getValueFromOperations
});
//# sourceMappingURL=getValueFromOperations.cjs.map
