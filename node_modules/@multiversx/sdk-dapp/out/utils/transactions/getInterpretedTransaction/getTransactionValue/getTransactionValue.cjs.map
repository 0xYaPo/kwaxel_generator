{
  "version": 3,
  "sources": ["../../../../../src/utils/transactions/getInterpretedTransaction/getTransactionValue/getTransactionValue.ts"],
  "sourcesContent": ["import { DECIMALS, formatAmount } from 'lib/sdkDappUtils';\nimport { InterpretedTransactionType } from 'types/serverTransactions.types';\nimport { NftEnumType } from 'types/tokens.types';\n\nimport {\n  ACTIONS_WITH_EGLD_VALUE,\n  ACTIONS_WITH_MANDATORY_OPERATIONS,\n  ACTIONS_WITH_VALUE_IN_ACTION_FIELD,\n  ACTIONS_WITH_VALUE_IN_DATA_FIELD\n} from './constants';\n\nimport {\n  getEgldValueData,\n  getTitleText,\n  getValueFromActions,\n  getValueFromDataField,\n  getValueFromOperations\n} from './helpers';\nimport { getTransactionActionNftText } from './helpers/getTransactionActionNftText';\nimport { getTransactionTokens } from './helpers/getTransactionTokens';\nimport {\n  EgldValueDataType,\n  NFTValueDataType,\n  TokenValueDataType\n} from './types';\nimport { explorerUrlBuilder } from '../../explorerUrlBuilder';\n\nexport interface GetTransactionValueReturnType {\n  egldValueData?: EgldValueDataType;\n  tokenValueData?: TokenValueDataType;\n  nftValueData?: NFTValueDataType;\n}\n\nexport interface GetTransactionValueType {\n  hideMultipleBadge?: boolean;\n  transaction: InterpretedTransactionType;\n}\n\nexport const getTransactionValue = ({\n  transaction,\n  hideMultipleBadge\n}: GetTransactionValueType): GetTransactionValueReturnType => {\n  if (transaction.action) {\n    if (ACTIONS_WITH_EGLD_VALUE.includes(transaction.action.name)) {\n      return getEgldValueData(transaction.value);\n    }\n\n    if (ACTIONS_WITH_VALUE_IN_DATA_FIELD.includes(transaction.action.name)) {\n      return getValueFromDataField(transaction);\n    }\n\n    if (ACTIONS_WITH_MANDATORY_OPERATIONS.includes(transaction.action.name)) {\n      return getValueFromOperations(transaction);\n    }\n\n    if (ACTIONS_WITH_VALUE_IN_ACTION_FIELD.includes(transaction.action.name)) {\n      return getValueFromActions(transaction);\n    }\n\n    const transactionTokens = getTransactionTokens(transaction);\n\n    if (transactionTokens.length) {\n      const txToken = transactionTokens[0];\n      const isNft = Object.values(NftEnumType).includes(\n        txToken.type as NftEnumType\n      );\n\n      const hasTitleText = !hideMultipleBadge && transactionTokens.length > 1;\n      const titleText = hasTitleText ? getTitleText(transactionTokens) : '';\n\n      if (isNft) {\n        const {\n          badgeText,\n          tokenFormattedAmount,\n          tokenExplorerLink,\n          tokenLinkText\n        } = getTransactionActionNftText({ token: txToken });\n\n        return {\n          nftValueData: {\n            badgeText,\n            tokenFormattedAmount,\n            tokenExplorerLink,\n            tokenLinkText,\n            transactionTokens,\n            token: txToken,\n            value: tokenFormattedAmount != null ? txToken.value : null,\n            decimals: tokenFormattedAmount != null ? txToken.decimals : null,\n            titleText\n          }\n        };\n      }\n\n      const tokenFormattedAmount = txToken.value\n        ? formatAmount({\n            input: txToken.value,\n            decimals: txToken.decimals ?? DECIMALS,\n            digits: 2,\n            addCommas: true\n          })\n        : null;\n\n      const tokenExplorerLink = explorerUrlBuilder.tokenDetails(\n        String(txToken.token)\n      );\n\n      return {\n        tokenValueData: {\n          tokenExplorerLink,\n          showFormattedAmount: false,\n          tokenFormattedAmount,\n          tokenLinkText: txToken.ticker,\n          transactionTokens,\n          token: txToken,\n          value: txToken.value,\n          decimals: txToken.decimals ?? DECIMALS,\n          titleText\n        }\n      };\n    }\n  }\n\n  return getEgldValueData(transaction.value);\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAuC;AAEvC,oBAA4B;AAE5B,uBAKO;AAEP,qBAMO;AACP,yCAA4C;AAC5C,kCAAqC;AAMrC,gCAAmC;AAa5B,MAAM,sBAAsB,CAAC;AAAA,EAClC;AAAA,EACA;AACF,MAA8D;AAC5D,MAAI,YAAY,QAAQ;AACtB,QAAI,yCAAwB,SAAS,YAAY,OAAO,IAAI,GAAG;AAC7D,iBAAO,iCAAiB,YAAY,KAAK;AAAA,IAC3C;AAEA,QAAI,kDAAiC,SAAS,YAAY,OAAO,IAAI,GAAG;AACtE,iBAAO,sCAAsB,WAAW;AAAA,IAC1C;AAEA,QAAI,mDAAkC,SAAS,YAAY,OAAO,IAAI,GAAG;AACvE,iBAAO,uCAAuB,WAAW;AAAA,IAC3C;AAEA,QAAI,oDAAmC,SAAS,YAAY,OAAO,IAAI,GAAG;AACxE,iBAAO,oCAAoB,WAAW;AAAA,IACxC;AAEA,UAAM,wBAAoB,kDAAqB,WAAW;AAE1D,QAAI,kBAAkB,QAAQ;AAC5B,YAAM,UAAU,kBAAkB,CAAC;AACnC,YAAM,QAAQ,OAAO,OAAO,yBAAW,EAAE;AAAA,QACvC,QAAQ;AAAA,MACV;AAEA,YAAM,eAAe,CAAC,qBAAqB,kBAAkB,SAAS;AACtE,YAAM,YAAY,mBAAe,6BAAa,iBAAiB,IAAI;AAEnE,UAAI,OAAO;AACT,cAAM;AAAA,UACJ;AAAA,UACA,sBAAAA;AAAA,UACA,mBAAAC;AAAA,UACA;AAAA,QACF,QAAI,gEAA4B,EAAE,OAAO,QAAQ,CAAC;AAElD,eAAO;AAAA,UACL,cAAc;AAAA,YACZ;AAAA,YACA,sBAAAD;AAAA,YACA,mBAAAC;AAAA,YACA;AAAA,YACA;AAAA,YACA,OAAO;AAAA,YACP,OAAOD,yBAAwB,OAAO,QAAQ,QAAQ;AAAA,YACtD,UAAUA,yBAAwB,OAAO,QAAQ,WAAW;AAAA,YAC5D;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAEA,YAAM,uBAAuB,QAAQ,YACjC,kCAAa;AAAA,QACX,OAAO,QAAQ;AAAA,QACf,UAAU,QAAQ,YAAY;AAAA,QAC9B,QAAQ;AAAA,QACR,WAAW;AAAA,MACb,CAAC,IACD;AAEJ,YAAM,oBAAoB,6CAAmB;AAAA,QAC3C,OAAO,QAAQ,KAAK;AAAA,MACtB;AAEA,aAAO;AAAA,QACL,gBAAgB;AAAA,UACd;AAAA,UACA,qBAAqB;AAAA,UACrB;AAAA,UACA,eAAe,QAAQ;AAAA,UACvB;AAAA,UACA,OAAO;AAAA,UACP,OAAO,QAAQ;AAAA,UACf,UAAU,QAAQ,YAAY;AAAA,UAC9B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,aAAO,iCAAiB,YAAY,KAAK;AAC3C;",
  "names": ["tokenFormattedAmount", "tokenExplorerLink"]
}
