{
  "version": 3,
  "sources": ["../../../../../../src/utils/transactions/getInterpretedTransaction/getTransactionValue/helpers/getValueFromDataField.ts"],
  "sourcesContent": ["import BigNumber from 'bignumber.js';\nimport { InterpretedTransactionType } from 'types/serverTransactions.types';\nimport { decodeBase64 } from 'utils/decoders';\nimport { getEgldValueData } from './getEgldValueData';\n\nlet warningLogged = false;\n\nexport function getValueFromDataField(transaction: InterpretedTransactionType) {\n  try {\n    const data = decodeBase64(transaction.data);\n    const encodedValue = data.replace(`${transaction.action?.name}@`, '');\n    const value = new BigNumber(encodedValue, 16);\n    if (!value.isNaN()) {\n      return getEgldValueData(value.toString(10));\n    }\n  } catch {\n    if (!warningLogged) {\n      console.error(\n        `Unable to extract value for txHash: ${transaction.txHash}`\n      );\n      warningLogged = true;\n    }\n  }\n\n  // fallback on transaction value\n  return getEgldValueData(transaction.value);\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAsB;AAEtB,sBAA6B;AAC7B,8BAAiC;AAEjC,IAAI,gBAAgB;AAEb,SAAS,sBAAsB,aAAyC;AAC7E,MAAI;AACF,UAAM,WAAO,8BAAa,YAAY,IAAI;AAC1C,UAAM,eAAe,KAAK,QAAQ,GAAG,YAAY,QAAQ,IAAI,KAAK,EAAE;AACpE,UAAM,QAAQ,IAAI,iBAAAA,QAAU,cAAc,EAAE;AAC5C,QAAI,CAAC,MAAM,MAAM,GAAG;AAClB,iBAAO,0CAAiB,MAAM,SAAS,EAAE,CAAC;AAAA,IAC5C;AAAA,EACF,QAAQ;AACN,QAAI,CAAC,eAAe;AAClB,cAAQ;AAAA,QACN,uCAAuC,YAAY,MAAM;AAAA,MAC3D;AACA,sBAAgB;AAAA,IAClB;AAAA,EACF;AAGA,aAAO,0CAAiB,YAAY,KAAK;AAC3C;",
  "names": ["BigNumber"]
}
