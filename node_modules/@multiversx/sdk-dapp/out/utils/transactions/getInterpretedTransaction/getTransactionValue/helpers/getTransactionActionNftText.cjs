"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getTransactionActionNftText_exports = {};
__export(getTransactionActionNftText_exports, {
  getTransactionActionNftText: () => getTransactionActionNftText
});
module.exports = __toCommonJS(getTransactionActionNftText_exports);
var import_sdkDappUtils = require("../../../../../lib/sdkDappUtils");
var import_tokens = require("../../../../../types/tokens.types");
var import_explorerUrlBuilder = require("../../../explorerUrlBuilder");
function getTransactionActionNftText({
  token,
  noValue,
  showLastNonZeroDecimal
}) {
  const isTokenAmountVisible = !noValue && token.value && token.type !== import_tokens.NftEnumType.NonFungibleESDT;
  const canShowFormattedAmount = token.decimals != null;
  let badgeText = "";
  if (token.type === import_tokens.NftEnumType.NonFungibleESDT) {
    badgeText = "NFT";
  }
  if (token.type === import_tokens.NftEnumType.SemiFungibleESDT) {
    badgeText = "SFT";
  }
  if (token.type === import_tokens.NftEnumType.MetaESDT) {
    badgeText = "Meta-ESDT";
  }
  let tokenFormattedAmount = "";
  if (isTokenAmountVisible && canShowFormattedAmount) {
    tokenFormattedAmount = canShowFormattedAmount ? (0, import_sdkDappUtils.formatAmount)({
      input: token.value,
      decimals: token.decimals,
      digits: 2,
      showLastNonZeroDecimal
    }) : Number(token.value).toLocaleString("en");
  }
  const tokenExplorerLink = import_explorerUrlBuilder.explorerUrlBuilder.nftDetails(
    String(token.identifier)
  );
  const tokenLinkText = token.ticker === token.collection ? token.identifier ?? token.ticker : token.ticker;
  return {
    badgeText,
    tokenFormattedAmount: isTokenAmountVisible ? tokenFormattedAmount : null,
    tokenExplorerLink,
    tokenLinkText,
    token,
    noValue,
    showLastNonZeroDecimal
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getTransactionActionNftText
});
//# sourceMappingURL=getTransactionActionNftText.cjs.map
