"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getTransactionValue_exports = {};
__export(getTransactionValue_exports, {
  getTransactionValue: () => getTransactionValue
});
module.exports = __toCommonJS(getTransactionValue_exports);
var import_sdkDappUtils = require("../../../../lib/sdkDappUtils");
var import_tokens = require("../../../../types/tokens.types");
var import_constants = require("./constants");
var import_helpers = require("./helpers");
var import_getTransactionActionNftText = require("./helpers/getTransactionActionNftText");
var import_getTransactionTokens = require("./helpers/getTransactionTokens");
var import_explorerUrlBuilder = require("../../explorerUrlBuilder");
const getTransactionValue = ({
  transaction,
  hideMultipleBadge
}) => {
  if (transaction.action) {
    if (import_constants.ACTIONS_WITH_EGLD_VALUE.includes(transaction.action.name)) {
      return (0, import_helpers.getEgldValueData)(transaction.value);
    }
    if (import_constants.ACTIONS_WITH_VALUE_IN_DATA_FIELD.includes(transaction.action.name)) {
      return (0, import_helpers.getValueFromDataField)(transaction);
    }
    if (import_constants.ACTIONS_WITH_MANDATORY_OPERATIONS.includes(transaction.action.name)) {
      return (0, import_helpers.getValueFromOperations)(transaction);
    }
    if (import_constants.ACTIONS_WITH_VALUE_IN_ACTION_FIELD.includes(transaction.action.name)) {
      return (0, import_helpers.getValueFromActions)(transaction);
    }
    const transactionTokens = (0, import_getTransactionTokens.getTransactionTokens)(transaction);
    if (transactionTokens.length) {
      const txToken = transactionTokens[0];
      const isNft = Object.values(import_tokens.NftEnumType).includes(
        txToken.type
      );
      const hasTitleText = !hideMultipleBadge && transactionTokens.length > 1;
      const titleText = hasTitleText ? (0, import_helpers.getTitleText)(transactionTokens) : "";
      if (isNft) {
        const {
          badgeText,
          tokenFormattedAmount: tokenFormattedAmount2,
          tokenExplorerLink: tokenExplorerLink2,
          tokenLinkText
        } = (0, import_getTransactionActionNftText.getTransactionActionNftText)({ token: txToken });
        return {
          nftValueData: {
            badgeText,
            tokenFormattedAmount: tokenFormattedAmount2,
            tokenExplorerLink: tokenExplorerLink2,
            tokenLinkText,
            transactionTokens,
            token: txToken,
            value: tokenFormattedAmount2 != null ? txToken.value : null,
            decimals: tokenFormattedAmount2 != null ? txToken.decimals : null,
            titleText
          }
        };
      }
      const tokenFormattedAmount = txToken.value ? (0, import_sdkDappUtils.formatAmount)({
        input: txToken.value,
        decimals: txToken.decimals ?? import_sdkDappUtils.DECIMALS,
        digits: 2,
        addCommas: true
      }) : null;
      const tokenExplorerLink = import_explorerUrlBuilder.explorerUrlBuilder.tokenDetails(
        String(txToken.token)
      );
      return {
        tokenValueData: {
          tokenExplorerLink,
          showFormattedAmount: false,
          tokenFormattedAmount,
          tokenLinkText: txToken.ticker,
          transactionTokens,
          token: txToken,
          value: txToken.value,
          decimals: txToken.decimals ?? import_sdkDappUtils.DECIMALS,
          titleText
        }
      };
    }
  }
  return (0, import_helpers.getEgldValueData)(transaction.value);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getTransactionValue
});
//# sourceMappingURL=getTransactionValue.cjs.map
