{
  "version": 3,
  "sources": ["../../../../../../src/utils/transactions/getInterpretedTransaction/getTransactionValue/helpers/getTransactionActionNftText.ts"],
  "sourcesContent": ["import { formatAmount } from 'lib/sdkDappUtils';\nimport { TokenArgumentType } from 'types/serverTransactions.types';\nimport { NftEnumType } from 'types/tokens.types';\nimport { explorerUrlBuilder } from '../../../explorerUrlBuilder';\n\nexport interface TransactionActionNftType {\n  token: TokenArgumentType;\n  noValue?: boolean;\n  showLastNonZeroDecimal?: boolean;\n}\nexport interface TransactionActionNftReturnType {\n  badgeText: string | null;\n  tokenFormattedAmount: string | null;\n  tokenExplorerLink: string;\n  tokenLinkText: string;\n  token: TokenArgumentType;\n  showLastNonZeroDecimal?: boolean;\n  noValue?: boolean;\n}\n\nexport function getTransactionActionNftText({\n  token,\n  noValue,\n  showLastNonZeroDecimal\n}: TransactionActionNftType): TransactionActionNftReturnType {\n  const isTokenAmountVisible =\n    !noValue && token.value && token.type !== NftEnumType.NonFungibleESDT;\n\n  const canShowFormattedAmount = token.decimals != null;\n\n  let badgeText = '';\n  if (token.type === NftEnumType.NonFungibleESDT) {\n    badgeText = 'NFT';\n  }\n  if (token.type === NftEnumType.SemiFungibleESDT) {\n    badgeText = 'SFT';\n  }\n  if (token.type === NftEnumType.MetaESDT) {\n    badgeText = 'Meta-ESDT';\n  }\n\n  let tokenFormattedAmount = '';\n  if (isTokenAmountVisible && canShowFormattedAmount) {\n    tokenFormattedAmount = canShowFormattedAmount\n      ? formatAmount({\n          input: token.value,\n          decimals: token.decimals,\n          digits: 2,\n          showLastNonZeroDecimal\n        })\n      : Number(token.value).toLocaleString('en');\n  }\n\n  const tokenExplorerLink = explorerUrlBuilder.nftDetails(\n    String(token.identifier)\n  );\n\n  const tokenLinkText =\n    token.ticker === token.collection\n      ? token.identifier ?? token.ticker\n      : token.ticker;\n\n  return {\n    badgeText,\n    tokenFormattedAmount: isTokenAmountVisible ? tokenFormattedAmount : null,\n    tokenExplorerLink,\n    tokenLinkText,\n    token,\n    noValue,\n    showLastNonZeroDecimal\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA6B;AAE7B,oBAA4B;AAC5B,gCAAmC;AAiB5B,SAAS,4BAA4B;AAAA,EAC1C;AAAA,EACA;AAAA,EACA;AACF,GAA6D;AAC3D,QAAM,uBACJ,CAAC,WAAW,MAAM,SAAS,MAAM,SAAS,0BAAY;AAExD,QAAM,yBAAyB,MAAM,YAAY;AAEjD,MAAI,YAAY;AAChB,MAAI,MAAM,SAAS,0BAAY,iBAAiB;AAC9C,gBAAY;AAAA,EACd;AACA,MAAI,MAAM,SAAS,0BAAY,kBAAkB;AAC/C,gBAAY;AAAA,EACd;AACA,MAAI,MAAM,SAAS,0BAAY,UAAU;AACvC,gBAAY;AAAA,EACd;AAEA,MAAI,uBAAuB;AAC3B,MAAI,wBAAwB,wBAAwB;AAClD,2BAAuB,6BACnB,kCAAa;AAAA,MACX,OAAO,MAAM;AAAA,MACb,UAAU,MAAM;AAAA,MAChB,QAAQ;AAAA,MACR;AAAA,IACF,CAAC,IACD,OAAO,MAAM,KAAK,EAAE,eAAe,IAAI;AAAA,EAC7C;AAEA,QAAM,oBAAoB,6CAAmB;AAAA,IAC3C,OAAO,MAAM,UAAU;AAAA,EACzB;AAEA,QAAM,gBACJ,MAAM,WAAW,MAAM,aACnB,MAAM,cAAc,MAAM,SAC1B,MAAM;AAEZ,SAAO;AAAA,IACL;AAAA,IACA,sBAAsB,uBAAuB,uBAAuB;AAAA,IACpE;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
