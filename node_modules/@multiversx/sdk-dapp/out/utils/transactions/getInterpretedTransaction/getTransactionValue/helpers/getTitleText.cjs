"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getTitleText_exports = {};
__export(getTitleText_exports, {
  getTitleText: () => getTitleText
});
module.exports = __toCommonJS(getTitleText_exports);
var import_sdkDappUtils = require("../../../../../lib/sdkDappUtils");
var import_getIdentifierType = require("../../../../../utils/validation/getIdentifierType");
var import_getTransactionActionNftText = require("./getTransactionActionNftText");
const getTitleText = (transactionTokens) => {
  const tokensArray = transactionTokens.map((transactionToken) => {
    const { isNft } = (0, import_getIdentifierType.getIdentifierType)(transactionToken.type);
    if (isNft) {
      const { badgeText, tokenFormattedAmount: tokenFormattedAmount2, tokenLinkText } = (0, import_getTransactionActionNftText.getTransactionActionNftText)({
        token: transactionToken
      });
      const badge = badgeText != null ? `(${badgeText}) ` : "";
      const value2 = `${badge}${tokenFormattedAmount2} ${tokenLinkText}`;
      return value2;
    }
    const tokenFormattedAmount = transactionToken.value ? (0, import_sdkDappUtils.formatAmount)({
      input: transactionToken.value,
      decimals: transactionToken.decimals ?? import_sdkDappUtils.DECIMALS,
      digits: 2,
      addCommas: true
    }) : null;
    const identifier = transactionToken.collection ? transactionToken.identifier : transactionToken.token;
    const value = `${tokenFormattedAmount} ${transactionToken.ticker} (${identifier})`;
    return value;
  });
  const joinedTokensWithLineBreak = decodeURI(tokensArray.join("%0A"));
  return joinedTokensWithLineBreak;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getTitleText
});
//# sourceMappingURL=getTitleText.cjs.map
