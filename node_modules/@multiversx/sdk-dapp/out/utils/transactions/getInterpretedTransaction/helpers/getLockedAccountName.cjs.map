{
  "version": 3,
  "sources": ["../../../../../src/utils/transactions/getInterpretedTransaction/helpers/getLockedAccountName.ts"],
  "sourcesContent": ["import { getPersistedTokenDetails } from 'apiCalls/tokens/getPersistedTokenDetails';\nimport { addressIsValid } from '../../../validation';\n\ninterface IGetLockedAccountNameParams {\n  receiver: string;\n  sender: string;\n  tokenId?: string;\n}\n\nexport const getLockedAccountName = async ({\n  receiver,\n  sender,\n  tokenId\n}: IGetLockedAccountNameParams) => {\n  let senderLockedAccount = null,\n    receiverLockedAccount = null;\n\n  if (!tokenId) {\n    return {\n      senderLockedAccount,\n      receiverLockedAccount\n    };\n  }\n\n  try {\n    const tokenDetails = await getPersistedTokenDetails({ tokenId });\n    const lockedAccounts = tokenDetails?.assets?.lockedAccounts;\n\n    if (!lockedAccounts) {\n      return {\n        senderLockedAccount,\n        receiverLockedAccount\n      };\n    }\n\n    for (let account in lockedAccounts) {\n      if (addressIsValid(account)) {\n        if (sender === account) {\n          senderLockedAccount = account;\n        }\n\n        if (receiver === account) {\n          receiverLockedAccount = account;\n        }\n      }\n\n      if (addressIsValid(lockedAccounts[account])) {\n        if (sender === lockedAccounts[account]) {\n          senderLockedAccount = lockedAccounts[account];\n        }\n\n        if (receiver === lockedAccounts[account]) {\n          receiverLockedAccount = lockedAccounts[account];\n        }\n      }\n\n      if (senderLockedAccount && receiverLockedAccount) {\n        return {\n          senderLockedAccount,\n          receiverLockedAccount\n        };\n      }\n    }\n  } catch (error) {\n    console.error('Error getting token details', error);\n  }\n\n  return {\n    senderLockedAccount,\n    receiverLockedAccount\n  };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAAyC;AACzC,wBAA+B;AAQxB,MAAM,uBAAuB,OAAO;AAAA,EACzC;AAAA,EACA;AAAA,EACA;AACF,MAAmC;AACjC,MAAI,sBAAsB,MACxB,wBAAwB;AAE1B,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAEA,MAAI;AACF,UAAM,eAAe,UAAM,0DAAyB,EAAE,QAAQ,CAAC;AAC/D,UAAM,iBAAiB,cAAc,QAAQ;AAE7C,QAAI,CAAC,gBAAgB;AACnB,aAAO;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAEA,aAAS,WAAW,gBAAgB;AAClC,cAAI,kCAAe,OAAO,GAAG;AAC3B,YAAI,WAAW,SAAS;AACtB,gCAAsB;AAAA,QACxB;AAEA,YAAI,aAAa,SAAS;AACxB,kCAAwB;AAAA,QAC1B;AAAA,MACF;AAEA,cAAI,kCAAe,eAAe,OAAO,CAAC,GAAG;AAC3C,YAAI,WAAW,eAAe,OAAO,GAAG;AACtC,gCAAsB,eAAe,OAAO;AAAA,QAC9C;AAEA,YAAI,aAAa,eAAe,OAAO,GAAG;AACxC,kCAAwB,eAAe,OAAO;AAAA,QAChD;AAAA,MACF;AAEA,UAAI,uBAAuB,uBAAuB;AAChD,eAAO;AAAA,UACL;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF,SAAS,OAAO;AACd,YAAQ,MAAM,+BAA+B,KAAK;AAAA,EACpD;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
