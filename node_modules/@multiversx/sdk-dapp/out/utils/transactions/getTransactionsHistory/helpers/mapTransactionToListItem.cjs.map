{
  "version": 3,
  "sources": ["../../../../../src/utils/transactions/getTransactionsHistory/helpers/mapTransactionToListItem.ts"],
  "sourcesContent": ["import { ITransactionListItem } from 'lib/sdkDappUi';\nimport { TransactionServerStatusesEnum } from 'types/enums.types';\nimport { ServerTransactionType } from 'types/serverTransactions.types';\nimport { IBaseTransactionParams } from 'types/transaction-list-item.types';\nimport { explorerUrlBuilder } from 'utils/transactions/explorerUrlBuilder';\nimport { getExplorerLink } from 'utils/transactions/getExplorerLink';\nimport { getReceiverData } from 'utils/transactions/getTransactionsHistory/helpers/getReceiverData';\nimport { getTransactionAction } from './getTransactionAction';\nimport { getTransactionAmount } from './getTransactionAmount';\nimport { getTransactionAsset } from './getTransactionAsset';\nimport { getTransactionAssets } from './getTransactionAssets';\n\ninterface IMapTransactionToListItemParamsType extends IBaseTransactionParams {\n  transaction: ServerTransactionType;\n  isPending?: boolean;\n  profileImages?: Record<string, string>;\n}\n\nexport const mapTransactionToListItem = ({\n  transaction,\n  address,\n  explorerAddress,\n  egldLabel,\n  isPending = false\n}: IMapTransactionToListItemParamsType): ITransactionListItem => {\n  const { receiver, receiverAssets } = getReceiverData(transaction);\n  const isIncomingTransaction = address === receiver;\n\n  const action = getTransactionAction({\n    transaction,\n    currentUserAddress: address,\n    egldLabel,\n    isPending\n  });\n\n  const transactionAssets = getTransactionAssets({\n    userIsReceiver: receiver === address,\n    transaction,\n    egldLabel\n  });\n\n  const hash = transaction.originalTxHash ?? transaction.txHash;\n\n  const transactionListItem: ITransactionListItem = {\n    asset: getTransactionAsset({\n      ...transaction,\n      transactionAssets,\n      showDefaultState: isPending,\n      status: transaction.status as TransactionServerStatusesEnum\n    }),\n    interactor: isIncomingTransaction ? transaction.sender : receiver,\n    interactorAsset: isIncomingTransaction\n      ? transaction.senderAssets?.iconSvg ?? transaction.senderAssets?.iconPng\n      : receiverAssets?.iconSvg ?? receiverAssets?.iconPng,\n    directionLabel: isIncomingTransaction ? 'From' : 'To',\n    action,\n    amount: getTransactionAmount({\n      transactionAssets,\n      isIncomingTransaction\n    }),\n    hash,\n    status: transaction.status as TransactionServerStatusesEnum,\n    timestamp: transaction.timestamp,\n    link: getExplorerLink({\n      explorerAddress,\n      to: explorerUrlBuilder.transactionDetails(hash)\n    })\n  };\n\n  return transactionListItem;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,gCAAmC;AACnC,6BAAgC;AAChC,6BAAgC;AAChC,kCAAqC;AACrC,kCAAqC;AACrC,iCAAoC;AACpC,kCAAqC;AAQ9B,MAAM,2BAA2B,CAAC;AAAA,EACvC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY;AACd,MAAiE;AAC/D,QAAM,EAAE,UAAU,eAAe,QAAI,wCAAgB,WAAW;AAChE,QAAM,wBAAwB,YAAY;AAE1C,QAAM,aAAS,kDAAqB;AAAA,IAClC;AAAA,IACA,oBAAoB;AAAA,IACpB;AAAA,IACA;AAAA,EACF,CAAC;AAED,QAAM,wBAAoB,kDAAqB;AAAA,IAC7C,gBAAgB,aAAa;AAAA,IAC7B;AAAA,IACA;AAAA,EACF,CAAC;AAED,QAAM,OAAO,YAAY,kBAAkB,YAAY;AAEvD,QAAM,sBAA4C;AAAA,IAChD,WAAO,gDAAoB;AAAA,MACzB,GAAG;AAAA,MACH;AAAA,MACA,kBAAkB;AAAA,MAClB,QAAQ,YAAY;AAAA,IACtB,CAAC;AAAA,IACD,YAAY,wBAAwB,YAAY,SAAS;AAAA,IACzD,iBAAiB,wBACb,YAAY,cAAc,WAAW,YAAY,cAAc,UAC/D,gBAAgB,WAAW,gBAAgB;AAAA,IAC/C,gBAAgB,wBAAwB,SAAS;AAAA,IACjD;AAAA,IACA,YAAQ,kDAAqB;AAAA,MAC3B;AAAA,MACA;AAAA,IACF,CAAC;AAAA,IACD;AAAA,IACA,QAAQ,YAAY;AAAA,IACpB,WAAW,YAAY;AAAA,IACvB,UAAM,wCAAgB;AAAA,MACpB;AAAA,MACA,IAAI,6CAAmB,mBAAmB,IAAI;AAAA,IAChD,CAAC;AAAA,EACH;AAEA,SAAO;AACT;",
  "names": []
}
