{
  "version": 3,
  "sources": ["../../../../../src/utils/transactions/getTransactionsHistory/helpers/getTransactionAction.ts"],
  "sourcesContent": ["import startCase from 'lodash.startcase';\nimport uniq from 'lodash.uniq';\nimport { ITransactionListItemAction } from 'lib/sdkDappUi';\n\nimport type { ServerTransactionType } from 'types/serverTransactions.types';\nimport { TransactionActionMethodTypeEnum } from 'types/transaction-list-item.types';\nimport { getTransactionActionDirectionLabel } from './getTransactionActionDirectionLabel';\nimport { getTransactionActionTransferLabel } from './getTransactionActionTransferLabel';\n\nexport enum TransactionActionCategoryTypeEnum {\n  mex = 'mex',\n  stake = 'stake'\n}\n\nexport interface IGetTransactionActionParams {\n  currentUserAddress: string;\n  transaction: ServerTransactionType;\n  egldLabel?: string;\n  isPending?: boolean;\n}\n\nexport const getTransactionAction = ({\n  currentUserAddress,\n  transaction,\n  egldLabel,\n  isPending = false\n}: IGetTransactionActionParams): ITransactionListItemAction => {\n  if (isPending) {\n    return {\n      name: 'Pending...'\n    };\n  }\n\n  const defaultTransactionObject: Record<\n    string,\n    TransactionActionMethodTypeEnum\n  > = {};\n\n  const transactionMethodsEntries = Object.entries(\n    TransactionActionMethodTypeEnum\n  );\n\n  const transactionMethods = transactionMethodsEntries.reduce(\n    (transactionMethodsObject, [methodValue, methodLabel]) =>\n      Object.assign(transactionMethodsObject, { [methodValue]: methodLabel }),\n    defaultTransactionObject\n  );\n\n  const transactionAction = transaction.action;\n  const transactionArguments = transactionAction && transactionAction.arguments;\n\n  const transactionActionCategory =\n    transactionAction && transactionAction.category\n      ? (transactionAction.category as TransactionActionCategoryTypeEnum)\n      : null;\n\n  const isTransfer =\n    transactionArguments && transactionAction.name === 'transfer';\n\n  const transactionTransfers: Record<string, string>[] =\n    transactionArguments && Array.isArray(transactionArguments.transfers)\n      ? transactionArguments.transfers\n      : [];\n\n  const allTransferTypes = transactionTransfers.map(\n    (transfer): string => transfer.type\n  );\n\n  const [transferType] = uniq(allTransferTypes);\n  const processedEgldLabel = egldLabel ?? 'EGLD';\n  const directionLabel = getTransactionActionDirectionLabel({\n    transaction,\n    transferType,\n    currentUserAddress\n  });\n\n  const transferLabel = getTransactionActionTransferLabel({\n    allTransferTypes,\n    transferType,\n    transactionTransfers\n  });\n\n  const transactionActionDescriptionCategories = [\n    TransactionActionCategoryTypeEnum.mex,\n    TransactionActionCategoryTypeEnum.stake\n  ];\n\n  const showTransactionActionDescription =\n    transactionActionCategory &&\n    transactionActionDescriptionCategories.includes(transactionActionCategory);\n\n  const transactionActionDescription =\n    transactionAction && showTransactionActionDescription\n      ? transactionAction.description\n      : undefined;\n\n  const defaultTransactionActionLabel =\n    transaction.function && transaction.function !== 'transfer'\n      ? transactionMethods[transaction.function] ??\n        startCase(transaction.function)\n      : null;\n\n  if (isTransfer && transactionArguments) {\n    return {\n      name: `${directionLabel} ${transferLabel}`,\n      description: transactionActionDescription\n    };\n  }\n\n  if (defaultTransactionActionLabel) {\n    return {\n      name: defaultTransactionActionLabel,\n      description: transactionActionDescription\n    };\n  }\n\n  return {\n    name: `${directionLabel} ${processedEgldLabel}`,\n    description: transactionActionDescription\n  };\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAsB;AACtB,IAAAA,iBAAiB;AAIjB,mCAAgD;AAChD,gDAAmD;AACnD,+CAAkD;AAE3C,IAAK,oCAAL,kBAAKC,uCAAL;AACL,EAAAA,mCAAA,SAAM;AACN,EAAAA,mCAAA,WAAQ;AAFE,SAAAA;AAAA,GAAA;AAYL,MAAM,uBAAuB,CAAC;AAAA,EACnC;AAAA,EACA;AAAA,EACA;AAAA,EACA,YAAY;AACd,MAA+D;AAC7D,MAAI,WAAW;AACb,WAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,EACF;AAEA,QAAM,2BAGF,CAAC;AAEL,QAAM,4BAA4B,OAAO;AAAA,IACvC;AAAA,EACF;AAEA,QAAM,qBAAqB,0BAA0B;AAAA,IACnD,CAAC,0BAA0B,CAAC,aAAa,WAAW,MAClD,OAAO,OAAO,0BAA0B,EAAE,CAAC,WAAW,GAAG,YAAY,CAAC;AAAA,IACxE;AAAA,EACF;AAEA,QAAM,oBAAoB,YAAY;AACtC,QAAM,uBAAuB,qBAAqB,kBAAkB;AAEpE,QAAM,4BACJ,qBAAqB,kBAAkB,WAClC,kBAAkB,WACnB;AAEN,QAAM,aACJ,wBAAwB,kBAAkB,SAAS;AAErD,QAAM,uBACJ,wBAAwB,MAAM,QAAQ,qBAAqB,SAAS,IAChE,qBAAqB,YACrB,CAAC;AAEP,QAAM,mBAAmB,qBAAqB;AAAA,IAC5C,CAAC,aAAqB,SAAS;AAAA,EACjC;AAEA,QAAM,CAAC,YAAY,QAAI,eAAAC,SAAK,gBAAgB;AAC5C,QAAM,qBAAqB,aAAa;AACxC,QAAM,qBAAiB,8EAAmC;AAAA,IACxD;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,QAAM,oBAAgB,4EAAkC;AAAA,IACtD;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AAED,QAAM,yCAAyC;AAAA,IAC7C;AAAA,IACA;AAAA,EACF;AAEA,QAAM,mCACJ,6BACA,uCAAuC,SAAS,yBAAyB;AAE3E,QAAM,+BACJ,qBAAqB,mCACjB,kBAAkB,cAClB;AAEN,QAAM,gCACJ,YAAY,YAAY,YAAY,aAAa,aAC7C,mBAAmB,YAAY,QAAQ,SACvC,cAAAC,SAAU,YAAY,QAAQ,IAC9B;AAEN,MAAI,cAAc,sBAAsB;AACtC,WAAO;AAAA,MACL,MAAM,GAAG,cAAc,IAAI,aAAa;AAAA,MACxC,aAAa;AAAA,IACf;AAAA,EACF;AAEA,MAAI,+BAA+B;AACjC,WAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,IACf;AAAA,EACF;AAEA,SAAO;AAAA,IACL,MAAM,GAAG,cAAc,IAAI,kBAAkB;AAAA,IAC7C,aAAa;AAAA,EACf;AACF;",
  "names": ["import_lodash", "TransactionActionCategoryTypeEnum", "uniq", "startCase"]
}
