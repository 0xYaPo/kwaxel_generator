{
  "version": 3,
  "sources": ["../../../../../src/utils/transactions/getTransactionsHistory/helpers/getAssetAmount.ts"],
  "sourcesContent": ["import BigNumber from 'bignumber.js';\nimport trimEnd from 'lodash.trimend';\nimport { formatAmount, DECIMALS, DIGITS, ZERO } from 'lib/sdkDappUtils';\n\nimport { trimAmountDecimals } from 'utils/operations/trimAmountDecimals';\nimport { isTransferNftOrSft } from './isTransferNftOrSft';\n\nexport const getAssetAmount = (transactionTransfer: Record<string, string>) => {\n  if (isTransferNftOrSft(transactionTransfer)) {\n    return parseFloat(transactionTransfer.value).toLocaleString();\n  }\n\n  const formattedAmount = formatAmount({\n    input: String(transactionTransfer.value ?? ZERO),\n    decimals: Number(transactionTransfer.decimals ?? DECIMALS),\n    showLastNonZeroDecimal: true,\n    addCommas: true\n  });\n\n  const trimmedAmount = trimAmountDecimals({\n    minimumPositiveDecimals: DIGITS,\n    amount: formattedAmount\n  });\n\n  const [price, decimals] = trimmedAmount.split('.');\n  const trimmedDecimals = trimEnd(decimals, ZERO);\n\n  if (decimals && new BigNumber(decimals).isGreaterThan(ZERO)) {\n    return `${price}.${trimmedDecimals}`;\n  }\n\n  return trimmedAmount;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAsB;AACtB,oBAAoB;AACpB,0BAAqD;AAErD,gCAAmC;AACnC,gCAAmC;AAE5B,MAAM,iBAAiB,CAAC,wBAAgD;AAC7E,UAAI,8CAAmB,mBAAmB,GAAG;AAC3C,WAAO,WAAW,oBAAoB,KAAK,EAAE,eAAe;AAAA,EAC9D;AAEA,QAAM,sBAAkB,kCAAa;AAAA,IACnC,OAAO,OAAO,oBAAoB,SAAS,wBAAI;AAAA,IAC/C,UAAU,OAAO,oBAAoB,YAAY,4BAAQ;AAAA,IACzD,wBAAwB;AAAA,IACxB,WAAW;AAAA,EACb,CAAC;AAED,QAAM,oBAAgB,8CAAmB;AAAA,IACvC,yBAAyB;AAAA,IACzB,QAAQ;AAAA,EACV,CAAC;AAED,QAAM,CAAC,OAAO,QAAQ,IAAI,cAAc,MAAM,GAAG;AACjD,QAAM,sBAAkB,cAAAA,SAAQ,UAAU,wBAAI;AAE9C,MAAI,YAAY,IAAI,iBAAAC,QAAU,QAAQ,EAAE,cAAc,wBAAI,GAAG;AAC3D,WAAO,GAAG,KAAK,IAAI,eAAe;AAAA,EACpC;AAEA,SAAO;AACT;",
  "names": ["trimEnd", "BigNumber"]
}
