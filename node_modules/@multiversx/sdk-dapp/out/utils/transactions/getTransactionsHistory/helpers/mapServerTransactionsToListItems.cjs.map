{
  "version": 3,
  "sources": ["../../../../../src/utils/transactions/getTransactionsHistory/helpers/mapServerTransactionsToListItems.ts"],
  "sourcesContent": ["import { getServerTransactionsByHashes } from 'apiCalls/transactions/getServerTransactionsByHashes';\nimport { ITransactionListItem } from 'lib/sdkDappUi';\nimport { saveToCache } from 'store/actions/cache/cacheActions';\nimport { TransactionServerStatusesEnum } from 'types/enums.types';\nimport { ServerTransactionType } from 'types/serverTransactions.types';\nimport { SignedTransactionType } from 'types/transactions.types';\nimport { getCachedTransactionListItem } from './getCachedTransactionListItem';\nimport { mapTransactionToListItem } from './mapTransactionToListItem';\n\ninterface IMapServerTransactionsToListItemsParams {\n  transactions: SignedTransactionType[];\n  address: string;\n  explorerAddress: string;\n  egldLabel: string;\n}\n\nconst sortTransactionsByTimestamp = (transactions: ITransactionListItem[]) =>\n  transactions.sort((a, b) => b.timestamp - a.timestamp);\n\nexport const mapServerTransactionsToListItems = async ({\n  transactions,\n  address,\n  explorerAddress,\n  egldLabel\n}: IMapServerTransactionsToListItemsParams): Promise<\n  ITransactionListItem[]\n> => {\n  const cachedTransactions: ITransactionListItem[] = [];\n  const hashesToFetch: string[] = [];\n\n  transactions.forEach((transaction) => {\n    const cachedTransaction = getCachedTransactionListItem(transaction.hash);\n    if (cachedTransaction) {\n      cachedTransactions.push(cachedTransaction);\n    } else {\n      hashesToFetch.push(transaction.hash);\n    }\n  });\n\n  if (hashesToFetch.length === 0) {\n    return sortTransactionsByTimestamp(cachedTransactions);\n  }\n\n  const newTransactions = await getServerTransactionsByHashes(hashesToFetch);\n\n  const retrievedHashes = newTransactions.map((tx) => tx.txHash);\n  const missingHashes = hashesToFetch.filter(\n    (hash) => !retrievedHashes.includes(hash)\n  );\n\n  if (missingHashes.length > 0) {\n    const filteredTransactions = transactions.filter((transaction) =>\n      missingHashes.includes(transaction.hash)\n    );\n\n    // In case the transactions were not found, we create a dummy transaction with the pending status\n    // until all pending transactions are returned from the API\n    const pendingDummyTransactions = filteredTransactions.map(\n      (transaction) =>\n        ({\n          ...transaction,\n          txHash: transaction.hash,\n          price: 0,\n          status: TransactionServerStatusesEnum.pending,\n          gasUsed: 0,\n          miniBlockHash: '',\n          receiverShard: 0,\n          round: 0,\n          senderShard: 0,\n          timestamp: Date.now()\n        }) as ServerTransactionType\n    );\n\n    newTransactions.push(...pendingDummyTransactions);\n  }\n\n  newTransactions.forEach((transaction) => {\n    const transactionListItem = mapTransactionToListItem({\n      transaction,\n      address,\n      explorerAddress,\n      egldLabel\n    });\n\n    if (transactionListItem.status !== TransactionServerStatusesEnum.pending) {\n      saveToCache({\n        key: `transaction-${transaction.txHash}`,\n        value: transactionListItem\n      });\n    }\n\n    cachedTransactions.push(transactionListItem);\n  });\n\n  return sortTransactionsByTimestamp(cachedTransactions);\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAA8C;AAE9C,0BAA4B;AAC5B,mBAA8C;AAG9C,0CAA6C;AAC7C,sCAAyC;AASzC,MAAM,8BAA8B,CAAC,iBACnC,aAAa,KAAK,CAAC,GAAG,MAAM,EAAE,YAAY,EAAE,SAAS;AAEhD,MAAM,mCAAmC,OAAO;AAAA,EACrD;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAEK;AACH,QAAM,qBAA6C,CAAC;AACpD,QAAM,gBAA0B,CAAC;AAEjC,eAAa,QAAQ,CAAC,gBAAgB;AACpC,UAAM,wBAAoB,kEAA6B,YAAY,IAAI;AACvE,QAAI,mBAAmB;AACrB,yBAAmB,KAAK,iBAAiB;AAAA,IAC3C,OAAO;AACL,oBAAc,KAAK,YAAY,IAAI;AAAA,IACrC;AAAA,EACF,CAAC;AAED,MAAI,cAAc,WAAW,GAAG;AAC9B,WAAO,4BAA4B,kBAAkB;AAAA,EACvD;AAEA,QAAM,kBAAkB,UAAM,oEAA8B,aAAa;AAEzE,QAAM,kBAAkB,gBAAgB,IAAI,CAAC,OAAO,GAAG,MAAM;AAC7D,QAAM,gBAAgB,cAAc;AAAA,IAClC,CAAC,SAAS,CAAC,gBAAgB,SAAS,IAAI;AAAA,EAC1C;AAEA,MAAI,cAAc,SAAS,GAAG;AAC5B,UAAM,uBAAuB,aAAa;AAAA,MAAO,CAAC,gBAChD,cAAc,SAAS,YAAY,IAAI;AAAA,IACzC;AAIA,UAAM,2BAA2B,qBAAqB;AAAA,MACpD,CAAC,iBACE;AAAA,QACC,GAAG;AAAA,QACH,QAAQ,YAAY;AAAA,QACpB,OAAO;AAAA,QACP,QAAQ,2CAA8B;AAAA,QACtC,SAAS;AAAA,QACT,eAAe;AAAA,QACf,eAAe;AAAA,QACf,OAAO;AAAA,QACP,aAAa;AAAA,QACb,WAAW,KAAK,IAAI;AAAA,MACtB;AAAA,IACJ;AAEA,oBAAgB,KAAK,GAAG,wBAAwB;AAAA,EAClD;AAEA,kBAAgB,QAAQ,CAAC,gBAAgB;AACvC,UAAM,0BAAsB,0DAAyB;AAAA,MACnD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AAED,QAAI,oBAAoB,WAAW,2CAA8B,SAAS;AACxE,2CAAY;AAAA,QACV,KAAK,eAAe,YAAY,MAAM;AAAA,QACtC,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AAEA,uBAAmB,KAAK,mBAAmB;AAAA,EAC7C,CAAC;AAED,SAAO,4BAA4B,kBAAkB;AACvD;",
  "names": []
}
