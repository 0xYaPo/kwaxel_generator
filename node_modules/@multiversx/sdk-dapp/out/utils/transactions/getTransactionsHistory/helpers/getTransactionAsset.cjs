"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getTransactionAsset_exports = {};
__export(getTransactionAsset_exports, {
  getTransactionAsset: () => getTransactionAsset
});
module.exports = __toCommonJS(getTransactionAsset_exports);
var import_enums = require("../../../../types/enums.types");
var import_transaction_list_item = require("../../../../types/transaction-list-item.types");
var import_isContract = require("../../../../utils/validation/isContract");
var import_getIsTransactionInvalidOrFailed = require("./getIsTransactionInvalidOrFailed");
var import_getTransactionAvatar = require("./getTransactionAvatar");
var NftTypeEnum = /* @__PURE__ */ ((NftTypeEnum2) => {
  NftTypeEnum2["NonFungibleESDT"] = "NonFungibleESDT";
  NftTypeEnum2["SemiFungibleESDT"] = "SemiFungibleESDT";
  return NftTypeEnum2;
})(NftTypeEnum || {});
const getTransactionAsset = ({
  receiver,
  sender,
  senderAssets,
  receiverAssets,
  transactionAssets,
  showDefaultState = false,
  status
}) => {
  const userIsReceiver = receiver === sender;
  const isContractInteraction = userIsReceiver ? (0, import_isContract.isContract)(sender) : (0, import_isContract.isContract)(receiver);
  const transactionAvatar = (0, import_getTransactionAvatar.getTransactionAvatar)({
    senderAssets,
    receiverAssets,
    userIsReceiver
  });
  const [latestAsset] = transactionAssets ?? [];
  const isMultipleAssets = transactionAssets.length > 1;
  const assetIsNft = latestAsset?.type === "NonFungibleESDT" /* NonFungibleESDT */;
  const assetIsSft = latestAsset?.type === "SemiFungibleESDT" /* SemiFungibleESDT */;
  const areMultipleAssetsSameType = transactionAssets?.every(
    (asset) => latestAsset && asset.assetTicker === latestAsset.assetTicker
  ) ?? false;
  const isTransactionFailedOrInvalid = (0, import_getIsTransactionInvalidOrFailed.getIsTransactionInvalidOrFailed)(status);
  const isTransactionPending = status === import_enums.TransactionServerStatusesEnum.pending;
  const showDefaultTransactionIcon = isTransactionPending || isTransactionFailedOrInvalid;
  if (showDefaultTransactionIcon && !showDefaultState) {
    return {
      icon: isTransactionPending ? "faHourglass" : "faTimes"
    };
  }
  if (isMultipleAssets && !areMultipleAssetsSameType) {
    return {
      icon: "faCoins"
    };
  }
  if (latestAsset?.assetImage) {
    return {
      imageUrl: latestAsset.assetImage
    };
  }
  if (assetIsNft || assetIsSft) {
    return {
      text: assetIsSft ? import_transaction_list_item.TransactionIconTypeEnum.SFT : import_transaction_list_item.TransactionIconTypeEnum.NFT
    };
  }
  if (isContractInteraction) {
    return {
      imageUrl: transactionAvatar || void 0
    };
  }
  return null;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getTransactionAsset
});
//# sourceMappingURL=getTransactionAsset.cjs.map
