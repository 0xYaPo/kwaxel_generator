"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getTransactionAction_exports = {};
__export(getTransactionAction_exports, {
  TransactionActionCategoryTypeEnum: () => TransactionActionCategoryTypeEnum,
  getTransactionAction: () => getTransactionAction
});
module.exports = __toCommonJS(getTransactionAction_exports);
var import_lodash = __toESM(require("lodash.startcase"));
var import_lodash2 = __toESM(require("lodash.uniq"));
var import_transaction_list_item = require("../../../../types/transaction-list-item.types");
var import_getTransactionActionDirectionLabel = require("./getTransactionActionDirectionLabel");
var import_getTransactionActionTransferLabel = require("./getTransactionActionTransferLabel");
var TransactionActionCategoryTypeEnum = /* @__PURE__ */ ((TransactionActionCategoryTypeEnum2) => {
  TransactionActionCategoryTypeEnum2["mex"] = "mex";
  TransactionActionCategoryTypeEnum2["stake"] = "stake";
  return TransactionActionCategoryTypeEnum2;
})(TransactionActionCategoryTypeEnum || {});
const getTransactionAction = ({
  currentUserAddress,
  transaction,
  egldLabel,
  isPending = false
}) => {
  if (isPending) {
    return {
      name: "Pending..."
    };
  }
  const defaultTransactionObject = {};
  const transactionMethodsEntries = Object.entries(
    import_transaction_list_item.TransactionActionMethodTypeEnum
  );
  const transactionMethods = transactionMethodsEntries.reduce(
    (transactionMethodsObject, [methodValue, methodLabel]) => Object.assign(transactionMethodsObject, { [methodValue]: methodLabel }),
    defaultTransactionObject
  );
  const transactionAction = transaction.action;
  const transactionArguments = transactionAction && transactionAction.arguments;
  const transactionActionCategory = transactionAction && transactionAction.category ? transactionAction.category : null;
  const isTransfer = transactionArguments && transactionAction.name === "transfer";
  const transactionTransfers = transactionArguments && Array.isArray(transactionArguments.transfers) ? transactionArguments.transfers : [];
  const allTransferTypes = transactionTransfers.map(
    (transfer) => transfer.type
  );
  const [transferType] = (0, import_lodash2.default)(allTransferTypes);
  const processedEgldLabel = egldLabel ?? "EGLD";
  const directionLabel = (0, import_getTransactionActionDirectionLabel.getTransactionActionDirectionLabel)({
    transaction,
    transferType,
    currentUserAddress
  });
  const transferLabel = (0, import_getTransactionActionTransferLabel.getTransactionActionTransferLabel)({
    allTransferTypes,
    transferType,
    transactionTransfers
  });
  const transactionActionDescriptionCategories = [
    "mex" /* mex */,
    "stake" /* stake */
  ];
  const showTransactionActionDescription = transactionActionCategory && transactionActionDescriptionCategories.includes(transactionActionCategory);
  const transactionActionDescription = transactionAction && showTransactionActionDescription ? transactionAction.description : void 0;
  const defaultTransactionActionLabel = transaction.function && transaction.function !== "transfer" ? transactionMethods[transaction.function] ?? (0, import_lodash.default)(transaction.function) : null;
  if (isTransfer && transactionArguments) {
    return {
      name: `${directionLabel} ${transferLabel}`,
      description: transactionActionDescription
    };
  }
  if (defaultTransactionActionLabel) {
    return {
      name: defaultTransactionActionLabel,
      description: transactionActionDescription
    };
  }
  return {
    name: `${directionLabel} ${processedEgldLabel}`,
    description: transactionActionDescription
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TransactionActionCategoryTypeEnum,
  getTransactionAction
});
//# sourceMappingURL=getTransactionAction.cjs.map
