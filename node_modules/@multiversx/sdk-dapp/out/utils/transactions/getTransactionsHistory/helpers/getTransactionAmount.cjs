"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getTransactionAmount_exports = {};
__export(getTransactionAmount_exports, {
  getTransactionAmount: () => getTransactionAmount
});
module.exports = __toCommonJS(getTransactionAmount_exports);
var import_bignumber = __toESM(require("bignumber.js"));
const getTransactionAmount = ({
  transactionAssets,
  isIncomingTransaction
}) => {
  if (transactionAssets.length > 1) {
    const firstAssetTicker = transactionAssets[0]?.assetTicker;
    const hasMultipleDifferentAssets = transactionAssets.some(
      (asset) => asset.assetTicker !== firstAssetTicker
    );
    if (hasMultipleDifferentAssets) {
      return "";
    }
  }
  if (!transactionAssets[0]?.assetAmount) {
    return "";
  }
  const amount = transactionAssets[0].assetAmount;
  const ticker = transactionAssets[0].assetTicker;
  if (new import_bignumber.default(amount).isZero()) {
    return `${amount} ${ticker}`;
  }
  const prefix = isIncomingTransaction ? "+" : "-";
  return `${prefix}${amount} ${ticker}`;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getTransactionAmount
});
//# sourceMappingURL=getTransactionAmount.cjs.map
