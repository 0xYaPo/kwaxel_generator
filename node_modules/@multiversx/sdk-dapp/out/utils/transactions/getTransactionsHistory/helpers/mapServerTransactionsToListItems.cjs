"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var mapServerTransactionsToListItems_exports = {};
__export(mapServerTransactionsToListItems_exports, {
  mapServerTransactionsToListItems: () => mapServerTransactionsToListItems
});
module.exports = __toCommonJS(mapServerTransactionsToListItems_exports);
var import_getServerTransactionsByHashes = require("../../../../apiCalls/transactions/getServerTransactionsByHashes");
var import_cacheActions = require("../../../../store/actions/cache/cacheActions");
var import_enums = require("../../../../types/enums.types");
var import_getCachedTransactionListItem = require("./getCachedTransactionListItem");
var import_mapTransactionToListItem = require("./mapTransactionToListItem");
const sortTransactionsByTimestamp = (transactions) => transactions.sort((a, b) => b.timestamp - a.timestamp);
const mapServerTransactionsToListItems = async ({
  transactions,
  address,
  explorerAddress,
  egldLabel
}) => {
  const cachedTransactions = [];
  const hashesToFetch = [];
  transactions.forEach((transaction) => {
    const cachedTransaction = (0, import_getCachedTransactionListItem.getCachedTransactionListItem)(transaction.hash);
    if (cachedTransaction) {
      cachedTransactions.push(cachedTransaction);
    } else {
      hashesToFetch.push(transaction.hash);
    }
  });
  if (hashesToFetch.length === 0) {
    return sortTransactionsByTimestamp(cachedTransactions);
  }
  const newTransactions = await (0, import_getServerTransactionsByHashes.getServerTransactionsByHashes)(hashesToFetch);
  const retrievedHashes = newTransactions.map((tx) => tx.txHash);
  const missingHashes = hashesToFetch.filter(
    (hash) => !retrievedHashes.includes(hash)
  );
  if (missingHashes.length > 0) {
    const filteredTransactions = transactions.filter(
      (transaction) => missingHashes.includes(transaction.hash)
    );
    const pendingDummyTransactions = filteredTransactions.map(
      (transaction) => ({
        ...transaction,
        txHash: transaction.hash,
        price: 0,
        status: import_enums.TransactionServerStatusesEnum.pending,
        gasUsed: 0,
        miniBlockHash: "",
        receiverShard: 0,
        round: 0,
        senderShard: 0,
        timestamp: Date.now()
      })
    );
    newTransactions.push(...pendingDummyTransactions);
  }
  newTransactions.forEach((transaction) => {
    const transactionListItem = (0, import_mapTransactionToListItem.mapTransactionToListItem)({
      transaction,
      address,
      explorerAddress,
      egldLabel
    });
    if (transactionListItem.status !== import_enums.TransactionServerStatusesEnum.pending) {
      (0, import_cacheActions.saveToCache)({
        key: `transaction-${transaction.txHash}`,
        value: transactionListItem
      });
    }
    cachedTransactions.push(transactionListItem);
  });
  return sortTransactionsByTimestamp(cachedTransactions);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  mapServerTransactionsToListItems
});
//# sourceMappingURL=mapServerTransactionsToListItems.cjs.map
