"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getScamFlag_exports = {};
__export(getScamFlag_exports, {
  getScamFlag: () => getScamFlag,
  getTextWithLinks: () => getTextWithLinks
});
module.exports = __toCommonJS(getScamFlag_exports);
var linkify = __toESM(require("linkifyjs"));
const getTextWithLinks = (text) => {
  const links = linkify.find(text);
  if (!links.length) {
    return {
      textWithLinks: text,
      hasLinks: false
    };
  }
  let textWithLinks = text;
  for (const link of links) {
    const previousLink = text.substring(link.start, link.end);
    textWithLinks = textWithLinks.replace(previousLink, link.value);
  }
  return {
    textWithLinks,
    hasLinks: true
  };
};
const getScamFlag = ({
  message,
  scamInfo,
  isNsfw,
  verified,
  messagePrefix = "Message hidden due to suspicious content - "
}) => {
  if (verified) {
    return {
      message: "",
      textWithLinks: "",
      isSuspicious: false
    };
  }
  const outputMessage = `${messagePrefix}${scamInfo?.info ?? "suspicious content"}`;
  const { textWithLinks, hasLinks } = getTextWithLinks(message);
  if (hasLinks || isNsfw || scamInfo) {
    return {
      message: outputMessage,
      textWithLinks,
      isSuspicious: true
    };
  }
  return {
    message: "",
    textWithLinks,
    isSuspicious: false
  };
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getScamFlag,
  getTextWithLinks
});
//# sourceMappingURL=getScamFlag.cjs.map
