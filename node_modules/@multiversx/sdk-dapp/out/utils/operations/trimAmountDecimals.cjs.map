{
  "version": 3,
  "sources": ["../../../src/utils/operations/trimAmountDecimals.ts"],
  "sourcesContent": ["import BigNumber from 'bignumber.js';\n\nimport { ZERO } from 'lib/sdkDappUtils';\n\ninterface TrimPriceAmountType {\n  amount: string;\n  minimumPositiveDecimals: number;\n}\n\nexport const trimAmountDecimals = ({\n  amount,\n  minimumPositiveDecimals\n}: TrimPriceAmountType): string => {\n  const [mainPrice, decimalPrice] = amount.split('.');\n\n  const decimalPriceArray = decimalPrice ? decimalPrice.split('') : [];\n  const trimmedDecimals = decimalPriceArray.reduce((total, decimal, index) => {\n    const decimalAboveZero = new BigNumber(total).isGreaterThan(ZERO);\n    const minimumDecimalsReached = index > minimumPositiveDecimals - 1;\n\n    const shouldReturnTotal =\n      decimalAboveZero && minimumDecimalsReached && minimumPositiveDecimals > 0;\n\n    if (shouldReturnTotal) {\n      return total;\n    }\n\n    return total.concat(decimal);\n  }, '');\n\n  if (!trimmedDecimals) {\n    return mainPrice;\n  }\n\n  return `${mainPrice}.${trimmedDecimals}`;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAsB;AAEtB,0BAAqB;AAOd,MAAM,qBAAqB,CAAC;AAAA,EACjC;AAAA,EACA;AACF,MAAmC;AACjC,QAAM,CAAC,WAAW,YAAY,IAAI,OAAO,MAAM,GAAG;AAElD,QAAM,oBAAoB,eAAe,aAAa,MAAM,EAAE,IAAI,CAAC;AACnE,QAAM,kBAAkB,kBAAkB,OAAO,CAAC,OAAO,SAAS,UAAU;AAC1E,UAAM,mBAAmB,IAAI,iBAAAA,QAAU,KAAK,EAAE,cAAc,wBAAI;AAChE,UAAM,yBAAyB,QAAQ,0BAA0B;AAEjE,UAAM,oBACJ,oBAAoB,0BAA0B,0BAA0B;AAE1E,QAAI,mBAAmB;AACrB,aAAO;AAAA,IACT;AAEA,WAAO,MAAM,OAAO,OAAO;AAAA,EAC7B,GAAG,EAAE;AAEL,MAAI,CAAC,iBAAiB;AACpB,WAAO;AAAA,EACT;AAEA,SAAO,GAAG,SAAS,IAAI,eAAe;AACxC;",
  "names": ["BigNumber"]
}
