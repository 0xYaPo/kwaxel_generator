{
  "version": 3,
  "sources": ["../../src/apiCalls/transactions/getTransactionsByHashes.ts"],
  "sourcesContent": ["import {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums.types';\nimport { ServerTransactionType } from 'types/serverTransactions.types';\nimport {\n  TrackedTransactionResultType,\n  SignedTransactionType\n} from 'types/transactions.types';\nimport { getServerTransactionsByHashes } from './getServerTransactionsByHashes';\n\nexport const getTransactionsByHashes = async (\n  pendingTransactions: SignedTransactionType[]\n): Promise<TrackedTransactionResultType[]> => {\n  const hashes = pendingTransactions.map((tx) => tx.hash);\n\n  const responseData = await getServerTransactionsByHashes(hashes);\n\n  return pendingTransactions.map((transaction) => {\n    const txOnNetwork = responseData.find(\n      (txResponse: ServerTransactionType) =>\n        txResponse?.txHash === transaction.hash\n    );\n\n    return {\n      ...transaction,\n      status: txOnNetwork?.status as\n        | TransactionServerStatusesEnum\n        | TransactionBatchStatusesEnum,\n      invalidTransaction: txOnNetwork == null,\n      results: txOnNetwork?.results ?? [],\n      previousStatus: transaction.status?.toString() || '',\n      hasStatusChanged: Boolean(\n        txOnNetwork && txOnNetwork.status !== transaction.status\n      )\n    };\n  });\n};\n"],
  "mappings": "yCAWO,IAAMA,EAA0B,MACrCC,GAC4C,CAC5C,IAAMC,EAASD,EAAoB,IAAKE,GAAOA,EAAG,IAAI,EAEhDC,EAAe,MAAMC,EAA8BH,CAAM,EAE/D,OAAOD,EAAoB,IAAKK,GAAgB,CAC9C,IAAMC,EAAcH,EAAa,KAC9BI,GACCA,GAAY,SAAWF,EAAY,IACvC,EAEA,MAAO,CACL,GAAGA,EACH,OAAQC,GAAa,OAGrB,mBAAoBA,GAAe,KACnC,QAASA,GAAa,SAAW,CAAC,EAClC,eAAgBD,EAAY,QAAQ,SAAS,GAAK,GAClD,iBAAkB,GAChBC,GAAeA,EAAY,SAAWD,EAAY,OAEtD,CACF,CAAC,CACH",
  "names": ["getTransactionsByHashes", "pendingTransactions", "hashes", "tx", "responseData", "getServerTransactionsByHashes", "transaction", "txOnNetwork", "txResponse"]
}
