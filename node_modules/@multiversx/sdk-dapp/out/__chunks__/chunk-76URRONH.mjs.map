{
  "version": 3,
  "sources": ["../../src/providers/helpers/emptyProvider.ts"],
  "sourcesContent": ["import { Message, Transaction } from '@multiversx/sdk-core';\nimport {\n  IDAppProviderAccount,\n  IDAppProviderOptions\n} from '@multiversx/sdk-dapp-utils/out';\nimport {\n  IProvider,\n  ProviderType,\n  ProviderTypeEnum\n} from 'providers/types/providerFactory.types';\n\nimport { EngineTypes } from 'utils/walletconnect/__sdkWalletconnectProvider';\n\nconst notInitializedError = (caller: string) => {\n  return `Unable to perform ${caller}, Provider not initialized`;\n};\n\nexport class EmptyProvider implements IProvider {\n  init(): Promise<boolean> {\n    return Promise.resolve(false);\n  }\n\n  login<TOptions = { callbackUrl?: string } | undefined, TResponse = string>(\n    options?: TOptions\n  ): Promise<TResponse> {\n    throw new Error(notInitializedError(`login with options: ${options}`));\n  }\n\n  logout<TOptions = { callbackUrl?: string }, TResponse = boolean>(\n    options?: TOptions\n  ): Promise<TResponse> {\n    throw new Error(notInitializedError(`logout with options: ${options}`));\n  }\n\n  getAccount(): IDAppProviderAccount | null {\n    throw new Error(notInitializedError('unable to get account'));\n  }\n  setAccount(account: IDAppProviderAccount): void {\n    throw new Error(\n      notInitializedError(`unable to set account with: ${account}`)\n    );\n  }\n\n  isInitialized(): boolean {\n    return false;\n  }\n\n  isConnected(): boolean {\n    return false;\n  }\n\n  sendTransaction?<\n    TOptions = { callbackUrl?: string },\n    TResponse = Transaction\n  >(transaction: Transaction, options?: TOptions): Promise<TResponse> {\n    throw new Error(\n      notInitializedError(\n        `sendTransaction with transactions: ${transaction} options: ${options}`\n      )\n    );\n  }\n\n  signTransaction<TOptions = { callbackUrl?: string }, TResponse = Transaction>(\n    transaction: Transaction,\n    options?: TOptions\n  ): Promise<TResponse> {\n    throw new Error(\n      notInitializedError(\n        `signTransaction with transactions: ${JSON.stringify(transaction)} options: ${options}`\n      )\n    );\n  }\n\n  signTransactions<T>(transactions: T[]): Promise<T[]> {\n    throw new Error(\n      notInitializedError(\n        `signTransactions with transactions: ${JSON.stringify(transactions)}`\n      )\n    );\n  }\n\n  signMessage(\n    message: Message,\n    options?: IDAppProviderOptions\n  ): Promise<Message | null> {\n    throw new Error(\n      notInitializedError(`signMessage with ${message} and options ${options}`)\n    );\n  }\n\n  sendCustomMessage?({\n    method,\n    params\n  }: {\n    method: string;\n    params: any;\n  }): Promise<any> {\n    throw new Error(\n      notInitializedError(\n        `sendCustomMessage with method: ${method} params: ${params}`\n      )\n    );\n  }\n\n  sendCustomRequest?(options?: {\n    request: EngineTypes.RequestParams['request'];\n  }): Promise<any> {\n    throw new Error(\n      notInitializedError(`sendSessionEvent with options: ${options}`)\n    );\n  }\n\n  async getAddress(): Promise<string | undefined> {\n    throw new Error(notInitializedError('getAddress'));\n  }\n\n  getType(): ProviderType {\n    return ProviderTypeEnum.none;\n  }\n}\n\nexport const emptyProvider = new EmptyProvider();\n"],
  "mappings": "yCAaA,IAAMA,EAAuBC,GACpB,qBAAqBA,CAAM,6BAGvBC,EAAN,KAAyC,CAC9C,MAAyB,CACvB,OAAO,QAAQ,QAAQ,EAAK,CAC9B,CAEA,MACEC,EACoB,CACpB,MAAM,IAAI,MAAMH,EAAoB,uBAAuBG,CAAO,EAAE,CAAC,CACvE,CAEA,OACEA,EACoB,CACpB,MAAM,IAAI,MAAMH,EAAoB,wBAAwBG,CAAO,EAAE,CAAC,CACxE,CAEA,YAA0C,CACxC,MAAM,IAAI,MAAMH,EAAoB,uBAAuB,CAAC,CAC9D,CACA,WAAWI,EAAqC,CAC9C,MAAM,IAAI,MACRJ,EAAoB,+BAA+BI,CAAO,EAAE,CAC9D,CACF,CAEA,eAAyB,CACvB,MAAO,EACT,CAEA,aAAuB,CACrB,MAAO,EACT,CAEA,gBAGEC,EAA0BF,EAAwC,CAClE,MAAM,IAAI,MACRH,EACE,sCAAsCK,CAAW,aAAaF,CAAO,EACvE,CACF,CACF,CAEA,gBACEE,EACAF,EACoB,CACpB,MAAM,IAAI,MACRH,EACE,sCAAsC,KAAK,UAAUK,CAAW,CAAC,aAAaF,CAAO,EACvF,CACF,CACF,CAEA,iBAAoBG,EAAiC,CACnD,MAAM,IAAI,MACRN,EACE,uCAAuC,KAAK,UAAUM,CAAY,CAAC,EACrE,CACF,CACF,CAEA,YACEC,EACAJ,EACyB,CACzB,MAAM,IAAI,MACRH,EAAoB,oBAAoBO,CAAO,gBAAgBJ,CAAO,EAAE,CAC1E,CACF,CAEA,kBAAmB,CACjB,OAAAK,EACA,OAAAC,CACF,EAGiB,CACf,MAAM,IAAI,MACRT,EACE,kCAAkCQ,CAAM,YAAYC,CAAM,EAC5D,CACF,CACF,CAEA,kBAAmBN,EAEF,CACf,MAAM,IAAI,MACRH,EAAoB,kCAAkCG,CAAO,EAAE,CACjE,CACF,CAEA,MAAM,YAA0C,CAC9C,MAAM,IAAI,MAAMH,EAAoB,YAAY,CAAC,CACnD,CAEA,SAAwB,CACtB,OAAOU,EAAiB,IAC1B,CACF,EAEaC,EAAgB,IAAIT",
  "names": ["notInitializedError", "caller", "EmptyProvider", "options", "account", "transaction", "transactions", "message", "method", "params", "ProviderTypeEnum", "emptyProvider"]
}
