{
  "version": 3,
  "sources": ["../../src/apiCalls/account/getAccountFromApi.ts"],
  "sourcesContent": ["import { ACCOUNTS_ENDPOINT } from 'apiCalls/endpoints';\nimport { axiosInstance } from 'apiCalls/utils/axiosInstance';\nimport { getCleanApiAddress } from 'apiCalls/utils/getCleanApiAddress';\nimport { TIMEOUT } from 'constants/network.constants';\nimport { AccountType } from 'types/account.types';\n\nexport const accountFetcher = ({\n  address,\n  baseURL\n}: {\n  address: string | null;\n  baseURL: string;\n}) => {\n  const apiAddress = getCleanApiAddress(baseURL);\n  const url = `${apiAddress}/${ACCOUNTS_ENDPOINT}/${address}?withGuardianInfo=true`;\n  // we need to get it with an axios instance because of cross-window user interaction issues\n  return axiosInstance.get(url, {\n    baseURL: apiAddress,\n    timeout: TIMEOUT\n  });\n};\n\nexport const getAccountFromApi = async ({\n  address,\n  baseURL\n}: {\n  address?: string;\n  baseURL: string;\n}) => {\n  if (!address) {\n    return null;\n  }\n\n  try {\n    const { data } = await accountFetcher({ address, baseURL });\n    return data as AccountType;\n  } catch (_err) {\n    console.error('error fetching configuration for ', address);\n  }\n\n  return null;\n};\n"],
  "mappings": "oKAMO,IAAMA,EAAiB,CAAC,CAC7B,QAAAC,EACA,QAAAC,CACF,IAGM,CACJ,IAAMC,EAAaC,EAAmBF,CAAO,EACvCG,EAAM,GAAGF,CAAU,IAAIG,CAAiB,IAAIL,CAAO,yBAEzD,OAAOM,EAAc,IAAIF,EAAK,CAC5B,QAASF,EACT,QAASK,CACX,CAAC,CACH,EAEaC,EAAoB,MAAO,CACtC,QAAAR,EACA,QAAAC,CACF,IAGM,CACJ,GAAI,CAACD,EACH,OAAO,KAGT,GAAI,CACF,GAAM,CAAE,KAAAS,CAAK,EAAI,MAAMV,EAAe,CAAE,QAAAC,EAAS,QAAAC,CAAQ,CAAC,EAC1D,OAAOQ,CACT,MAAe,CACb,QAAQ,MAAM,oCAAqCT,CAAO,CAC5D,CAEA,OAAO,IACT",
  "names": ["accountFetcher", "address", "baseURL", "apiAddress", "getCleanApiAddress", "url", "ACCOUNTS_ENDPOINT", "axiosInstance", "TIMEOUT", "getAccountFromApi", "data"]
}
