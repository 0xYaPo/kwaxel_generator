{
  "version": 3,
  "sources": ["../../src/utils/network/setAxiosInterceptors.ts"],
  "sourcesContent": ["import axios, { AxiosError, InternalAxiosRequestConfig } from 'axios';\n\ninterface InterceptAxiosCallsConfig {\n  authenticatedDomains: string[];\n  bearerToken?: string;\n}\n\nexport const setAxiosInterceptors = ({\n  authenticatedDomains,\n  bearerToken\n}: InterceptAxiosCallsConfig): void => {\n  axios.interceptors.request.clear();\n  axios.interceptors.response.clear();\n\n  axios.interceptors.response.use(\n    (response) => response,\n    (error: AxiosError) => {\n      let url = error.config?.url;\n      if (error.config?.params) {\n        const queryString = new URLSearchParams(error.config.params);\n        url += `?${queryString.toString()}`;\n      }\n      console.error('Axios error for: ', url);\n      return Promise.reject(error);\n    }\n  );\n\n  axios.interceptors.request.use(\n    async (config: InternalAxiosRequestConfig) => {\n      if (\n        authenticatedDomains.includes(String(config?.baseURL)) &&\n        bearerToken\n      ) {\n        config.headers.Authorization = `Bearer ${bearerToken}`;\n      }\n      return config;\n    },\n    (error) => Promise.reject(error)\n  );\n};\n"],
  "mappings": "AAAA,OAAOA,MAAuD,QAOvD,IAAMC,EAAuB,CAAC,CACnC,qBAAAC,EACA,YAAAC,CACF,IAAuC,CACrCH,EAAM,aAAa,QAAQ,MAAM,EACjCA,EAAM,aAAa,SAAS,MAAM,EAElCA,EAAM,aAAa,SAAS,IACzBI,GAAaA,EACbC,GAAsB,CACrB,IAAIC,EAAMD,EAAM,QAAQ,IACxB,GAAIA,EAAM,QAAQ,OAAQ,CACxB,IAAME,EAAc,IAAI,gBAAgBF,EAAM,OAAO,MAAM,EAC3DC,GAAO,IAAIC,EAAY,SAAS,CAAC,EACnC,CACA,eAAQ,MAAM,oBAAqBD,CAAG,EAC/B,QAAQ,OAAOD,CAAK,CAC7B,CACF,EAEAL,EAAM,aAAa,QAAQ,IACzB,MAAOQ,IAEHN,EAAqB,SAAS,OAAOM,GAAQ,OAAO,CAAC,GACrDL,IAEAK,EAAO,QAAQ,cAAgB,UAAUL,CAAW,IAE/CK,GAERH,GAAU,QAAQ,OAAOA,CAAK,CACjC,CACF",
  "names": ["axios", "setAxiosInterceptors", "authenticatedDomains", "bearerToken", "response", "error", "url", "queryString", "config"]
}
