{
  "version": 3,
  "sources": ["../../src/utils/transactions/getInterpretedTransaction/getTransactionValue/helpers/getTitleText.ts"],
  "sourcesContent": ["import { DECIMALS, formatAmount } from 'lib/sdkDappUtils';\nimport { TokenArgumentType } from 'types/serverTransactions.types';\nimport { getIdentifierType } from 'utils/validation/getIdentifierType';\nimport { getTransactionActionNftText } from './getTransactionActionNftText';\nimport {\n  EgldValueDataType,\n  NFTValueDataType,\n  TokenValueDataType\n} from '../types';\n\nexport interface GetTransactionValueReturnType {\n  egldValueData?: EgldValueDataType;\n  tokenValueData?: TokenValueDataType;\n  nftValueData?: NFTValueDataType;\n}\n\nexport const getTitleText = (\n  transactionTokens: TokenArgumentType[]\n): string => {\n  const tokensArray = transactionTokens.map((transactionToken) => {\n    const { isNft } = getIdentifierType(transactionToken.type);\n    if (isNft) {\n      const { badgeText, tokenFormattedAmount, tokenLinkText } =\n        getTransactionActionNftText({\n          token: transactionToken\n        });\n\n      const badge = badgeText != null ? `(${badgeText}) ` : '';\n\n      const value = `${badge}${tokenFormattedAmount} ${tokenLinkText}`;\n      return value;\n    }\n\n    const tokenFormattedAmount = transactionToken.value\n      ? formatAmount({\n          input: transactionToken.value,\n          decimals: transactionToken.decimals ?? DECIMALS,\n          digits: 2,\n          addCommas: true\n        })\n      : null;\n\n    const identifier = transactionToken.collection\n      ? transactionToken.identifier\n      : transactionToken.token;\n\n    const value = `${tokenFormattedAmount} ${transactionToken.ticker} (${identifier})`;\n    return value;\n  });\n\n  const joinedTokensWithLineBreak = decodeURI(tokensArray.join('%0A'));\n  return joinedTokensWithLineBreak;\n};\n"],
  "mappings": "kIAgBO,IAAMA,EACXC,GACW,CACX,IAAMC,EAAcD,EAAkB,IAAKE,GAAqB,CAC9D,GAAM,CAAE,MAAAC,CAAM,EAAIC,EAAkBF,EAAiB,IAAI,EACzD,GAAIC,EAAO,CACT,GAAM,CAAE,UAAAE,EAAW,qBAAAC,EAAsB,cAAAC,CAAc,EACrDC,EAA4B,CAC1B,MAAON,CACT,CAAC,EAKH,MADc,GAFAG,GAAa,KAAO,IAAIA,CAAS,KAAO,EAEhC,GAAGC,CAAoB,IAAIC,CAAa,EAEhE,CAEA,IAAMD,EAAuBJ,EAAiB,MAC1CO,EAAa,CACX,MAAOP,EAAiB,MACxB,SAAUA,EAAiB,UAAYQ,EACvC,OAAQ,EACR,UAAW,EACb,CAAC,EACD,KAEEC,EAAaT,EAAiB,WAChCA,EAAiB,WACjBA,EAAiB,MAGrB,MADc,GAAGI,CAAoB,IAAIJ,EAAiB,MAAM,KAAKS,CAAU,GAEjF,CAAC,EAGD,OADkC,UAAUV,EAAY,KAAK,KAAK,CAAC,CAErE",
  "names": ["getTitleText", "transactionTokens", "tokensArray", "transactionToken", "isNft", "getIdentifierType", "badgeText", "tokenFormattedAmount", "tokenLinkText", "getTransactionActionNftText", "formatAmount", "DECIMALS", "identifier"]
}
