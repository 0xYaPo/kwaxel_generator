{
  "version": 3,
  "sources": ["../../src/store/actions/sharedActions/sharedActions.ts"],
  "sourcesContent": ["import { Address } from 'lib/sdkCore';\nimport { ProviderType } from 'providers/types/providerFactory.types';\nimport { resetStore } from 'store/middleware/logoutMiddleware';\nimport { getStore } from 'store/store';\n\nexport const logoutAction = () => getStore().setState(resetStore);\nexport interface LoginActionPayloadType<T extends ProviderType = ProviderType> {\n  address: string;\n  providerType: T;\n}\n\nexport const loginAction = ({\n  address,\n  providerType\n}: LoginActionPayloadType) => {\n  getStore().setState(\n    ({ account, loginInfo }) => {\n      account.address = address;\n      account.publicKey = new Address(address).toHex();\n\n      if (loginInfo) {\n        loginInfo.providerType = providerType;\n      }\n    },\n    false,\n    'loginAction'\n  );\n};\n"],
  "mappings": "yFAKO,IAAMA,EAAe,IAAMC,EAAS,EAAE,SAASC,CAAU,EAMnDC,EAAc,CAAC,CAC1B,QAAAC,EACA,aAAAC,CACF,IAA8B,CAC5BJ,EAAS,EAAE,SACT,CAAC,CAAE,QAAAK,EAAS,UAAAC,CAAU,IAAM,CAC1BD,EAAQ,QAAUF,EAClBE,EAAQ,UAAY,IAAIE,EAAQJ,CAAO,EAAE,MAAM,EAE3CG,IACFA,EAAU,aAAeF,EAE7B,EACA,GACA,aACF,CACF",
  "names": ["logoutAction", "getStore", "resetStore", "loginAction", "address", "providerType", "account", "loginInfo", "Address"]
}
