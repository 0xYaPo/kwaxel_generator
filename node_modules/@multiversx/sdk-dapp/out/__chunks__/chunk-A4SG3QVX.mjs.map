{
  "version": 3,
  "sources": ["../../src/providers/strategies/LedgerProviderStrategy/helpers/getLedgerProvider.ts"],
  "sourcesContent": ["import { HWProvider } from '@multiversx/sdk-hw-provider';\nimport { getIsLoggedIn } from 'methods/account/getIsLoggedIn';\nimport { getAccountProvider } from 'providers/helpers/accountProvider';\nimport { ledgerAccountSelector } from 'store/selectors/accountSelectors';\nimport { ledgerLoginSelector } from 'store/selectors/loginInfoSelectors';\nimport { getState } from 'store/store';\nimport { getLedgerConfiguration } from './getLedgerConfiguration';\n\nexport async function getLedgerProvider(props?: {\n  shouldInitProvider?: boolean; // provider will be initialized if not logged in\n}) {\n  const isLoggedIn = getIsLoggedIn();\n  const shouldInitProvider = props?.shouldInitProvider || !isLoggedIn;\n  const ledgerLogin = ledgerLoginSelector(getState());\n  const ledgerAccount = ledgerAccountSelector(getState());\n  const provider = getAccountProvider();\n\n  const ledgerProvider = new HWProvider();\n\n  const initHWProvider = async () => {\n    const hasAddressIndex = ledgerLogin?.index != null;\n\n    if (provider instanceof HWProvider && provider.isInitialized()) {\n      if (hasAddressIndex) {\n        await provider.setAddressIndex(ledgerLogin.index);\n      }\n\n      return provider;\n    }\n\n    if (shouldInitProvider) {\n      const isInitialized = await ledgerProvider.init();\n      if (!isInitialized) {\n        throw new Error('Failed to initialize Ledger Provider');\n      }\n    }\n\n    if (hasAddressIndex) {\n      await ledgerProvider.setAddressIndex(ledgerLogin.index);\n    }\n\n    return ledgerProvider;\n  };\n\n  try {\n    if (!shouldInitProvider && ledgerAccount) {\n      return {\n        ledgerProvider,\n        ledgerConfig: {\n          version: ledgerAccount.version,\n          dataEnabled: ledgerAccount.hasContractDataEnabled\n        }\n      };\n    }\n\n    const initializedLedgerProvider = await initHWProvider();\n    const ledgerConfig = await getLedgerConfiguration(\n      initializedLedgerProvider\n    );\n    return { ledgerProvider: initializedLedgerProvider, ledgerConfig };\n  } catch (err) {\n    console.error('Could not initialize ledger app', err);\n\n    throw err;\n  }\n}\n"],
  "mappings": "sPAAA,OAAS,cAAAA,MAAkB,8BAQ3B,eAAsBC,EAAkBC,EAErC,CACD,IAAMC,EAAaC,EAAc,EAC3BC,EAAqBH,GAAO,oBAAsB,CAACC,EACnDG,EAAcC,EAAoBC,EAAS,CAAC,EAC5CC,EAAgBC,EAAsBF,EAAS,CAAC,EAChDG,EAAWC,EAAmB,EAE9BC,EAAiB,IAAIC,EAErBC,EAAiB,SAAY,CACjC,IAAMC,EAAkBV,GAAa,OAAS,KAE9C,GAAIK,aAAoBG,GAAcH,EAAS,cAAc,EAC3D,OAAIK,GACF,MAAML,EAAS,gBAAgBL,EAAY,KAAK,EAG3CK,EAGT,GAAIN,GAEE,CADkB,MAAMQ,EAAe,KAAK,EAE9C,MAAM,IAAI,MAAM,sCAAsC,EAI1D,OAAIG,GACF,MAAMH,EAAe,gBAAgBP,EAAY,KAAK,EAGjDO,CACT,EAEA,GAAI,CACF,GAAI,CAACR,GAAsBI,EACzB,MAAO,CACL,eAAAI,EACA,aAAc,CACZ,QAASJ,EAAc,QACvB,YAAaA,EAAc,sBAC7B,CACF,EAGF,IAAMQ,EAA4B,MAAMF,EAAe,EACjDG,EAAe,MAAMC,EACzBF,CACF,EACA,MAAO,CAAE,eAAgBA,EAA2B,aAAAC,CAAa,CACnE,OAASE,EAAK,CACZ,cAAQ,MAAM,kCAAmCA,CAAG,EAE9CA,CACR,CACF",
  "names": ["HWProvider", "getLedgerProvider", "props", "isLoggedIn", "getIsLoggedIn", "shouldInitProvider", "ledgerLogin", "ledgerLoginSelector", "getState", "ledgerAccount", "ledgerAccountSelector", "provider", "getAccountProvider", "ledgerProvider", "HWProvider", "initHWProvider", "hasAddressIndex", "initializedLedgerProvider", "ledgerConfig", "getLedgerConfiguration", "err"]
}
