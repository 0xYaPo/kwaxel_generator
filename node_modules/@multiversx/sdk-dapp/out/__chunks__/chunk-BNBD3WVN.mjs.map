{
  "version": 3,
  "sources": ["../../src/providers/strategies/helpers/signTransactions/helpers/getMultiEsdtTransferData/helpers/parseMultiEsdtTransferDataForMultipleTransactions.ts"],
  "sourcesContent": ["import type { Transaction } from '@multiversx/sdk-core';\n\nimport {\n  MultiSignTransactionType,\n  TransactionsDataTokensType\n} from 'types/transactions.types';\nimport { decodeBase64 } from 'utils/decoders/base64Utils';\nimport { getTokenFromData } from './getTokenFromData';\nimport { parseMultiEsdtTransferData } from './parseMultiEsdtTransferData';\n\nexport function parseMultiEsdtTransferDataForMultipleTransactions({\n  transactions\n}: {\n  transactions?: Transaction[];\n}) {\n  const allTransactions: MultiSignTransactionType[] = [];\n  const parsedTransactionsByDataField: TransactionsDataTokensType = {};\n\n  if (!transactions || transactions.length === 0) {\n    return {\n      allTransactions,\n      parsedTransactionsByDataField\n    };\n  }\n\n  transactions.forEach((transaction, transactionIndex) => {\n    const txData = decodeBase64(transaction.data.toString() ?? '');\n    const multiTxs = parseMultiEsdtTransferData(txData);\n\n    if (multiTxs.length > 0) {\n      multiTxs.forEach((trx, idx) => {\n        const isLastView = idx === multiTxs.length - 1;\n\n        const newTx: MultiSignTransactionType = {\n          transaction,\n          multiTxData: trx.data,\n          transactionIndex: idx,\n          needsSigning: isLastView\n        };\n\n        parsedTransactionsByDataField[trx.data] = {\n          tokenId: trx.token ? trx.token : '',\n          amount: trx.amount ? trx.amount : '',\n          type: trx.type,\n          nonce: trx.nonce ? trx.nonce : '',\n          multiTxData: trx.data,\n          receiver: trx.receiver\n        };\n\n        allTransactions.push(newTx);\n      });\n    } else {\n      const transactionData = decodeBase64(transaction.data.toString() ?? '');\n\n      const { tokenId, amount } = getTokenFromData(transactionData);\n\n      if (tokenId) {\n        parsedTransactionsByDataField[transactionData] = {\n          tokenId,\n          amount,\n          receiver: transaction.receiver.toBech32()\n        };\n      }\n      allTransactions.push({\n        transaction,\n        transactionIndex,\n        multiTxData: transactionData,\n        needsSigning: true\n      });\n    }\n  });\n\n  return {\n    allTransactions,\n    parsedTransactionsByDataField\n  };\n}\n"],
  "mappings": "sHAUO,SAASA,EAAkD,CAChE,aAAAC,CACF,EAEG,CACD,IAAMC,EAA8C,CAAC,EAC/CC,EAA4D,CAAC,EAEnE,MAAI,CAACF,GAAgBA,EAAa,SAAW,EACpC,CACL,gBAAAC,EACA,8BAAAC,CACF,GAGFF,EAAa,QAAQ,CAACG,EAAaC,IAAqB,CACtD,IAAMC,EAASC,EAAaH,EAAY,KAAK,SAAS,GAAK,EAAE,EACvDI,EAAWC,EAA2BH,CAAM,EAElD,GAAIE,EAAS,OAAS,EACpBA,EAAS,QAAQ,CAACE,EAAKC,IAAQ,CAC7B,IAAMC,EAAaD,IAAQH,EAAS,OAAS,EAEvCK,EAAkC,CACtC,YAAAT,EACA,YAAaM,EAAI,KACjB,iBAAkBC,EAClB,aAAcC,CAChB,EAEAT,EAA8BO,EAAI,IAAI,EAAI,CACxC,QAASA,EAAI,MAAQA,EAAI,MAAQ,GACjC,OAAQA,EAAI,OAASA,EAAI,OAAS,GAClC,KAAMA,EAAI,KACV,MAAOA,EAAI,MAAQA,EAAI,MAAQ,GAC/B,YAAaA,EAAI,KACjB,SAAUA,EAAI,QAChB,EAEAR,EAAgB,KAAKW,CAAK,CAC5B,CAAC,MACI,CACL,IAAMC,EAAkBP,EAAaH,EAAY,KAAK,SAAS,GAAK,EAAE,EAEhE,CAAE,QAAAW,EAAS,OAAAC,CAAO,EAAIC,EAAiBH,CAAe,EAExDC,IACFZ,EAA8BW,CAAe,EAAI,CAC/C,QAAAC,EACA,OAAAC,EACA,SAAUZ,EAAY,SAAS,SAAS,CAC1C,GAEFF,EAAgB,KAAK,CACnB,YAAAE,EACA,iBAAAC,EACA,YAAaS,EACb,aAAc,EAChB,CAAC,CACH,CACF,CAAC,EAEM,CACL,gBAAAZ,EACA,8BAAAC,CACF,EACF",
  "names": ["parseMultiEsdtTransferDataForMultipleTransactions", "transactions", "allTransactions", "parsedTransactionsByDataField", "transaction", "transactionIndex", "txData", "decodeBase64", "multiTxs", "parseMultiEsdtTransferData", "trx", "idx", "isLastView", "newTx", "transactionData", "tokenId", "amount", "getTokenFromData"]
}
