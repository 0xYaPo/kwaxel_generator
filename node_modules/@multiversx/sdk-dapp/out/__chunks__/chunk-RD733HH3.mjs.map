{
  "version": 3,
  "sources": ["../../src/methods/trackTransactions/trackTransactions.ts"],
  "sourcesContent": ["import { subscriptions } from 'constants/storage.constants';\nimport {\n  WebsocketConnectionStatusEnum,\n  websocketConnection\n} from 'constants/websocket.constants';\nimport { websocketEventSelector } from 'store/selectors/accountSelectors';\nimport { getStore } from 'store/store';\nimport { SubscriptionsEnum } from 'types/subscriptions.type';\nimport { checkTransactionStatus } from './helpers/checkTransactionStatus';\nimport { getPollingInterval } from './helpers/getPollingInterval';\n\n/**\n * Tracks transactions using websocket or polling\n * @returns stopTransactionsTracking function\n */\nexport async function trackTransactions() {\n  const store = getStore();\n  const pollingInterval = getPollingInterval();\n  let pollingIntervalRef: ReturnType<typeof setTimeout> | null = null;\n  let websocketStatusCheckIntervalRef: ReturnType<typeof setTimeout> | null =\n    null;\n  let timestamp = websocketEventSelector(store.getState())?.timestamp;\n\n  const recheckStatus = () => {\n    checkTransactionStatus();\n  };\n\n  const startPolling = () => {\n    pollingIntervalRef ??= setInterval(recheckStatus, pollingInterval);\n  };\n\n  const stopPolling = () => {\n    if (pollingIntervalRef) {\n      clearInterval(pollingIntervalRef);\n      pollingIntervalRef = null;\n    }\n  };\n\n  const setupWebSocketTracking = () => {\n    stopPolling();\n    const unsubscribeWebsocketEvent = store.subscribe(\n      ({ account: { websocketEvent } }) => {\n        if (websocketEvent?.message && timestamp !== websocketEvent.timestamp) {\n          timestamp = websocketEvent.timestamp;\n          recheckStatus();\n        }\n      }\n    );\n\n    subscriptions.set(\n      SubscriptionsEnum.websocketEventReceived,\n      unsubscribeWebsocketEvent\n    );\n  };\n\n  const startWatchingWebsocketStatus = () => {\n    if (\n      websocketConnection.status !==\n        WebsocketConnectionStatusEnum.NOT_INITIALIZED ||\n      websocketStatusCheckIntervalRef\n    ) {\n      return;\n    }\n\n    websocketStatusCheckIntervalRef = setInterval(() => {\n      if (\n        websocketConnection.status === WebsocketConnectionStatusEnum.COMPLETED\n      ) {\n        clearInterval(websocketStatusCheckIntervalRef!);\n        websocketStatusCheckIntervalRef = null;\n        setupWebSocketTracking();\n      }\n    }, 1000);\n  };\n\n  // Initial execution\n  recheckStatus();\n\n  const stopTransactionsTracking = () => {\n    stopPolling();\n    if (websocketStatusCheckIntervalRef) {\n      clearInterval(websocketStatusCheckIntervalRef);\n      websocketStatusCheckIntervalRef = null;\n    }\n  };\n\n  const unsubscribeWebsocketStatus = store.subscribe(\n    ({ account: { address }, config: { websocketStatus } }, prevState) => {\n      const hasStatusChange =\n        prevState.config.websocketStatus !== websocketStatus;\n\n      if (!hasStatusChange) {\n        return;\n      }\n\n      switch (websocketStatus) {\n        case WebsocketConnectionStatusEnum.COMPLETED:\n          setupWebSocketTracking();\n          break;\n        case WebsocketConnectionStatusEnum.PENDING:\n          startPolling();\n          startWatchingWebsocketStatus();\n          break;\n        default:\n          address ? startPolling() : stopTransactionsTracking();\n          break;\n      }\n    }\n  );\n\n  subscriptions.set(\n    SubscriptionsEnum.websocketStatusChanged,\n    unsubscribeWebsocketStatus\n  );\n  subscriptions.set(\n    SubscriptionsEnum.websocketEventReceived,\n    stopTransactionsTracking\n  );\n  return { stopTransactionsTracking };\n}\n"],
  "mappings": "sPAeA,eAAsBA,GAAoB,CACxC,IAAMC,EAAQC,EAAS,EACjBC,EAAkBC,EAAmB,EACvCC,EAA2D,KAC3DC,EACF,KACEC,EAAYC,EAAuBP,EAAM,SAAS,CAAC,GAAG,UAEpDQ,EAAgB,IAAM,CAC1BC,EAAuB,CACzB,EAEMC,EAAe,IAAM,CACzBN,IAAuB,YAAYI,EAAeN,CAAe,CACnE,EAEMS,EAAc,IAAM,CACpBP,IACF,cAAcA,CAAkB,EAChCA,EAAqB,KAEzB,EAEMQ,EAAyB,IAAM,CACnCD,EAAY,EACZ,IAAME,EAA4Bb,EAAM,UACtC,CAAC,CAAE,QAAS,CAAE,eAAAc,CAAe,CAAE,IAAM,CAC/BA,GAAgB,SAAWR,IAAcQ,EAAe,YAC1DR,EAAYQ,EAAe,UAC3BN,EAAc,EAElB,CACF,EAEAO,EAAc,6BAEZF,CACF,CACF,EAEMG,EAA+B,IAAM,CAEvCC,EAAoB,4BAEpBZ,IAKFA,EAAkC,YAAY,IAAM,CAEhDY,EAAoB,uBAEpB,cAAcZ,CAAgC,EAC9CA,EAAkC,KAClCO,EAAuB,EAE3B,EAAG,GAAI,EACT,EAGAJ,EAAc,EAEd,IAAMU,EAA2B,IAAM,CACrCP,EAAY,EACRN,IACF,cAAcA,CAA+B,EAC7CA,EAAkC,KAEtC,EAEMc,EAA6BnB,EAAM,UACvC,CAAC,CAAE,QAAS,CAAE,QAAAoB,CAAQ,EAAG,OAAQ,CAAE,gBAAAC,CAAgB,CAAE,EAAGC,IAAc,CAIpE,GAFEA,EAAU,OAAO,kBAAoBD,EAMvC,OAAQA,EAAiB,CACvB,gBACET,EAAuB,EACvB,MACF,cACEF,EAAa,EACbM,EAA6B,EAC7B,MACF,QACEI,EAAUV,EAAa,EAAIQ,EAAyB,EACpD,KACJ,CACF,CACF,EAEA,OAAAH,EAAc,6BAEZI,CACF,EACAJ,EAAc,6BAEZG,CACF,EACO,CAAE,yBAAAA,CAAyB,CACpC",
  "names": ["trackTransactions", "store", "getStore", "pollingInterval", "getPollingInterval", "pollingIntervalRef", "websocketStatusCheckIntervalRef", "timestamp", "websocketEventSelector", "recheckStatus", "checkTransactionStatus", "startPolling", "stopPolling", "setupWebSocketTracking", "unsubscribeWebsocketEvent", "websocketEvent", "subscriptions", "startWatchingWebsocketStatus", "websocketConnection", "stopTransactionsTracking", "unsubscribeWebsocketStatus", "address", "websocketStatus", "prevState"]
}
