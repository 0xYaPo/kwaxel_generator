{
  "version": 3,
  "sources": ["../../src/services/nativeAuth/helpers/decodeLoginToken.ts"],
  "sourcesContent": ["import isString from 'lodash.isstring';\nimport { decodeBase64 } from 'utils/decoders/base64Utils';\n\nexport interface DecodedLoginTokenType {\n  blockHash: string;\n  extraInfo?: { timestamp: number };\n  origin: string;\n  ttl: number;\n}\n\nexport const decodeLoginToken = (\n  loginToken: string\n): DecodedLoginTokenType | null => {\n  if (!loginToken || !isString(loginToken)) {\n    return null;\n  }\n\n  const parts = loginToken.split('.');\n\n  if (parts.length !== 4) {\n    return null;\n  }\n\n  try {\n    const [origin, blockHash, ttl, extraInfo] = parts;\n    const parsedExtraInfo = JSON.parse(decodeBase64(extraInfo));\n    const parsedOrigin = decodeBase64(origin);\n\n    return {\n      ttl: Number(ttl),\n      extraInfo: parsedExtraInfo,\n      origin: parsedOrigin,\n      blockHash\n    };\n  } catch (e) {\n    console.error(`Error trying to decode ${loginToken}:`, e);\n\n    return null;\n  }\n};\n"],
  "mappings": "yCAAA,OAAOA,MAAc,kBAUd,IAAMC,EACXC,GACiC,CACjC,GAAI,CAACA,GAAc,CAACC,EAASD,CAAU,EACrC,OAAO,KAGT,IAAME,EAAQF,EAAW,MAAM,GAAG,EAElC,GAAIE,EAAM,SAAW,EACnB,OAAO,KAGT,GAAI,CACF,GAAM,CAACC,EAAQC,EAAWC,EAAKC,CAAS,EAAIJ,EACtCK,EAAkB,KAAK,MAAMC,EAAaF,CAAS,CAAC,EACpDG,EAAeD,EAAaL,CAAM,EAExC,MAAO,CACL,IAAK,OAAOE,CAAG,EACf,UAAWE,EACX,OAAQE,EACR,UAAAL,CACF,CACF,OAASM,EAAG,CACV,eAAQ,MAAM,0BAA0BV,CAAU,IAAKU,CAAC,EAEjD,IACT,CACF",
  "names": ["isString", "decodeLoginToken", "loginToken", "isString", "parts", "origin", "blockHash", "ttl", "extraInfo", "parsedExtraInfo", "decodeBase64", "parsedOrigin", "e"]
}
