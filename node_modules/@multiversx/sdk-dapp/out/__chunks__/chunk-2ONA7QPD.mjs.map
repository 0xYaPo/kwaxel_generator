{
  "version": 3,
  "sources": ["../../src/__mocks__/server.ts"],
  "sourcesContent": ["import {\n  DefaultBodyType,\n  PathParams,\n  ResponseComposition,\n  rest,\n  RestContext,\n  RestRequest\n} from 'msw';\nimport { setupServer } from 'msw/node';\nimport { testAddress, testNetwork } from './accountConfig';\nimport {\n  account,\n  blocks,\n  dappConfig,\n  networkConfig,\n  socketResponse,\n  websocketConfig\n} from './data';\nimport { wrapEgldContract } from './data/wrapEgldContract';\n\nexport const mockResponse =\n  <T extends DefaultBodyType>(body: T) =>\n  (\n    _req: RestRequest<never, PathParams<string>>,\n    res: ResponseComposition<DefaultBodyType>,\n    ctx: RestContext\n  ) => {\n    return res(ctx.status(200), ctx.json(body));\n  };\n\nconst handlers = [\n  rest.get(`${testNetwork.apiAddress}/dapp/config`, mockResponse(dappConfig)),\n\n  rest.get(\n    `${testNetwork.apiAddress}/network/config`,\n    mockResponse(networkConfig)\n  ),\n  rest.get(\n    `https://${websocketConfig.url}/socket.io/`,\n    mockResponse(socketResponse)\n  ),\n  rest.get(\n    `${testNetwork.apiAddress}/websocket/config`,\n    mockResponse(websocketConfig)\n  ),\n  rest.get(\n    `${testNetwork.apiAddress}/accounts/${testAddress}`,\n    mockResponse(account)\n  ),\n  rest.get(\n    `${testNetwork.apiAddress}/accounts/${wrapEgldContract.address}`,\n    mockResponse(wrapEgldContract)\n  ),\n  rest.get(`${testNetwork.apiAddress}/blocks`, mockResponse(blocks))\n];\n\n// This configures a request mocking server with the given request handlers.\nconst server = setupServer(...handlers);\n\nexport { server, rest };\n"],
  "mappings": "0UAAA,OAIE,QAAAA,MAGK,MACP,OAAS,eAAAC,MAAmB,WAYrB,IAAMC,EACiBC,GAC5B,CACEC,EACAC,EACAC,IAEOD,EAAIC,EAAI,OAAO,GAAG,EAAGA,EAAI,KAAKH,CAAI,CAAC,EAGxCI,EAAW,CACfC,EAAK,IAAI,GAAGC,EAAY,UAAU,eAAgBP,EAAaQ,CAAU,CAAC,EAE1EF,EAAK,IACH,GAAGC,EAAY,UAAU,kBACzBP,EAAaS,CAAa,CAC5B,EACAH,EAAK,IACH,WAAWI,EAAgB,GAAG,cAC9BV,EAAaW,CAAc,CAC7B,EACAL,EAAK,IACH,GAAGC,EAAY,UAAU,oBACzBP,EAAaU,CAAe,CAC9B,EACAJ,EAAK,IACH,GAAGC,EAAY,UAAU,aAAaK,CAAW,GACjDZ,EAAaa,CAAO,CACtB,EACAP,EAAK,IACH,GAAGC,EAAY,UAAU,aAAaO,EAAiB,OAAO,GAC9Dd,EAAac,CAAgB,CAC/B,EACAR,EAAK,IAAI,GAAGC,EAAY,UAAU,UAAWP,EAAae,CAAM,CAAC,CACnE,EAGMC,EAASC,EAAY,GAAGZ,CAAQ",
  "names": ["rest", "setupServer", "mockResponse", "body", "_req", "res", "ctx", "handlers", "rest", "testNetwork", "dappConfig", "networkConfig", "websocketConfig", "socketResponse", "testAddress", "account", "wrapEgldContract", "blocks", "server", "setupServer"]
}
