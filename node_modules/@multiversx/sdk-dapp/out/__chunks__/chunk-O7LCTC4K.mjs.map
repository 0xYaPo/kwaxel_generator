{
  "version": 3,
  "sources": ["../../src/apiCalls/utils/axiosInstance.ts"],
  "sourcesContent": ["import { buildAxiosFetch } from '@lifeomic/axios-fetch';\nimport axios, { AxiosRequestConfig, AxiosResponse } from 'axios';\n\ntype RequestInit = {\n  method?: string;\n  headers?: Record<string, string>;\n  body?: string;\n  [key: string]: any;\n};\n\n// Needs to be used beacause an async call made after cross-window user interaction makes the dapp unresponsive\n\nconst fetch = buildAxiosFetch(axios);\n\nconst getFormattedAxiosResponse = async <T>(response: Response, config?: T) => {\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n\n  // Clone the response to be able to read it twice (for status and data)\n  const clonedResponse = response.clone();\n\n  // Parse the JSON body asynchronously\n  const jsonPromise = clonedResponse.json();\n\n  // Return the standardized response object\n  const [responseData] = await Promise.all([jsonPromise]);\n  return {\n    data: responseData,\n    status: response.status,\n    statusText: response.statusText,\n    headers: response.headers,\n    config\n  };\n};\n\nasync function customPost<T = any, R = AxiosResponse<T, any>, D = any>(\n  url: string,\n  data?: D,\n  config?: AxiosRequestConfig<D> | undefined\n): Promise<R> {\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      body: data ? JSON.stringify(data) : undefined,\n      headers: {\n        'Content-Type': 'application/json',\n        ...(config?.headers || {})\n      },\n      ...config\n    } as RequestInit);\n\n    return getFormattedAxiosResponse(response, config) as unknown as Promise<R>;\n  } catch (error) {\n    console.error('Fetch Error:', error);\n    throw error;\n  }\n}\n\nasync function customGet<T = any, R = AxiosResponse<T, any>, D = any>(\n  url: string,\n  config?: AxiosRequestConfig<D> | undefined\n): Promise<R> {\n  try {\n    const response = await fetch(url, config as RequestInit);\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    return getFormattedAxiosResponse(response, config) as unknown as Promise<R>;\n  } catch (error) {\n    console.error('Fetch Error:', error);\n    throw error;\n  }\n}\n\nasync function customPatch<T = any, R = AxiosResponse<T, any>, D = any>(\n  url: string,\n  data?: D,\n  config?: AxiosRequestConfig<D> | undefined\n): Promise<R> {\n  try {\n    const response = await fetch(url, {\n      method: 'PATCH',\n      body: data ? JSON.stringify(data) : undefined,\n      headers: config?.headers || {},\n      ...config\n    } as RequestInit);\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n\n    return getFormattedAxiosResponse(response, config) as unknown as Promise<R>;\n  } catch (error) {\n    console.error('Fetch Error:', error);\n    throw error;\n  }\n}\n\nconst axiosInstance = axios.create();\naxiosInstance.get = customGet;\naxiosInstance.post = customPost;\naxiosInstance.patch = customPatch;\n\nexport { axiosInstance };\n"],
  "mappings": "AAAA,OAAS,mBAAAA,MAAuB,wBAChC,OAAOC,MAAkD,QAWzD,IAAMC,EAAQF,EAAgBC,CAAK,EAE7BE,EAA4B,MAAUC,EAAoBC,IAAe,CAC7E,GAAI,CAACD,EAAS,GACZ,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAO1D,IAAME,EAHiBF,EAAS,MAAM,EAGH,KAAK,EAGlC,CAACG,CAAY,EAAI,MAAM,QAAQ,IAAI,CAACD,CAAW,CAAC,EACtD,MAAO,CACL,KAAMC,EACN,OAAQH,EAAS,OACjB,WAAYA,EAAS,WACrB,QAASA,EAAS,QAClB,OAAAC,CACF,CACF,EAEA,eAAeG,EACbC,EACAC,EACAL,EACY,CACZ,GAAI,CACF,IAAMD,EAAW,MAAMF,EAAMO,EAAK,CAChC,OAAQ,OACR,KAAMC,EAAO,KAAK,UAAUA,CAAI,EAAI,OACpC,QAAS,CACP,eAAgB,mBAChB,GAAIL,GAAQ,SAAW,CAAC,CAC1B,EACA,GAAGA,CACL,CAAgB,EAEhB,OAAOF,EAA0BC,EAAUC,CAAM,CACnD,OAASM,EAAO,CACd,cAAQ,MAAM,eAAgBA,CAAK,EAC7BA,CACR,CACF,CAEA,eAAeC,EACbH,EACAJ,EACY,CACZ,GAAI,CACF,IAAMD,EAAW,MAAMF,EAAMO,EAAKJ,CAAqB,EACvD,GAAI,CAACD,EAAS,GACZ,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAG1D,OAAOD,EAA0BC,EAAUC,CAAM,CACnD,OAASM,EAAO,CACd,cAAQ,MAAM,eAAgBA,CAAK,EAC7BA,CACR,CACF,CAEA,eAAeE,EACbJ,EACAC,EACAL,EACY,CACZ,GAAI,CACF,IAAMD,EAAW,MAAMF,EAAMO,EAAK,CAChC,OAAQ,QACR,KAAMC,EAAO,KAAK,UAAUA,CAAI,EAAI,OACpC,QAASL,GAAQ,SAAW,CAAC,EAC7B,GAAGA,CACL,CAAgB,EAEhB,GAAI,CAACD,EAAS,GACZ,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAG1D,OAAOD,EAA0BC,EAAUC,CAAM,CACnD,OAASM,EAAO,CACd,cAAQ,MAAM,eAAgBA,CAAK,EAC7BA,CACR,CACF,CAEA,IAAMG,EAAgBb,EAAM,OAAO,EACnCa,EAAc,IAAMF,EACpBE,EAAc,KAAON,EACrBM,EAAc,MAAQD",
  "names": ["buildAxiosFetch", "axios", "fetch", "getFormattedAxiosResponse", "response", "config", "jsonPromise", "responseData", "customPost", "url", "data", "error", "customGet", "customPatch", "axiosInstance"]
}
