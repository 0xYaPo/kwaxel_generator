{
  "version": 3,
  "sources": ["../../src/store/actions/network/networkActions.ts", "../../src/store/actions/network/initializeNetwork.ts"],
  "sourcesContent": ["import { NetworkType } from 'types/network.types';\nimport { getStore } from '../../store';\n\nexport const initializeNetworkConfig = (newNetwork: NetworkType) =>\n  getStore().setState(\n    ({ network: state }) => {\n      state.network = {\n        ...state.network,\n        ...newNetwork\n      };\n    },\n    false,\n    'initializeNetworkConfig'\n  );\n\nexport { initializeNetwork } from './initializeNetwork';\n", "import { getNetworkConfigFromApi } from 'apiCalls/configuration/getNetworkConfigFromApi';\nimport { getServerConfiguration } from 'apiCalls/configuration/getServerConfiguration';\nimport { fallbackNetworkConfigurations } from 'constants/network.constants';\nimport { emptyNetwork } from 'store/slices/network/emptyNetwork';\nimport { EnvironmentsEnum } from 'types/enums.types';\nimport { NetworkType, CustomNetworkType } from 'types/network.types';\nimport { initializeNetworkConfig } from './networkActions';\n\nexport type InitializeNetworkPropsType = {\n  customNetworkConfig?: CustomNetworkType;\n  environment?: EnvironmentsEnum;\n};\n\nexport const initializeNetwork = async ({\n  customNetworkConfig = {},\n  environment\n}: InitializeNetworkPropsType) => {\n  const fetchConfigFromServer = !customNetworkConfig?.skipFetchFromServer;\n  const customNetworkApiAddress = customNetworkConfig?.apiAddress;\n\n  const isFoundEnv =\n    environment && environment in fallbackNetworkConfigurations;\n\n  const fallbackConfig: NetworkType | Record<string, string> = isFoundEnv\n    ? fallbackNetworkConfigurations[environment as EnvironmentsEnum]\n    : {};\n\n  const baseConfig = {\n    ...emptyNetwork,\n    ...fallbackConfig,\n    ...customNetworkConfig\n  };\n\n  const localConfig: NetworkType = {\n    ...baseConfig,\n    apiTimeout: String(baseConfig.apiTimeout)\n  };\n\n  const fallbackApiAddress = fallbackConfig?.apiAddress;\n\n  if (!isFoundEnv && fetchConfigFromServer) {\n    const apiAddress = customNetworkApiAddress || fallbackApiAddress;\n    const dappConfig = await getServerConfiguration(apiAddress);\n\n    const networkConfig = !localConfig.roundDuration\n      ? await getNetworkConfigFromApi(apiAddress)\n      : null;\n\n    if (networkConfig != null) {\n      localConfig.roundDuration = networkConfig.erd_round_duration;\n    }\n\n    if (dappConfig != null) {\n      const apiConfig: NetworkType = {\n        ...localConfig,\n        ...dappConfig,\n        ...customNetworkConfig\n      };\n\n      initializeNetworkConfig(apiConfig);\n      return apiConfig;\n    }\n  }\n\n  initializeNetworkConfig(localConfig);\n  return localConfig;\n};\n"],
  "mappings": "6MAGO,IAAMA,EAA2BC,GACtCC,EAAS,EAAE,SACT,CAAC,CAAE,QAASC,CAAM,IAAM,CACtBA,EAAM,QAAU,CACd,GAAGA,EAAM,QACT,GAAGF,CACL,CACF,EACA,GACA,yBACF,ECAK,IAAMG,EAAoB,MAAO,CACtC,oBAAAC,EAAsB,CAAC,EACvB,YAAAC,CACF,IAAkC,CAChC,IAAMC,EAAwB,CAACF,GAAqB,oBAC9CG,EAA0BH,GAAqB,WAE/CI,EACJH,GAAeA,KAAeI,EAE1BC,EAAuDF,EACzDC,EAA8BJ,CAA+B,EAC7D,CAAC,EAECM,EAAa,CACjB,GAAGC,EACH,GAAGF,EACH,GAAGN,CACL,EAEMS,EAA2B,CAC/B,GAAGF,EACH,WAAY,OAAOA,EAAW,UAAU,CAC1C,EAEMG,EAAqBJ,GAAgB,WAE3C,GAAI,CAACF,GAAcF,EAAuB,CACxC,IAAMS,EAAaR,GAA2BO,EACxCE,EAAa,MAAMC,EAAuBF,CAAU,EAEpDG,EAAiBL,EAAY,cAE/B,KADA,MAAMM,EAAwBJ,CAAU,EAO5C,GAJIG,GAAiB,OACnBL,EAAY,cAAgBK,EAAc,oBAGxCF,GAAc,KAAM,CACtB,IAAMI,EAAyB,CAC7B,GAAGP,EACH,GAAGG,EACH,GAAGZ,CACL,EAEA,OAAAiB,EAAwBD,CAAS,EAC1BA,CACT,CACF,CAEA,OAAAC,EAAwBR,CAAW,EAC5BA,CACT",
  "names": ["initializeNetworkConfig", "newNetwork", "getStore", "state", "initializeNetwork", "customNetworkConfig", "environment", "fetchConfigFromServer", "customNetworkApiAddress", "isFoundEnv", "fallbackNetworkConfigurations", "fallbackConfig", "baseConfig", "emptyNetwork", "localConfig", "fallbackApiAddress", "apiAddress", "dappConfig", "getServerConfiguration", "networkConfig", "getNetworkConfigFromApi", "apiConfig", "initializeNetworkConfig"]
}
