{
  "version": 3,
  "sources": ["../../src/utils/transactions/getTransactionsHistory/helpers/mapServerTransactionsToListItems.ts"],
  "sourcesContent": ["import { getServerTransactionsByHashes } from 'apiCalls/transactions/getServerTransactionsByHashes';\nimport { ITransactionListItem } from 'lib/sdkDappUi';\nimport { saveToCache } from 'store/actions/cache/cacheActions';\nimport { TransactionServerStatusesEnum } from 'types/enums.types';\nimport { ServerTransactionType } from 'types/serverTransactions.types';\nimport { SignedTransactionType } from 'types/transactions.types';\nimport { getCachedTransactionListItem } from './getCachedTransactionListItem';\nimport { mapTransactionToListItem } from './mapTransactionToListItem';\n\ninterface IMapServerTransactionsToListItemsParams {\n  transactions: SignedTransactionType[];\n  address: string;\n  explorerAddress: string;\n  egldLabel: string;\n}\n\nconst sortTransactionsByTimestamp = (transactions: ITransactionListItem[]) =>\n  transactions.sort((a, b) => b.timestamp - a.timestamp);\n\nexport const mapServerTransactionsToListItems = async ({\n  transactions,\n  address,\n  explorerAddress,\n  egldLabel\n}: IMapServerTransactionsToListItemsParams): Promise<\n  ITransactionListItem[]\n> => {\n  const cachedTransactions: ITransactionListItem[] = [];\n  const hashesToFetch: string[] = [];\n\n  transactions.forEach((transaction) => {\n    const cachedTransaction = getCachedTransactionListItem(transaction.hash);\n    if (cachedTransaction) {\n      cachedTransactions.push(cachedTransaction);\n    } else {\n      hashesToFetch.push(transaction.hash);\n    }\n  });\n\n  if (hashesToFetch.length === 0) {\n    return sortTransactionsByTimestamp(cachedTransactions);\n  }\n\n  const newTransactions = await getServerTransactionsByHashes(hashesToFetch);\n\n  const retrievedHashes = newTransactions.map((tx) => tx.txHash);\n  const missingHashes = hashesToFetch.filter(\n    (hash) => !retrievedHashes.includes(hash)\n  );\n\n  if (missingHashes.length > 0) {\n    const filteredTransactions = transactions.filter((transaction) =>\n      missingHashes.includes(transaction.hash)\n    );\n\n    // In case the transactions were not found, we create a dummy transaction with the pending status\n    // until all pending transactions are returned from the API\n    const pendingDummyTransactions = filteredTransactions.map(\n      (transaction) =>\n        ({\n          ...transaction,\n          txHash: transaction.hash,\n          price: 0,\n          status: TransactionServerStatusesEnum.pending,\n          gasUsed: 0,\n          miniBlockHash: '',\n          receiverShard: 0,\n          round: 0,\n          senderShard: 0,\n          timestamp: Date.now()\n        }) as ServerTransactionType\n    );\n\n    newTransactions.push(...pendingDummyTransactions);\n  }\n\n  newTransactions.forEach((transaction) => {\n    const transactionListItem = mapTransactionToListItem({\n      transaction,\n      address,\n      explorerAddress,\n      egldLabel\n    });\n\n    if (transactionListItem.status !== TransactionServerStatusesEnum.pending) {\n      saveToCache({\n        key: `transaction-${transaction.txHash}`,\n        value: transactionListItem\n      });\n    }\n\n    cachedTransactions.push(transactionListItem);\n  });\n\n  return sortTransactionsByTimestamp(cachedTransactions);\n};\n"],
  "mappings": "oKAgBA,IAAMA,EAA+BC,GACnCA,EAAa,KAAK,CAACC,EAAGC,IAAMA,EAAE,UAAYD,EAAE,SAAS,EAE1CE,EAAmC,MAAO,CACrD,aAAAH,EACA,QAAAI,EACA,gBAAAC,EACA,UAAAC,CACF,IAEK,CACH,IAAMC,EAA6C,CAAC,EAC9CC,EAA0B,CAAC,EAWjC,GATAR,EAAa,QAASS,GAAgB,CACpC,IAAMC,EAAoBC,EAA6BF,EAAY,IAAI,EACnEC,EACFH,EAAmB,KAAKG,CAAiB,EAEzCF,EAAc,KAAKC,EAAY,IAAI,CAEvC,CAAC,EAEGD,EAAc,SAAW,EAC3B,OAAOT,EAA4BQ,CAAkB,EAGvD,IAAMK,EAAkB,MAAMC,EAA8BL,CAAa,EAEnEM,EAAkBF,EAAgB,IAAKG,GAAOA,EAAG,MAAM,EACvDC,EAAgBR,EAAc,OACjCS,GAAS,CAACH,EAAgB,SAASG,CAAI,CAC1C,EAEA,GAAID,EAAc,OAAS,EAAG,CAO5B,IAAME,EANuBlB,EAAa,OAAQS,GAChDO,EAAc,SAASP,EAAY,IAAI,CACzC,EAIsD,IACnDA,IACE,CACC,GAAGA,EACH,OAAQA,EAAY,KACpB,MAAO,EACP,iBACA,QAAS,EACT,cAAe,GACf,cAAe,EACf,MAAO,EACP,YAAa,EACb,UAAW,KAAK,IAAI,CACtB,EACJ,EAEAG,EAAgB,KAAK,GAAGM,CAAwB,CAClD,CAEA,OAAAN,EAAgB,QAASH,GAAgB,CACvC,IAAMU,EAAsBC,EAAyB,CACnD,YAAAX,EACA,QAAAL,EACA,gBAAAC,EACA,UAAAC,CACF,CAAC,EAEGa,EAAoB,oBACtBE,EAAY,CACV,IAAK,eAAeZ,EAAY,MAAM,GACtC,MAAOU,CACT,CAAC,EAGHZ,EAAmB,KAAKY,CAAmB,CAC7C,CAAC,EAEMpB,EAA4BQ,CAAkB,CACvD",
  "names": ["sortTransactionsByTimestamp", "transactions", "a", "b", "mapServerTransactionsToListItems", "address", "explorerAddress", "egldLabel", "cachedTransactions", "hashesToFetch", "transaction", "cachedTransaction", "getCachedTransactionListItem", "newTransactions", "getServerTransactionsByHashes", "retrievedHashes", "tx", "missingHashes", "hash", "pendingDummyTransactions", "transactionListItem", "mapTransactionToListItem", "saveToCache"]
}
