{
  "version": 3,
  "sources": ["../../src/managers/internal/ToastManager/helpers/createToastsFromTransactions.ts"],
  "sourcesContent": ["import { getEgldLabel } from 'methods/network/getEgldLabel';\nimport { getExplorerAddress } from 'methods/network/getExplorerAddress';\nimport {\n  getIsTransactionFailed,\n  getIsTransactionPending,\n  getIsTransactionSuccessful,\n  getIsTransactionTimedOut\n} from 'store/actions/transactions/transactionStateByStatus';\nimport { AccountSliceType } from 'store/slices/account/account.types';\nimport { ToastsSliceType } from 'store/slices/toast/toastSlice.types';\nimport { TransactionServerStatusesEnum } from 'types/enums.types';\nimport { SessionTransactionType } from 'types/transactions.types';\nimport { mapServerTransactionsToListItems } from 'utils/transactions/getTransactionsHistory/helpers';\nimport { createTransactionToast } from './createTransactionToast';\nimport { ITransactionToast } from '../types/toast.types';\ninterface CreateToastsFromTransactionsReturnType {\n  pendingTransactionToasts: ITransactionToast[];\n  completedTransactionToasts: ITransactionToast[];\n}\n\ninterface CreateToastsFromTransactionsParamsType {\n  toastList: ToastsSliceType;\n  transactionsSessions: Record<string, SessionTransactionType>;\n  account: AccountSliceType;\n  existingCompletedTransactions?: ITransactionToast[];\n}\n\nexport const createToastsFromTransactions = async ({\n  toastList,\n  transactionsSessions,\n  account,\n  existingCompletedTransactions = []\n}: CreateToastsFromTransactionsParamsType): Promise<CreateToastsFromTransactionsReturnType> => {\n  const pendingTransactionToasts: ITransactionToast[] = [];\n  const completedTransactionToasts: ITransactionToast[] = [\n    ...existingCompletedTransactions\n  ];\n  const explorerAddress = getExplorerAddress();\n  const egldLabel = getEgldLabel();\n\n  for (const toast of toastList.transactionToasts) {\n    const transactionSession = transactionsSessions[toast.toastId];\n    if (!transactionSession?.status) {\n      continue;\n    }\n\n    const { status, transactions, transactionsDisplayInfo } =\n      transactionSession;\n\n    const interprettedTransactions = await mapServerTransactionsToListItems({\n      transactions,\n      address: account.address,\n      explorerAddress,\n      egldLabel\n    });\n\n    const isTimedOut = getIsTransactionTimedOut(status);\n    const isFailed = getIsTransactionFailed(status);\n    const isSuccessful = getIsTransactionSuccessful(status);\n    const isCompleted = isTimedOut || isFailed || isSuccessful;\n    const isPending = getIsTransactionPending(status);\n    const { startTime, endTime } = toast;\n\n    if (\n      isCompleted &&\n      completedTransactionToasts.some((t) => t.toastId === toast.toastId)\n    ) {\n      continue;\n    }\n\n    const transactionToast = createTransactionToast({\n      toastId: toast.toastId,\n      address: account.address,\n      status: status as TransactionServerStatusesEnum,\n      transactions: interprettedTransactions,\n      transactionsDisplayInfo,\n      explorerAddress,\n      startTime,\n      endTime\n    });\n\n    if (isCompleted) {\n      completedTransactionToasts.push(transactionToast);\n    }\n\n    if (isPending) {\n      pendingTransactionToasts.push(transactionToast);\n    }\n  }\n\n  return {\n    pendingTransactionToasts,\n    completedTransactionToasts\n  };\n};\n"],
  "mappings": "kOA2BO,IAAMA,EAA+B,MAAO,CACjD,UAAAC,EACA,qBAAAC,EACA,QAAAC,EACA,8BAAAC,EAAgC,CAAC,CACnC,IAA+F,CAC7F,IAAMC,EAAgD,CAAC,EACjDC,EAAkD,CACtD,GAAGF,CACL,EACMG,EAAkBC,EAAmB,EACrCC,EAAYC,EAAa,EAE/B,QAAWC,KAASV,EAAU,kBAAmB,CAC/C,IAAMW,EAAqBV,EAAqBS,EAAM,OAAO,EAC7D,GAAI,CAACC,GAAoB,OACvB,SAGF,GAAM,CAAE,OAAAC,EAAQ,aAAAC,EAAc,wBAAAC,CAAwB,EACpDH,EAEII,EAA2B,MAAMC,EAAiC,CACtE,aAAAH,EACA,QAASX,EAAQ,QACjB,gBAAAI,EACA,UAAAE,CACF,CAAC,EAEKS,EAAaC,EAAyBN,CAAM,EAC5CO,EAAWC,EAAuBR,CAAM,EACxCS,EAAeC,EAA2BV,CAAM,EAChDW,EAAcN,GAAcE,GAAYE,EACxCG,EAAYC,EAAwBb,CAAM,EAC1C,CAAE,UAAAc,EAAW,QAAAC,CAAQ,EAAIjB,EAE/B,GACEa,GACAlB,EAA2B,KAAMuB,GAAMA,EAAE,UAAYlB,EAAM,OAAO,EAElE,SAGF,IAAMmB,EAAmBC,EAAuB,CAC9C,QAASpB,EAAM,QACf,QAASR,EAAQ,QACjB,OAAQU,EACR,aAAcG,EACd,wBAAAD,EACA,gBAAAR,EACA,UAAAoB,EACA,QAAAC,CACF,CAAC,EAEGJ,GACFlB,EAA2B,KAAKwB,CAAgB,EAG9CL,GACFpB,EAAyB,KAAKyB,CAAgB,CAElD,CAEA,MAAO,CACL,yBAAAzB,EACA,2BAAAC,CACF,CACF",
  "names": ["createToastsFromTransactions", "toastList", "transactionsSessions", "account", "existingCompletedTransactions", "pendingTransactionToasts", "completedTransactionToasts", "explorerAddress", "getExplorerAddress", "egldLabel", "getEgldLabel", "toast", "transactionSession", "status", "transactions", "transactionsDisplayInfo", "interprettedTransactions", "mapServerTransactionsToListItems", "isTimedOut", "getIsTransactionTimedOut", "isFailed", "getIsTransactionFailed", "isSuccessful", "getIsTransactionSuccessful", "isCompleted", "isPending", "getIsTransactionPending", "startTime", "endTime", "t", "transactionToast", "createTransactionToast"]
}
