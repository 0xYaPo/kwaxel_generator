{
  "version": 3,
  "sources": ["../../src/types/serverTransactions.types.ts"],
  "sourcesContent": ["import { AssetType, ScamInfoType } from './account.types';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from './enums.types';\nimport { EsdtEnumType, NftEnumType } from './tokens.types';\nimport { SignedTransactionType } from './transactions.types';\n\nexport interface ScResultType {\n  callType: string;\n  gasLimit: number;\n  gasPrice: number;\n  nonce: number;\n  prevTxHash: string;\n  hash: string;\n  originalTxHash: string;\n  receiver: string;\n  sender: string;\n  timestamp: number;\n  value: string;\n  data?: string;\n  returnMessage?: string;\n}\n\nexport interface TransactionTokensType {\n  esdts: string[];\n  nfts: string[];\n}\n\nexport enum TransactionActionsEnum {\n  // esdtNft category\n  transfer = 'transfer',\n  // legacy delegation\n  unBond = 'unBond',\n  unStake = 'unStake',\n  // stake category\n  delegate = 'delegate',\n  stake = 'stake',\n  unDelegate = 'unDelegate',\n  stakeClaimRewards = 'claimRewards',\n  reDelegateRewards = 'reDelegateRewards',\n  withdraw = 'withdraw',\n  // mex category\n  claimLockedAssets = 'claimLockedAssets',\n  swapTokensFixedInput = 'swapTokensFixedInput',\n  swapTokensFixedOutput = 'swapTokensFixedOutput',\n  swap = 'swap',\n  addLiquidity = 'addLiquidity',\n  addLiquidityProxy = 'addLiquidityProxy',\n  removeLiquidity = 'removeLiquidity',\n  removeLiquidityProxy = 'removeLiquidityProxy',\n  enterFarm = 'enterFarm',\n  enterFarmProxy = 'enterFarmProxy',\n  enterFarmAndLockRewards = 'enterFarmAndLockRewards',\n  enterFarmAndLockRewardsProxy = 'enterFarmAndLockRewardsProxy',\n  exitFarm = 'exitFarm',\n  exitFarmProxy = 'exitFarmProxy',\n  claimRewards = 'claimRewards',\n  claimRewardsProxy = 'claimRewardsProxy',\n  compoundRewards = 'compoundRewards',\n  compoundRewardsProxy = 'compoundRewardsProxy',\n  wrapEgld = 'wrapEgld',\n  unwrapEgld = 'unwrapEgld',\n  unlockAssets = 'unlockAssets',\n  mergeLockedAssetTokens = 'mergeLockedAssetTokens',\n  stakeFarm = 'stakeFarm',\n  stakeFarmProxy = 'stakeFarmProxy',\n  stakeFarmTokens = 'stakeFarmTokens',\n  stakeFarmTokensProxy = 'stakeFarmTokensProxy',\n  unstakeFarm = 'unstakeFarm',\n  unstakeFarmProxy = 'unstakeFarmProxy',\n  unstakeFarmTokens = 'unstakeFarmTokens',\n  unstakeFarmTokensProxy = 'unstakeFarmTokensProxy',\n  claimDualYield = 'claimDualYield',\n  claimDualYieldProxy = 'claimDualYieldProxy',\n  unbondFarm = 'unbondFarm',\n  ping = 'ping',\n  lockTokens = 'lockTokens',\n  migrateOldTokens = 'migrateOldTokens'\n}\n\nexport enum TransactionActionCategoryEnum {\n  esdtNft = 'esdtNft',\n  mex = 'mex',\n  stake = 'stake',\n  scCall = 'scCall'\n}\n\nexport interface TokenArgumentType {\n  type: NftEnumType | EsdtEnumType;\n  name: string;\n  ticker: string;\n  collection?: string;\n  identifier?: string;\n  token?: string;\n  decimals: number;\n  value: string;\n  providerName?: string;\n  providerAvatar?: string;\n  svgUrl?: string;\n  valueUSD?: string;\n}\n\nexport interface TransactionActionType {\n  category: string;\n  name: TransactionActionsEnum;\n  description?: string;\n  arguments?: { [key: string]: any };\n}\n\nexport interface UnwrapperType {\n  token?: TokenArgumentType[];\n  tokenNoValue?: TokenArgumentType[];\n  tokenNoLink?: TokenArgumentType[];\n  address?: string;\n  egldValue?: string;\n  value?: string;\n  providerName?: string;\n  providerAvatar?: string;\n}\n\nexport enum TransactionOperationActionTypeEnum {\n  none = 'none',\n  transfer = 'transfer',\n  burn = 'burn',\n  addQuantity = 'addQuantity',\n  create = 'create',\n  multiTransfer = 'multiTransfer',\n  localMint = 'localMint',\n  localBurn = 'localBurn',\n  wipe = 'wipe',\n  freeze = 'freeze',\n  writeLog = 'writeLog',\n  signalError = 'signalError',\n\n  // to be deprecated ?\n  ESDTLocalMint = 'ESDTLocalMint',\n  ESDTLocalBurn = 'ESDTLocalBurn'\n}\n\nexport enum VisibleTransactionOperationType {\n  nft = 'nft',\n  esdt = 'esdt',\n  egld = 'egld'\n}\nexport enum HiddenTransactionOperationType {\n  none = 'none',\n  error = 'error',\n  log = 'log'\n}\n\nexport interface OperationType {\n  id?: string;\n  action: TransactionOperationActionTypeEnum;\n  type: VisibleTransactionOperationType | HiddenTransactionOperationType;\n  esdtType?: NftEnumType | EsdtEnumType;\n  collection?: string;\n  name?: string;\n  identifier?: string;\n  sender: string;\n  ticker?: string;\n  receiver: string;\n  value: string;\n  decimals?: number;\n  data?: string;\n  message?: string;\n  svgUrl?: string;\n  senderAssets?: AssetType;\n  receiverAssets?: AssetType;\n  valueUSD?: string;\n}\n\nexport interface LogType {\n  hash: string;\n  callType: string;\n  gasLimit: number;\n  gasPrice: number;\n  nonce: number;\n  prevTxHash: string;\n  receiver?: string;\n  sender: string;\n  value: string;\n  data?: string;\n  originalTxHash: string;\n  returnMessage?: string;\n  logs?: any;\n}\n\nexport interface EventType {\n  address: string;\n  identifier: string;\n  topics: string[];\n  order: number;\n  data?: string;\n  additionalData?: string[];\n}\n\nexport interface ResultLogType {\n  id: string;\n  address: string;\n  events: EventType[];\n}\n\nexport interface ResultType {\n  hash: string;\n  callType: string;\n  gasLimit: number;\n  gasPrice: number;\n  nonce: number;\n  prevTxHash: string;\n  receiver?: string;\n  sender: string;\n  value: string;\n  data?: string;\n  originalTxHash: string;\n  returnMessage?: string;\n  logs?: ResultLogType;\n  senderAssets?: AssetType;\n  receiverAssets?: AssetType;\n  miniBlockHash?: string;\n  function?: string;\n  timestamp?: number;\n}\n\nexport interface ReceiptType {\n  value: string;\n  sender: string;\n  data: string;\n}\n\nexport interface ServerTransactionType {\n  fee?: string;\n  data: string;\n  gasLimit: number;\n  gasPrice: number;\n  gasUsed: number;\n  txHash: string;\n  miniBlockHash: string;\n  nonce: number;\n  receiver: string;\n  receiverShard: number;\n  round: number;\n  sender: string;\n  senderShard: number;\n  signature: string;\n  status: TransactionServerStatusesEnum | TransactionBatchStatusesEnum;\n  inTransit?: boolean;\n  timestamp: number;\n  value: string;\n  price: number;\n  results?: ResultType[];\n  operations?: OperationType[];\n  action?: TransactionActionType;\n  logs?: {\n    id: string;\n    address: string;\n    events: EventType[];\n  };\n  scamInfo?: ScamInfoType;\n  pendingResults?: boolean;\n  receipt?: ReceiptType;\n  senderAssets?: AssetType;\n  receiverAssets?: AssetType;\n  type?: TransferTypeEnum;\n  originalTxHash?: string;\n  isNew?: boolean; // UI flag\n  tokenValue?: string;\n  tokenIdentifier?: string;\n  function?: string;\n}\n\nexport enum TransferTypeEnum {\n  Transaction = 'Transaction',\n  SmartContractResult = 'SmartContractResult'\n}\n\n//#endregion\n\n//#region interpreted trasactions\n\nexport enum TransactionDirectionEnum {\n  SELF = 'Self',\n  INTERNAL = 'Internal',\n  IN = 'In',\n  OUT = 'Out'\n}\n\nexport type TransactionAgeType = {\n  timeAgo: string;\n  tooltip: string;\n};\n\nexport type TransactionMethodType = {\n  name: string;\n  actionDescription?: string;\n};\n\nexport type TransactionIconInfoType = {\n  icon?: string;\n  tooltip: string;\n};\n\nexport interface InterpretedTransactionType extends ServerTransactionType {\n  transactionDetails: {\n    age: TransactionAgeType;\n    direction?: TransactionDirectionEnum;\n    iconInfo: TransactionIconInfoType;\n    method: TransactionMethodType;\n    transactionTokens: TokenArgumentType[];\n    isContract?: boolean;\n  };\n  links: {\n    senderLink?: string;\n    receiverLink?: string;\n    senderShardLink?: string;\n    receiverShardLink?: string;\n    transactionLink?: string;\n  };\n}\n\nexport interface DecodeForDisplayPropsType {\n  input: string;\n  decodeMethod: DecodeMethodEnum;\n  identifier?: string;\n}\n\nexport type DecodedDisplayType = {\n  displayValue: string;\n  validationWarnings: string[];\n  highlight: string | null;\n};\n\nexport enum DecodeMethodEnum {\n  raw = 'raw',\n  text = 'text',\n  decimal = 'decimal',\n  smart = 'smart'\n}\n\n//#endregion\n\nexport enum BatchTransactionStatus {\n  pending = 'pending',\n  success = 'success',\n  invalid = 'invalid',\n  dropped = 'dropped',\n  fail = 'fail'\n}\n\nexport interface BatchTransactionsRequestType {\n  id: string;\n  transactions: SignedTransactionType[][];\n}\n\nexport interface BatchTransactionsResponseType {\n  id: string;\n  status: BatchTransactionStatus;\n  transactions: SignedTransactionType[][];\n  error?: string;\n  message?: string;\n  statusCode?: string;\n}\n"],
  "mappings": "AA6BO,IAAKA,OAEVA,EAAA,SAAW,WAEXA,EAAA,OAAS,SACTA,EAAA,QAAU,UAEVA,EAAA,SAAW,WACXA,EAAA,MAAQ,QACRA,EAAA,WAAa,aACbA,EAAA,kBAAoB,eACpBA,EAAA,kBAAoB,oBACpBA,EAAA,SAAW,WAEXA,EAAA,kBAAoB,oBACpBA,EAAA,qBAAuB,uBACvBA,EAAA,sBAAwB,wBACxBA,EAAA,KAAO,OACPA,EAAA,aAAe,eACfA,EAAA,kBAAoB,oBACpBA,EAAA,gBAAkB,kBAClBA,EAAA,qBAAuB,uBACvBA,EAAA,UAAY,YACZA,EAAA,eAAiB,iBACjBA,EAAA,wBAA0B,0BAC1BA,EAAA,6BAA+B,+BAC/BA,EAAA,SAAW,WACXA,EAAA,cAAgB,gBAChBA,EAAA,aAAe,eACfA,EAAA,kBAAoB,oBACpBA,EAAA,gBAAkB,kBAClBA,EAAA,qBAAuB,uBACvBA,EAAA,SAAW,WACXA,EAAA,WAAa,aACbA,EAAA,aAAe,eACfA,EAAA,uBAAyB,yBACzBA,EAAA,UAAY,YACZA,EAAA,eAAiB,iBACjBA,EAAA,gBAAkB,kBAClBA,EAAA,qBAAuB,uBACvBA,EAAA,YAAc,cACdA,EAAA,iBAAmB,mBACnBA,EAAA,kBAAoB,oBACpBA,EAAA,uBAAyB,yBACzBA,EAAA,eAAiB,iBACjBA,EAAA,oBAAsB,sBACtBA,EAAA,WAAa,aACbA,EAAA,KAAO,OACPA,EAAA,WAAa,aACbA,EAAA,iBAAmB,mBAjDTA,OAAA,IAoDAC,OACVA,EAAA,QAAU,UACVA,EAAA,IAAM,MACNA,EAAA,MAAQ,QACRA,EAAA,OAAS,SAJCA,OAAA,IAwCAC,OACVA,EAAA,KAAO,OACPA,EAAA,SAAW,WACXA,EAAA,KAAO,OACPA,EAAA,YAAc,cACdA,EAAA,OAAS,SACTA,EAAA,cAAgB,gBAChBA,EAAA,UAAY,YACZA,EAAA,UAAY,YACZA,EAAA,KAAO,OACPA,EAAA,OAAS,SACTA,EAAA,SAAW,WACXA,EAAA,YAAc,cAGdA,EAAA,cAAgB,gBAChBA,EAAA,cAAgB,gBAhBNA,OAAA,IAmBAC,OACVA,EAAA,IAAM,MACNA,EAAA,KAAO,OACPA,EAAA,KAAO,OAHGA,OAAA,IAKAC,OACVA,EAAA,KAAO,OACPA,EAAA,MAAQ,QACRA,EAAA,IAAM,MAHIA,OAAA,IA8HAC,OACVA,EAAA,YAAc,cACdA,EAAA,oBAAsB,sBAFZA,OAAA,IASAC,OACVA,EAAA,KAAO,OACPA,EAAA,SAAW,WACXA,EAAA,GAAK,KACLA,EAAA,IAAM,MAJIA,OAAA,IAoDAC,OACVA,EAAA,IAAM,MACNA,EAAA,KAAO,OACPA,EAAA,QAAU,UACVA,EAAA,MAAQ,QAJEA,OAAA,IASAC,OACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,QAAU,UACVA,EAAA,KAAO,OALGA,OAAA",
  "names": ["TransactionActionsEnum", "TransactionActionCategoryEnum", "TransactionOperationActionTypeEnum", "VisibleTransactionOperationType", "HiddenTransactionOperationType", "TransferTypeEnum", "TransactionDirectionEnum", "DecodeMethodEnum", "BatchTransactionStatus"]
}
