{
  "version": 3,
  "sources": ["../../src/providers/helpers/restoreProvider.ts"],
  "sourcesContent": ["import { isMobileWebview } from 'lib/sdkWebviewProvider';\nimport { ProviderTypeEnum } from 'providers/types/providerFactory.types';\nimport { providerTypeSelector } from 'store/selectors';\nimport { getState } from 'store/store';\nimport { getIsInIframe } from 'utils/window/getIsInIframe';\nimport { setAccountProvider } from './accountProvider';\nimport { ProviderFactory } from '../ProviderFactory';\n\nexport async function restoreProvider() {\n  const isMobile = isMobileWebview();\n  const isInIframe = getIsInIframe();\n\n  const type =\n    isInIframe || isMobile\n      ? ProviderTypeEnum.webview\n      : providerTypeSelector(getState());\n\n  if (!type) {\n    return;\n  }\n\n  const provider = await ProviderFactory.create({\n    type\n  });\n\n  if (!provider) {\n    throw new Error('Provider not found');\n  }\n\n  /*\n    Check if the app is running in webview and the provider is already initialized.\n    - true: the app is embedded within another dApp (e.g., inside an iframe) and perform login using the provider.\n    - false: the parent is not a dApp and proceed with initializing the current app as a standalone iframe.\n  */\n  if (\n    isMobile ||\n    (type === ProviderTypeEnum.webview && provider.isInitialized())\n  ) {\n    await provider.login();\n  }\n\n  setAccountProvider(provider);\n}\n"],
  "mappings": "+RAQA,eAAsBA,GAAkB,CACtC,IAAMC,EAAWC,EAAgB,EAG3BC,EAFaC,EAAc,GAGjBH,EACVI,EAAiB,QACjBC,EAAqBC,EAAS,CAAC,EAErC,GAAI,CAACJ,EACH,OAGF,IAAMK,EAAW,MAAMC,EAAgB,OAAO,CAC5C,KAAAN,CACF,CAAC,EAED,GAAI,CAACK,EACH,MAAM,IAAI,MAAM,oBAAoB,GASpCP,GACCE,IAASE,EAAiB,SAAWG,EAAS,cAAc,IAE7D,MAAMA,EAAS,MAAM,EAGvBE,EAAmBF,CAAQ,CAC7B",
  "names": ["restoreProvider", "isMobile", "isMobileWebview", "type", "getIsInIframe", "ProviderTypeEnum", "providerTypeSelector", "getState", "provider", "ProviderFactory", "setAccountProvider"]
}
