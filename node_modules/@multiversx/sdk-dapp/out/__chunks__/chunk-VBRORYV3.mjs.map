{
  "version": 3,
  "sources": ["../../src/store/actions/account/accountActions.ts"],
  "sourcesContent": ["import { LedgerAccountType } from 'store/slices/account/account.types';\nimport { emptyAccount } from 'store/slices/account/emptyAccount';\nimport { getStore } from 'store/store';\nimport { AccountType } from 'types/account.types';\nimport { BatchTransactionsWSResponseType } from 'types/websocket.types';\n\nexport const setAccount = (account: AccountType) => {\n  getStore().setState(\n    ({ account: state }) => {\n      const isSameAddress = state.address === account.address;\n      state.accounts = {\n        [state.address]: isSameAddress ? account : emptyAccount\n      };\n    },\n    false,\n    'setAccount'\n  );\n};\n\nexport const setLedgerAccount = (ledgerAccount: LedgerAccountType | null) =>\n  getStore().setState(\n    ({ account: state }) => {\n      state.ledgerAccount = ledgerAccount;\n    },\n    false,\n    'setLedgerAccount'\n  );\n\nexport const setWalletConnectAccount = (walletConnectAccount: string | null) =>\n  getStore().setState(\n    ({ account: state }) => {\n      state.walletConnectAccount = walletConnectAccount;\n    },\n    false,\n    'setWalletConnectAccount'\n  );\n\nexport const setWebsocketEvent = (message: string) =>\n  getStore().setState(\n    ({ account: state }) => {\n      state.websocketEvent = {\n        timestamp: Date.now(),\n        message\n      };\n    },\n    false,\n    'setWebsocketEvent'\n  );\n\nexport const setWebsocketBatchEvent = (data: BatchTransactionsWSResponseType) =>\n  getStore().setState(\n    ({ account: state }) => {\n      state.websocketBatchEvent = {\n        timestamp: Date.now(),\n        data\n      };\n    },\n    false,\n    'setWebsocketBatchEvent'\n  );\n\nexport const setAccountNonce = (nonce: number) => {\n  getStore().setState(\n    ({ account: state }) => {\n      state.accounts[state.address].nonce = nonce;\n    },\n    false,\n    'setAccountNonce'\n  );\n};\n"],
  "mappings": "kFAMO,IAAMA,EAAcC,GAAyB,CAClDC,EAAS,EAAE,SACT,CAAC,CAAE,QAASC,CAAM,IAAM,CACtB,IAAMC,EAAgBD,EAAM,UAAYF,EAAQ,QAChDE,EAAM,SAAW,CACf,CAACA,EAAM,OAAO,EAAGC,EAAgBH,EAAUI,CAC7C,CACF,EACA,GACA,YACF,CACF,EAEaC,EAAoBC,GAC/BL,EAAS,EAAE,SACT,CAAC,CAAE,QAASC,CAAM,IAAM,CACtBA,EAAM,cAAgBI,CACxB,EACA,GACA,kBACF,EAEWC,EAA2BC,GACtCP,EAAS,EAAE,SACT,CAAC,CAAE,QAASC,CAAM,IAAM,CACtBA,EAAM,qBAAuBM,CAC/B,EACA,GACA,yBACF,EAEWC,EAAqBC,GAChCT,EAAS,EAAE,SACT,CAAC,CAAE,QAASC,CAAM,IAAM,CACtBA,EAAM,eAAiB,CACrB,UAAW,KAAK,IAAI,EACpB,QAAAQ,CACF,CACF,EACA,GACA,mBACF,EAEWC,EAA0BC,GACrCX,EAAS,EAAE,SACT,CAAC,CAAE,QAASC,CAAM,IAAM,CACtBA,EAAM,oBAAsB,CAC1B,UAAW,KAAK,IAAI,EACpB,KAAAU,CACF,CACF,EACA,GACA,wBACF,EAEWC,EAAmBC,GAAkB,CAChDb,EAAS,EAAE,SACT,CAAC,CAAE,QAASC,CAAM,IAAM,CACtBA,EAAM,SAASA,EAAM,OAAO,EAAE,MAAQY,CACxC,EACA,GACA,iBACF,CACF",
  "names": ["setAccount", "account", "getStore", "state", "isSameAddress", "emptyAccount", "setLedgerAccount", "ledgerAccount", "setWalletConnectAccount", "walletConnectAccount", "setWebsocketEvent", "message", "setWebsocketBatchEvent", "data", "setAccountNonce", "nonce"]
}
