{
  "version": 3,
  "sources": ["../../src/providers/strategies/helpers/signTransactions/signTransactions.ts"],
  "sourcesContent": ["import { getEconomics } from 'apiCalls/economics/getEconomics';\nimport { EMPTY_PPU } from 'constants/placeholders.constants';\nimport { Transaction } from 'lib/sdkCore';\nimport { DECIMALS, DIGITS, formatAmount } from 'lib/sdkDappUtils';\nimport { SignTransactionsStateManager } from 'managers/internal/SignTransactionsStateManager/SignTransactionsStateManager';\nimport {\n  ISignTransactionsPanelCommonData,\n  SignEventsEnum\n} from 'managers/internal/SignTransactionsStateManager/types';\nimport { getAccountInfo } from 'methods/account/getAccountInfo';\nimport { getEgldLabel } from 'methods/network/getEgldLabel';\nimport { cancelCrossWindowAction } from 'providers/helpers/cancelCrossWindowAction';\nimport { IProvider } from 'providers/types/providerFactory.types';\nimport { networkSelector } from 'store/selectors/networkSelectors';\nimport { getState } from 'store/store';\nimport { getCommonData } from './helpers/getCommonData/getCommonData';\nimport { getRecommendedGasPrice } from './helpers/getCommonData/helpers/getRecommendedGasPrice';\nimport { getFeeData } from './helpers/getFeeData';\nimport { getMultiEsdtTransferData } from './helpers/getMultiEsdtTransferData/getMultiEsdtTransferData';\nimport { guardTransactions as getGuardedTransactions } from './helpers/guardTransactions/guardTransactions';\n\ntype SignTransactionsParamsType = {\n  transactions?: Transaction[];\n  handleSign: IProvider['signTransactions'];\n  guardTransactions?: typeof getGuardedTransactions;\n};\n\nexport async function signTransactions({\n  transactions = [],\n  handleSign,\n  guardTransactions = getGuardedTransactions\n}: SignTransactionsParamsType): Promise<Transaction[]> {\n  const {\n    account: { address, shard, username }\n  } = getAccountInfo();\n  const network = networkSelector(getState());\n\n  const egldLabel = getEgldLabel();\n\n  const { allTransactions, parsedTransactionsByDataField } =\n    getMultiEsdtTransferData(transactions);\n\n  let signedIndexes: number[] = [];\n\n  const manager = SignTransactionsStateManager.getInstance();\n  await manager.openUI();\n\n  if (!manager) {\n    throw new Error('Unable to establish connection with sign screens');\n  }\n\n  const handleCancel = async () => {\n    await cancelCrossWindowAction();\n    manager.closeUI();\n  };\n\n  manager.subscribeToEventBus(SignEventsEnum.CLOSE, handleCancel);\n\n  return new Promise<Transaction[]>(async (resolve, reject) => {\n    const signedTransactions: Transaction[] = [];\n    const economics = await getEconomics({ baseURL: network.apiAddress });\n\n    manager.notifyDataUpdate();\n\n    manager.initializeGasPriceMap(allTransactions.map((tx) => tx.transaction));\n    const price = economics?.price;\n\n    let currentScreenIndex = 0;\n\n    const updateScreen = async () => {\n      const currentTransaction = allTransactions[currentScreenIndex];\n      const transaction = currentTransaction?.transaction;\n\n      const currentNonce = Number(transaction.nonce);\n\n      try {\n        manager.updateIsLoading(true);\n\n        const { commonData, tokenTransaction, fungibleTransaction } =\n          await getCommonData({\n            allTransactions,\n            currentScreenIndex,\n            egldLabel,\n            network,\n            gasPriceData: manager.ppuMap[currentNonce],\n            price,\n            address,\n            username,\n            shard,\n            signedIndexes,\n            parsedTransactionsByDataField\n          });\n\n        if (tokenTransaction) {\n          manager.updateTokenTransaction(tokenTransaction);\n        }\n\n        if (fungibleTransaction) {\n          manager.updateNonFungibleTransaction(\n            fungibleTransaction.type,\n            fungibleTransaction\n          );\n        }\n\n        manager.updateCommonData(commonData);\n      } catch (error) {\n        console.error(\n          `Error fetching common data for transaction at index ${currentScreenIndex}:`,\n          error\n        );\n\n        throw error;\n      } finally {\n        manager.updateIsLoading(false);\n      }\n    };\n\n    const onBack = () => {\n      if (currentScreenIndex > 0) {\n        currentScreenIndex--;\n        updateScreen();\n      }\n    };\n\n    const onSetPpu = (\n      ppu: ISignTransactionsPanelCommonData['ppu'] = EMPTY_PPU\n    ) => {\n      const currentTransaction = allTransactions[currentScreenIndex];\n      const transaction = currentTransaction.transaction;\n      const currentNonce = Number(transaction.nonce);\n\n      manager.updateGasPriceMap({\n        nonce: currentNonce,\n        ppu\n      });\n\n      manager.updateCommonData({ ppu });\n\n      const plainTransaction = transaction.toPlainObject();\n      const newGasPrice = getRecommendedGasPrice({\n        transaction: plainTransaction,\n        gasPriceData: manager.ppuMap[currentNonce]\n      });\n\n      const newTransaction = Transaction.newFromPlainObject({\n        ...plainTransaction,\n        gasPrice: newGasPrice\n      });\n\n      const feeData = getFeeData({\n        transaction: newTransaction,\n        price\n      });\n\n      const formattedGasPrice = formatAmount({\n        input: newGasPrice.toString(),\n        decimals: DECIMALS,\n        addCommas: true,\n        digits: DIGITS\n      });\n\n      manager.updateCommonData({\n        feeLimit: feeData.feeLimitFormatted,\n        feeInFiatLimit: feeData.feeInFiatLimit,\n        gasPrice: formattedGasPrice,\n        ppu\n      });\n    };\n\n    const onCancel = async () => {\n      reject(new Error('Transaction signing cancelled by user'));\n      await cancelCrossWindowAction();\n      manager.closeUI();\n    };\n\n    const onNext = () => {\n      if (currentScreenIndex < manager.transactionsCount - 1) {\n        currentScreenIndex++;\n        updateScreen();\n      }\n    };\n\n    const onSign = async () => {\n      const currentTransaction = allTransactions[currentScreenIndex];\n      const transaction = currentTransaction.transaction;\n      const currentNonce = Number(transaction.nonce);\n\n      const { commonData } = await getCommonData({\n        allTransactions,\n        currentScreenIndex,\n        egldLabel,\n        network,\n        gasPriceData: manager.ppuMap[currentNonce],\n        price,\n        address,\n        username,\n        shard,\n        signedIndexes,\n        parsedTransactionsByDataField\n      });\n\n      if (!commonData.needsSigning) {\n        signedIndexes.push(currentScreenIndex);\n        return onNext();\n      }\n\n      const plainTransaction = transaction.toPlainObject();\n      const txNonce = plainTransaction.nonce;\n\n      const newGasPrice = getRecommendedGasPrice({\n        transaction: plainTransaction,\n        gasPriceData: manager.ppuMap[txNonce]\n      });\n\n      const transactionToSign = Transaction.newFromPlainObject({\n        ...plainTransaction,\n        gasPrice: newGasPrice\n      });\n\n      try {\n        const signedTxs = await handleSign([transactionToSign]);\n        if (signedTxs) {\n          signedIndexes.push(currentScreenIndex);\n          signedTransactions.push(signedTxs[0]);\n        }\n\n        const isLastScreen = currentScreenIndex === allTransactions.length - 1;\n        const allSignableTransactions = allTransactions.filter(\n          (tx) => tx.needsSigning\n        );\n\n        const areAllTransactionsSigned =\n          signedTransactions.length === allSignableTransactions.length;\n\n        if (isLastScreen && areAllTransactionsSigned) {\n          const optionallyGuardedTransactions =\n            await guardTransactions(signedTransactions);\n          manager.closeUI();\n          return resolve(optionallyGuardedTransactions);\n        }\n\n        onNext();\n      } catch (error) {\n        manager.closeUI();\n        reject(error);\n      }\n    };\n\n    const eventHandlersMap = new Map([\n      [SignEventsEnum.NEXT, onNext],\n      [SignEventsEnum.CONFIRM, onSign],\n      [SignEventsEnum.CLOSE, onCancel],\n      [SignEventsEnum.BACK, onBack],\n      [SignEventsEnum.SET_PPU, onSetPpu]\n    ]);\n\n    function setupEventListeners() {\n      for (const [event, handler] of eventHandlersMap) {\n        manager.subscribeToEventBus(event, handler);\n      }\n    }\n\n    setupEventListeners();\n    await updateScreen();\n  });\n}\n"],
  "mappings": "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",
  "names": ["signTransactions", "transactions", "handleSign", "guardTransactions", "address", "shard", "username", "getAccountInfo", "network", "networkSelector", "getState", "egldLabel", "getEgldLabel", "allTransactions", "parsedTransactionsByDataField", "getMultiEsdtTransferData", "signedIndexes", "manager", "SignTransactionsStateManager", "handleCancel", "cancelCrossWindowAction", "resolve", "reject", "signedTransactions", "economics", "getEconomics", "tx", "price", "currentScreenIndex", "updateScreen", "transaction", "currentNonce", "commonData", "tokenTransaction", "fungibleTransaction", "getCommonData", "error", "onBack", "onSetPpu", "ppu", "plainTransaction", "newGasPrice", "getRecommendedGasPrice", "newTransaction", "Transaction", "feeData", "getFeeData", "formattedGasPrice", "formatAmount", "DECIMALS", "DIGITS", "onCancel", "onNext", "onSign", "txNonce", "transactionToSign", "signedTxs", "isLastScreen", "allSignableTransactions", "areAllTransactionsSigned", "optionallyGuardedTransactions", "eventHandlersMap", "setupEventListeners", "event", "handler"]
}
