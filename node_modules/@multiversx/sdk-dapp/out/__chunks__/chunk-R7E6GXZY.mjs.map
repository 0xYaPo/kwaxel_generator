{
  "version": 3,
  "sources": ["../../src/utils/transactions/getInterpretedTransaction/helpers/getLockedAccountName.ts"],
  "sourcesContent": ["import { getPersistedTokenDetails } from 'apiCalls/tokens/getPersistedTokenDetails';\nimport { addressIsValid } from '../../../validation';\n\ninterface IGetLockedAccountNameParams {\n  receiver: string;\n  sender: string;\n  tokenId?: string;\n}\n\nexport const getLockedAccountName = async ({\n  receiver,\n  sender,\n  tokenId\n}: IGetLockedAccountNameParams) => {\n  let senderLockedAccount = null,\n    receiverLockedAccount = null;\n\n  if (!tokenId) {\n    return {\n      senderLockedAccount,\n      receiverLockedAccount\n    };\n  }\n\n  try {\n    const tokenDetails = await getPersistedTokenDetails({ tokenId });\n    const lockedAccounts = tokenDetails?.assets?.lockedAccounts;\n\n    if (!lockedAccounts) {\n      return {\n        senderLockedAccount,\n        receiverLockedAccount\n      };\n    }\n\n    for (let account in lockedAccounts) {\n      if (addressIsValid(account)) {\n        if (sender === account) {\n          senderLockedAccount = account;\n        }\n\n        if (receiver === account) {\n          receiverLockedAccount = account;\n        }\n      }\n\n      if (addressIsValid(lockedAccounts[account])) {\n        if (sender === lockedAccounts[account]) {\n          senderLockedAccount = lockedAccounts[account];\n        }\n\n        if (receiver === lockedAccounts[account]) {\n          receiverLockedAccount = lockedAccounts[account];\n        }\n      }\n\n      if (senderLockedAccount && receiverLockedAccount) {\n        return {\n          senderLockedAccount,\n          receiverLockedAccount\n        };\n      }\n    }\n  } catch (error) {\n    console.error('Error getting token details', error);\n  }\n\n  return {\n    senderLockedAccount,\n    receiverLockedAccount\n  };\n};\n"],
  "mappings": "kFASO,IAAMA,EAAuB,MAAO,CACzC,SAAAC,EACA,OAAAC,EACA,QAAAC,CACF,IAAmC,CACjC,IAAIC,EAAsB,KACxBC,EAAwB,KAE1B,GAAI,CAACF,EACH,MAAO,CACL,oBAAAC,EACA,sBAAAC,CACF,EAGF,GAAI,CAEF,IAAMC,GADe,MAAMC,EAAyB,CAAE,QAAAJ,CAAQ,CAAC,IAC1B,QAAQ,eAE7C,GAAI,CAACG,EACH,MAAO,CACL,oBAAAF,EACA,sBAAAC,CACF,EAGF,QAASG,KAAWF,EAqBlB,GApBIG,EAAeD,CAAO,IACpBN,IAAWM,IACbJ,EAAsBI,GAGpBP,IAAaO,IACfH,EAAwBG,IAIxBC,EAAeH,EAAeE,CAAO,CAAC,IACpCN,IAAWI,EAAeE,CAAO,IACnCJ,EAAsBE,EAAeE,CAAO,GAG1CP,IAAaK,EAAeE,CAAO,IACrCH,EAAwBC,EAAeE,CAAO,IAI9CJ,GAAuBC,EACzB,MAAO,CACL,oBAAAD,EACA,sBAAAC,CACF,CAGN,OAASK,EAAO,CACd,QAAQ,MAAM,8BAA+BA,CAAK,CACpD,CAEA,MAAO,CACL,oBAAAN,EACA,sBAAAC,CACF,CACF",
  "names": ["getLockedAccountName", "receiver", "sender", "tokenId", "senderLockedAccount", "receiverLockedAccount", "lockedAccounts", "getPersistedTokenDetails", "account", "addressIsValid", "error"]
}
