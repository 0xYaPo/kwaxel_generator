{
  "version": 3,
  "sources": ["../../src/providers/strategies/LedgerProviderStrategy/helpers/authenticateLedgerAccount.ts"],
  "sourcesContent": ["import { HWProvider } from '@multiversx/sdk-hw-provider/out';\nimport { BigNumber } from 'bignumber.js';\n\nimport { ACCOUNTS_ENDPOINT } from 'apiCalls';\nimport { IEventBus } from 'lib/sdkDappUi';\nimport { LedgerConnectStateManager } from 'managers/internal/LedgerConnectStateManager/LedgerConnectStateManager';\nimport { getExplorerAddress } from 'methods/network/getExplorerAddress';\nimport { ProviderTypeEnum } from 'providers/types/providerFactory.types';\nimport { setLedgerAccount } from 'store/actions';\nimport { setLedgerLogin } from 'store/actions/loginInfo/loginInfoActions';\nimport { getExplorerLink } from 'utils/transactions/getExplorerLink';\n\nimport { getAuthTokenText } from './getAuthTokenText';\nimport { updateAccountsList } from './updateAccountsList';\nimport {\n  LedgerConfigType,\n  LedgerLoginType\n} from '../types/ledgerProvider.types';\n\ninterface IGetLedgerLogin {\n  options?: {\n    callbackUrl?: string;\n    token?: string;\n  };\n  config: LedgerConfigType;\n  provider: HWProvider | null;\n  eventBus?: IEventBus | null;\n  login: LedgerLoginType | null;\n}\n\ninterface ISelectedAccount {\n  address: string;\n  signature: string;\n  addressIndex: number;\n}\n\nexport async function authenticateLedgerAccount({\n  options,\n  config,\n  provider,\n  login\n}: IGetLedgerLogin) {\n  const manager = LedgerConnectStateManager.getInstance();\n\n  const explorerAddress = getExplorerAddress();\n\n  const authData = getAuthTokenText({\n    loginToken: options?.token,\n    version: config.version\n  });\n\n  const accountsListProps = {\n    manager,\n    provider\n  };\n\n  // refresh account list\n  await updateAccountsList(accountsListProps);\n\n  // cycle trough accounts until user makes a choice\n  const selectedAccount = await new Promise<ISelectedAccount>(async function (\n    resolve,\n    reject\n  ) {\n    async function handleGoToPage(page: number) {\n      const addressesPerPage = manager ? manager.addressesPerPage ?? 1 : 1;\n      const startIndex = new BigNumber(page - 1).times(addressesPerPage);\n\n      manager?.updateStartIndex(Math.max(0, parseInt(startIndex.toString())));\n      await updateAccountsList(accountsListProps);\n    }\n\n    async function handleAccessWallet(payload: {\n      addressIndex: number;\n      selectedAddress: string;\n    }) {\n      if (!provider || !login) {\n        return;\n      }\n\n      manager?.updateConfirmScreen({\n        ...authData,\n        selectedAddress: payload.selectedAddress,\n        explorerLink: getExplorerLink({\n          to: `/${ACCOUNTS_ENDPOINT}/${payload.selectedAddress}`,\n          explorerAddress\n        })\n      });\n\n      try {\n        const loginInfo = options?.token\n          ? await provider.tokenLogin({\n              token: Buffer.from(`${options?.token}{}`),\n              addressIndex: payload.addressIndex\n            })\n          : await login({\n              addressIndex: payload.addressIndex\n            });\n\n        resolve({\n          address: loginInfo.address,\n          signature: loginInfo.signature\n            ? loginInfo.signature.toString('hex')\n            : '',\n          addressIndex: payload.addressIndex\n        });\n      } catch (err) {\n        console.error('User rejected login:', err);\n\n        const shouldGoBack = Boolean(manager?.getConfirmScreenData());\n        if (shouldGoBack) {\n          await updateAccountsList(accountsListProps);\n        }\n      }\n    }\n\n    async function handleCancel() {\n      await updateAccountsList(accountsListProps);\n      manager.unsubscribeFromAuthEvents({\n        handleCancel,\n        handleAccessWallet,\n        handleGoToPage\n      });\n      reject('User cancelled login');\n    }\n\n    manager.subscribeToAuthEvents({\n      handleCancel,\n      handleAccessWallet,\n      handleGoToPage\n    });\n  });\n\n  const { version, dataEnabled } = config;\n\n  // login is finished, data can be persisted in the store\n  setLedgerLogin({\n    index: selectedAccount.addressIndex,\n    loginType: ProviderTypeEnum.ledger\n  });\n\n  setLedgerAccount({\n    address: selectedAccount.address,\n    index: selectedAccount.addressIndex,\n    version,\n    hasContractDataEnabled: dataEnabled\n  });\n\n  return {\n    address: selectedAccount.address,\n    signature: selectedAccount.signature\n  };\n}\n"],
  "mappings": "iXACA,OAAS,aAAAA,MAAiB,eAmC1B,eAAsBC,EAA0B,CAC9C,QAAAC,EACA,OAAAC,EACA,SAAAC,EACA,MAAAC,CACF,EAAoB,CAClB,IAAMC,EAAUC,EAA0B,YAAY,EAEhDC,EAAkBC,EAAmB,EAErCC,EAAWC,EAAiB,CAChC,WAAYT,GAAS,MACrB,QAASC,EAAO,OAClB,CAAC,EAEKS,EAAoB,CACxB,QAAAN,EACA,SAAAF,CACF,EAGA,MAAMS,EAAmBD,CAAiB,EAG1C,IAAME,EAAkB,MAAM,IAAI,QAA0B,eAC1DC,EACAC,EACA,CACA,eAAeC,EAAeC,EAAc,CAC1C,IAAMC,EAAmBb,EAAUA,EAAQ,kBAAoB,EAAI,EAC7Dc,EAAa,IAAIC,EAAUH,EAAO,CAAC,EAAE,MAAMC,CAAgB,EAEjEb,GAAS,iBAAiB,KAAK,IAAI,EAAG,SAASc,EAAW,SAAS,CAAC,CAAC,CAAC,EACtE,MAAMP,EAAmBD,CAAiB,CAC5C,CAEA,eAAeU,EAAmBC,EAG/B,CACD,GAAI,GAACnB,GAAY,CAACC,GAIlB,CAAAC,GAAS,oBAAoB,CAC3B,GAAGI,EACH,gBAAiBa,EAAQ,gBACzB,aAAcC,EAAgB,CAC5B,GAAI,IAAIC,CAAiB,IAAIF,EAAQ,eAAe,GACpD,gBAAAf,CACF,CAAC,CACH,CAAC,EAED,GAAI,CACF,IAAMkB,EAAYxB,GAAS,MACvB,MAAME,EAAS,WAAW,CACxB,MAAO,OAAO,KAAK,GAAGF,GAAS,KAAK,IAAI,EACxC,aAAcqB,EAAQ,YACxB,CAAC,EACD,MAAMlB,EAAM,CACV,aAAckB,EAAQ,YACxB,CAAC,EAELR,EAAQ,CACN,QAASW,EAAU,QACnB,UAAWA,EAAU,UACjBA,EAAU,UAAU,SAAS,KAAK,EAClC,GACJ,aAAcH,EAAQ,YACxB,CAAC,CACH,OAASI,EAAK,CACZ,QAAQ,MAAM,uBAAwBA,CAAG,EAEpB,EAAQrB,GAAS,qBAAqB,GAEzD,MAAMO,EAAmBD,CAAiB,CAE9C,EACF,CAEA,eAAegB,GAAe,CAC5B,MAAMf,EAAmBD,CAAiB,EAC1CN,EAAQ,0BAA0B,CAChC,aAAAsB,EACA,mBAAAN,EACA,eAAAL,CACF,CAAC,EACDD,EAAO,sBAAsB,CAC/B,CAEAV,EAAQ,sBAAsB,CAC5B,aAAAsB,EACA,mBAAAN,EACA,eAAAL,CACF,CAAC,CACH,CAAC,EAEK,CAAE,QAAAY,EAAS,YAAAC,CAAY,EAAI3B,EAGjC,OAAA4B,EAAe,CACb,MAAOjB,EAAgB,aACvB,UAAWkB,EAAiB,MAC9B,CAAC,EAEDC,EAAiB,CACf,QAASnB,EAAgB,QACzB,MAAOA,EAAgB,aACvB,QAAAe,EACA,uBAAwBC,CAC1B,CAAC,EAEM,CACL,QAAShB,EAAgB,QACzB,UAAWA,EAAgB,SAC7B,CACF",
  "names": ["BigNumber", "authenticateLedgerAccount", "options", "config", "provider", "login", "manager", "LedgerConnectStateManager", "explorerAddress", "getExplorerAddress", "authData", "getAuthTokenText", "accountsListProps", "updateAccountsList", "selectedAccount", "resolve", "reject", "handleGoToPage", "page", "addressesPerPage", "startIndex", "BigNumber", "handleAccessWallet", "payload", "getExplorerLink", "ACCOUNTS_ENDPOINT", "loginInfo", "err", "handleCancel", "version", "dataEnabled", "setLedgerLogin", "ProviderTypeEnum", "setLedgerAccount"]
}
