{
  "version": 3,
  "sources": ["../../src/managers/internal/SignTransactionsStateManager/SignTransactionsStateManager.ts"],
  "sourcesContent": ["import { EMPTY_PPU } from 'constants/placeholders.constants';\nimport { UITagsEnum } from 'constants/UITags.enum';\nimport { Transaction } from 'lib/sdkCore';\nimport { MvxSignTransactionsPanel } from 'lib/sdkDappUi';\nimport { NftEnumType } from 'types/tokens.types';\nimport {\n  FungibleTransactionType,\n  ISignTransactionsPanelData,\n  SignEventsEnum,\n  TokenType,\n  ISignTransactionsPanelCommonData\n} from './types/signTransactionsPanel.types';\nimport { SidePanelBaseManager } from '../SidePanelBaseManager/SidePanelBaseManager';\n\nexport class SignTransactionsStateManager extends SidePanelBaseManager<\n  MvxSignTransactionsPanel,\n  ISignTransactionsPanelData,\n  SignEventsEnum\n> {\n  private static instance: SignTransactionsStateManager;\n  public readonly addressesPerPage = 10;\n\n  private _ppuMap: Record<\n    number, // nonce\n    {\n      initialGasPrice: number;\n      ppu: ISignTransactionsPanelCommonData['ppu'];\n    }\n  > = {};\n\n  protected initialData: ISignTransactionsPanelData = {\n    commonData: {\n      transactionsCount: 0,\n      currentIndexToSign: 0,\n      egldLabel: '',\n      currentIndex: 0,\n      ppuOptions: [],\n      address: '',\n      origin: ''\n    },\n    tokenTransaction: null,\n    nftTransaction: null,\n    sftTransaction: null\n  };\n\n  public static getInstance(): SignTransactionsStateManager {\n    if (!SignTransactionsStateManager.instance) {\n      SignTransactionsStateManager.instance =\n        new SignTransactionsStateManager();\n    }\n    return SignTransactionsStateManager.instance;\n  }\n\n  constructor() {\n    super({\n      uiDataUpdateEvent: SignEventsEnum.DATA_UPDATE,\n      uiTag: UITagsEnum.SIGN_TRANSACTIONS_PANEL\n    });\n    this.data = { ...this.initialData };\n  }\n\n  get transactionsCount() {\n    return this.data.commonData.transactionsCount;\n  }\n\n  public initializeGasPriceMap(transactions: Transaction[]) {\n    const ppu = EMPTY_PPU;\n\n    transactions\n      .filter((tx) => tx != null)\n      .forEach((transaction) => {\n        const initialGasPrice = transaction ? Number(transaction.gasPrice) : 0;\n\n        this.updateGasPriceMap({\n          nonce: Number(transaction.nonce),\n          ppu,\n          initialGasPrice\n        });\n      });\n\n    this.updateCommonData({ ppu });\n  }\n\n  public updateGasPriceMap({\n    nonce,\n    ppu,\n    initialGasPrice\n  }: {\n    nonce: number;\n    initialGasPrice?: number;\n    ppu: ISignTransactionsPanelCommonData['ppu'];\n  }) {\n    this._ppuMap[nonce] = {\n      ...this._ppuMap[nonce],\n      ppu\n    };\n\n    if (!initialGasPrice) {\n      return;\n    }\n\n    this._ppuMap[nonce].initialGasPrice = initialGasPrice;\n  }\n\n  public updateCommonData(\n    newCommonData: Partial<ISignTransactionsPanelCommonData>\n  ): void {\n    this.data.commonData = {\n      ...this.data.commonData,\n      ...newCommonData\n    };\n    this.notifyDataUpdate();\n  }\n\n  public updateIsLoading(newState: boolean) {\n    this.data.isLoading = newState;\n\n    this.notifyDataUpdate();\n  }\n\n  public updateTokenTransaction(\n    tokenData: ISignTransactionsPanelData['tokenTransaction']\n  ): void {\n    this.data.tokenTransaction = tokenData;\n    this.data.sftTransaction = null;\n    this.data.nftTransaction = null;\n\n    this.notifyDataUpdate();\n  }\n\n  public updateNonFungibleTransaction(\n    type: TokenType,\n    fungibleData: FungibleTransactionType\n  ): void {\n    switch (type) {\n      case NftEnumType.NonFungibleESDT:\n        this.data.nftTransaction = fungibleData;\n        this.data.tokenTransaction = null;\n        this.data.sftTransaction = null;\n        break;\n      case NftEnumType.SemiFungibleESDT:\n        this.data.sftTransaction = fungibleData;\n        this.data.nftTransaction = null;\n        this.data.tokenTransaction = null;\n        break;\n      default:\n        break;\n    }\n\n    this.notifyDataUpdate();\n  }\n\n  public get currentScreenIndex() {\n    return this.data.commonData.currentIndex;\n  }\n\n  public get ppuMap() {\n    return this._ppuMap;\n  }\n\n  protected async setupEventListeners() {\n    if (!this.eventBus) {\n      return;\n    }\n\n    this.subscribeToEventBus(SignEventsEnum.CLOSE, this.closeUI.bind(this));\n  }\n}\n"],
  "mappings": "kFAcO,IAAMA,EAAN,MAAMC,UAAqCC,CAIhD,CAmCA,aAAc,CACZ,MAAM,CACJ,kDACA,mCACF,CAAC,EArCH,KAAgB,iBAAmB,GAEnC,KAAQ,QAMJ,CAAC,EAEL,KAAU,YAA0C,CAClD,WAAY,CACV,kBAAmB,EACnB,mBAAoB,EACpB,UAAW,GACX,aAAc,EACd,WAAY,CAAC,EACb,QAAS,GACT,OAAQ,EACV,EACA,iBAAkB,KAClB,eAAgB,KAChB,eAAgB,IAClB,EAeE,KAAK,KAAO,CAAE,GAAG,KAAK,WAAY,CACpC,CAdA,OAAc,aAA4C,CACxD,OAAKD,EAA6B,WAChCA,EAA6B,SAC3B,IAAIA,GAEDA,EAA6B,QACtC,CAUA,IAAI,mBAAoB,CACtB,OAAO,KAAK,KAAK,WAAW,iBAC9B,CAEO,sBAAsBE,EAA6B,CACxD,IAAMC,EAAM,EAEZD,EACG,OAAQE,GAAOA,GAAM,IAAI,EACzB,QAASC,GAAgB,CACxB,IAAMC,EAAkBD,EAAc,OAAOA,EAAY,QAAQ,EAAI,EAErE,KAAK,kBAAkB,CACrB,MAAO,OAAOA,EAAY,KAAK,EAC/B,IAAAF,EACA,gBAAAG,CACF,CAAC,CACH,CAAC,EAEH,KAAK,iBAAiB,CAAE,IAAAH,CAAI,CAAC,CAC/B,CAEO,kBAAkB,CACvB,MAAAI,EACA,IAAAJ,EACA,gBAAAG,CACF,EAIG,CACD,KAAK,QAAQC,CAAK,EAAI,CACpB,GAAG,KAAK,QAAQA,CAAK,EACrB,IAAAJ,CACF,EAEKG,IAIL,KAAK,QAAQC,CAAK,EAAE,gBAAkBD,EACxC,CAEO,iBACLE,EACM,CACN,KAAK,KAAK,WAAa,CACrB,GAAG,KAAK,KAAK,WACb,GAAGA,CACL,EACA,KAAK,iBAAiB,CACxB,CAEO,gBAAgBC,EAAmB,CACxC,KAAK,KAAK,UAAYA,EAEtB,KAAK,iBAAiB,CACxB,CAEO,uBACLC,EACM,CACN,KAAK,KAAK,iBAAmBA,EAC7B,KAAK,KAAK,eAAiB,KAC3B,KAAK,KAAK,eAAiB,KAE3B,KAAK,iBAAiB,CACxB,CAEO,6BACLC,EACAC,EACM,CACN,OAAQD,EAAM,CACZ,sBACE,KAAK,KAAK,eAAiBC,EAC3B,KAAK,KAAK,iBAAmB,KAC7B,KAAK,KAAK,eAAiB,KAC3B,MACF,uBACE,KAAK,KAAK,eAAiBA,EAC3B,KAAK,KAAK,eAAiB,KAC3B,KAAK,KAAK,iBAAmB,KAC7B,MACF,QACE,KACJ,CAEA,KAAK,iBAAiB,CACxB,CAEA,IAAW,oBAAqB,CAC9B,OAAO,KAAK,KAAK,WAAW,YAC9B,CAEA,IAAW,QAAS,CAClB,OAAO,KAAK,OACd,CAEA,MAAgB,qBAAsB,CAC/B,KAAK,UAIV,KAAK,8CAA0C,KAAK,QAAQ,KAAK,IAAI,CAAC,CACxE,CACF",
  "names": ["SignTransactionsStateManager", "_SignTransactionsStateManager", "SidePanelBaseManager", "transactions", "ppu", "tx", "transaction", "initialGasPrice", "nonce", "newCommonData", "newState", "tokenData", "type", "fungibleData"]
}
