{
  "version": 3,
  "sources": ["../../src/managers/UnlockPanelManager/UnlockPanelManager.ts"],
  "sourcesContent": ["import { providerLabels } from 'constants/providerFactory.constants';\nimport { UITagsEnum } from 'constants/UITags.enum';\nimport { MvxUnlockPanel } from 'lib/sdkDappUi';\nimport { ProviderFactory } from 'providers/ProviderFactory';\nimport {\n  IProviderBase,\n  IProviderFactory,\n  ProviderTypeEnum,\n  ProviderType\n} from 'providers/types/providerFactory.types';\nimport { networkSelector } from 'store/selectors';\nimport { getState } from 'store/store';\nimport {\n  OnCloseUnlockPanelType,\n  LoginHandlerType,\n  UnlockPanelEventsEnum,\n  UnlockPanelManagerInitParamsType\n} from './UnlockPanelManager.types';\nimport { SidePanelBaseManager } from '../internal/SidePanelBaseManager';\n\ninterface IUnlockPanelManagerData {\n  providers: IProviderBase[] | null;\n  walletAddress: string | null;\n}\n\nexport class UnlockPanelManager extends SidePanelBaseManager<\n  MvxUnlockPanel,\n  IUnlockPanelManagerData,\n  UnlockPanelEventsEnum\n> {\n  protected initialData: IUnlockPanelManagerData = {\n    providers: null,\n    walletAddress: null\n  };\n\n  private static instance: UnlockPanelManager;\n  private static loginHandler: LoginHandlerType | null = null;\n  private static onClose: OnCloseUnlockPanelType | null = null;\n  private static allowedProviders?: ProviderType[] | null = null;\n\n  constructor() {\n    super({\n      uiTag: UITagsEnum.UNLOCK_PANEL,\n      uiDataUpdateEvent: UnlockPanelEventsEnum.OPEN\n    });\n\n    this.data = this.initialData;\n  }\n\n  public static getInstance(): UnlockPanelManager {\n    if (!UnlockPanelManager.instance) {\n      UnlockPanelManager.instance = new UnlockPanelManager();\n    }\n    return UnlockPanelManager.instance;\n  }\n\n  public static init(params: UnlockPanelManagerInitParamsType) {\n    this.loginHandler = params.loginHandler;\n    this.allowedProviders = params.allowedProviders;\n\n    if (params.onClose) {\n      this.onClose = params.onClose;\n    }\n\n    return this.getInstance();\n  }\n\n  public openUnlockPanel = async () => {\n    const { walletAddress } = networkSelector(getState());\n\n    this.data = {\n      providers: this.getProvidersList(),\n      walletAddress\n    };\n\n    await this.openUI();\n    this.notifyDataUpdate();\n  };\n\n  protected setupEventListeners = async () => {\n    if (!this.eventBus) {\n      return;\n    }\n\n    this.subscribeToEventBus(UnlockPanelEventsEnum.LOGIN, this.handleLogin);\n    this.subscribeToEventBus(\n      UnlockPanelEventsEnum.CANCEL_LOGIN,\n      this.handleCancelLogin\n    );\n    this.subscribeToEventBus(UnlockPanelEventsEnum.CLOSE, this.handleCloseUI);\n  };\n\n  private readonly handleCloseUI = async (options?: {\n    isLoginFinished?: boolean;\n  }) => {\n    if (!options?.isLoginFinished && UnlockPanelManager.onClose) {\n      UnlockPanelManager.onClose();\n    }\n\n    this.closeUI();\n  };\n\n  private readonly handleLogin = async ({ type, anchor }: IProviderFactory) => {\n    if (!UnlockPanelManager.loginHandler) {\n      throw new Error(\n        'Login callback not initialized. Please call `init()` first.'\n      );\n    }\n\n    try {\n      if (this.isSimpleLoginCallback(UnlockPanelManager.loginHandler)) {\n        const provider = await ProviderFactory.create({ type, anchor });\n        await provider.login();\n        UnlockPanelManager.loginHandler();\n      } else {\n        UnlockPanelManager.loginHandler({ type, anchor });\n      }\n      await this.handleCloseUI({ isLoginFinished: true });\n    } catch (error) {\n      console.error(error);\n      this.eventBus?.publish(\n        UnlockPanelEventsEnum.CANCEL_IN_PROVIDER,\n        this.data\n      );\n    }\n  };\n\n  private readonly handleCancelLogin = async () => {\n    await ProviderFactory.destroy();\n  };\n\n  private readonly isSimpleLoginCallback = (\n    login: LoginHandlerType\n  ): login is () => void => {\n    const takesZeroArguments = login.length === 0;\n    return takesZeroArguments;\n  };\n\n  private getProvidersList(): IProviderBase[] {\n    const customProviders = ProviderFactory.customProviders;\n\n    const defaultProviderTypes = Object.values(ProviderTypeEnum).filter(\n      (type) => {\n        const excludedProviders: string[] = [\n          ProviderTypeEnum.none,\n          ProviderTypeEnum.webview,\n          ProviderTypeEnum.passkey // temporary disabled\n        ];\n        return !excludedProviders.includes(type);\n      }\n    );\n\n    const allAvailableProviderTypes = [\n      ...defaultProviderTypes,\n      ...customProviders.map((p) => p.type)\n    ];\n\n    const customProviderLabels = customProviders.reduce(\n      (acc, provider) => {\n        acc[provider.type] = provider.name;\n        return acc;\n      },\n      {} as Record<ProviderType, string>\n    );\n\n    const allAvailableLabels = {\n      ...providerLabels,\n      ...customProviderLabels\n    };\n\n    const allowedProviderTypes = UnlockPanelManager.allowedProviders\n      ? UnlockPanelManager?.allowedProviders.filter((type) =>\n          allAvailableProviderTypes.includes(type)\n        )\n      : allAvailableProviderTypes;\n\n    const providerList = allowedProviderTypes.map((type) => {\n      const custom = customProviders.find(\n        (customProvider) => customProvider.type === type\n      );\n      if (custom) {\n        return custom;\n      }\n\n      return {\n        name: type in allAvailableLabels ? allAvailableLabels[type] : type,\n        type\n      };\n    });\n\n    return providerList;\n  }\n}\n"],
  "mappings": "sPAyBO,IAAMA,EAAN,MAAMA,UAA2BC,CAItC,CAWA,aAAc,CACZ,MAAM,CACJ,yBACA,wBACF,CAAC,EAdH,KAAU,YAAuC,CAC/C,UAAW,KACX,cAAe,IACjB,EAkCA,KAAO,gBAAkB,SAAY,CACnC,GAAM,CAAE,cAAAC,CAAc,EAAIC,EAAgBC,EAAS,CAAC,EAEpD,KAAK,KAAO,CACV,UAAW,KAAK,iBAAiB,EACjC,cAAAF,CACF,EAEA,MAAM,KAAK,OAAO,EAClB,KAAK,iBAAiB,CACxB,EAEA,KAAU,oBAAsB,SAAY,CACrC,KAAK,WAIV,KAAK,4BAAiD,KAAK,WAAW,EACtE,KAAK,mCAEH,KAAK,iBACP,EACA,KAAK,4BAAiD,KAAK,aAAa,EAC1E,EAEA,KAAiB,cAAgB,MAAOG,GAElC,CACA,CAACA,GAAS,iBAAmBL,EAAmB,SAClDA,EAAmB,QAAQ,EAG7B,KAAK,QAAQ,CACf,EAEA,KAAiB,YAAc,MAAO,CAAE,KAAAM,EAAM,OAAAC,CAAO,IAAwB,CAC3E,GAAI,CAACP,EAAmB,aACtB,MAAM,IAAI,MACR,6DACF,EAGF,GAAI,CACE,KAAK,sBAAsBA,EAAmB,YAAY,GAE5D,MADiB,MAAMQ,EAAgB,OAAO,CAAE,KAAAF,EAAM,OAAAC,CAAO,CAAC,GAC/C,MAAM,EACrBP,EAAmB,aAAa,GAEhCA,EAAmB,aAAa,CAAE,KAAAM,EAAM,OAAAC,CAAO,CAAC,EAElD,MAAM,KAAK,cAAc,CAAE,gBAAiB,EAAK,CAAC,CACpD,OAASE,EAAO,CACd,QAAQ,MAAMA,CAAK,EACnB,KAAK,UAAU,6BAEb,KAAK,IACP,CACF,CACF,EAEA,KAAiB,kBAAoB,SAAY,CAC/C,MAAMD,EAAgB,QAAQ,CAChC,EAEA,KAAiB,sBACfE,GAE2BA,EAAM,SAAW,EAxF5C,KAAK,KAAO,KAAK,WACnB,CAEA,OAAc,aAAkC,CAC9C,OAAKV,EAAmB,WACtBA,EAAmB,SAAW,IAAIA,GAE7BA,EAAmB,QAC5B,CAEA,OAAc,KAAKW,EAA0C,CAC3D,YAAK,aAAeA,EAAO,aAC3B,KAAK,iBAAmBA,EAAO,iBAE3BA,EAAO,UACT,KAAK,QAAUA,EAAO,SAGjB,KAAK,YAAY,CAC1B,CAyEQ,kBAAoC,CAC1C,IAAMC,EAAkBJ,EAAgB,gBAalCK,EAA4B,CAChC,GAZ2B,OAAO,OAAOC,CAAgB,EAAE,OAC1DR,GAMQ,CAL6B,CAClCQ,EAAiB,KACjBA,EAAiB,QACjBA,EAAiB,OACnB,EAC0B,SAASR,CAAI,CAE3C,EAIE,GAAGM,EAAgB,IAAKG,GAAMA,EAAE,IAAI,CACtC,EAEMC,EAAuBJ,EAAgB,OAC3C,CAACK,EAAKC,KACJD,EAAIC,EAAS,IAAI,EAAIA,EAAS,KACvBD,GAET,CAAC,CACH,EAEME,EAAqB,CACzB,GAAGC,EACH,GAAGJ,CACL,EAsBA,OApB6BhB,EAAmB,iBAC5CA,GAAoB,iBAAiB,OAAQM,GAC3CO,EAA0B,SAASP,CAAI,CACzC,EACAO,GAEsC,IAAKP,GAAS,CACtD,IAAMe,EAAST,EAAgB,KAC5BU,GAAmBA,EAAe,OAAShB,CAC9C,EACA,OAAIe,GAIG,CACL,KAAMf,KAAQa,EAAqBA,EAAmBb,CAAI,EAAIA,EAC9D,KAAAA,CACF,CACF,CAAC,CAGH,CACF,EAvKaN,EAWI,aAAwC,KAX5CA,EAYI,QAAyC,KAZ7CA,EAaI,iBAA2C,KAbrD,IAAMuB,EAANvB",
  "names": ["_UnlockPanelManager", "SidePanelBaseManager", "walletAddress", "networkSelector", "getState", "options", "type", "anchor", "ProviderFactory", "error", "login", "params", "customProviders", "allAvailableProviderTypes", "ProviderTypeEnum", "p", "customProviderLabels", "acc", "provider", "allAvailableLabels", "providerLabels", "custom", "customProvider", "UnlockPanelManager"]
}
