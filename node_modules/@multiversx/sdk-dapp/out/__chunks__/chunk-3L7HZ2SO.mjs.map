{
  "version": 3,
  "sources": ["../../src/utils/transactions/getTransactionsHistory/helpers/mapTransactionToListItem.ts"],
  "sourcesContent": ["import { ITransactionListItem } from 'lib/sdkDappUi';\nimport { TransactionServerStatusesEnum } from 'types/enums.types';\nimport { ServerTransactionType } from 'types/serverTransactions.types';\nimport { IBaseTransactionParams } from 'types/transaction-list-item.types';\nimport { explorerUrlBuilder } from 'utils/transactions/explorerUrlBuilder';\nimport { getExplorerLink } from 'utils/transactions/getExplorerLink';\nimport { getReceiverData } from 'utils/transactions/getTransactionsHistory/helpers/getReceiverData';\nimport { getTransactionAction } from './getTransactionAction';\nimport { getTransactionAmount } from './getTransactionAmount';\nimport { getTransactionAsset } from './getTransactionAsset';\nimport { getTransactionAssets } from './getTransactionAssets';\n\ninterface IMapTransactionToListItemParamsType extends IBaseTransactionParams {\n  transaction: ServerTransactionType;\n  isPending?: boolean;\n  profileImages?: Record<string, string>;\n}\n\nexport const mapTransactionToListItem = ({\n  transaction,\n  address,\n  explorerAddress,\n  egldLabel,\n  isPending = false\n}: IMapTransactionToListItemParamsType): ITransactionListItem => {\n  const { receiver, receiverAssets } = getReceiverData(transaction);\n  const isIncomingTransaction = address === receiver;\n\n  const action = getTransactionAction({\n    transaction,\n    currentUserAddress: address,\n    egldLabel,\n    isPending\n  });\n\n  const transactionAssets = getTransactionAssets({\n    userIsReceiver: receiver === address,\n    transaction,\n    egldLabel\n  });\n\n  const hash = transaction.originalTxHash ?? transaction.txHash;\n\n  const transactionListItem: ITransactionListItem = {\n    asset: getTransactionAsset({\n      ...transaction,\n      transactionAssets,\n      showDefaultState: isPending,\n      status: transaction.status as TransactionServerStatusesEnum\n    }),\n    interactor: isIncomingTransaction ? transaction.sender : receiver,\n    interactorAsset: isIncomingTransaction\n      ? transaction.senderAssets?.iconSvg ?? transaction.senderAssets?.iconPng\n      : receiverAssets?.iconSvg ?? receiverAssets?.iconPng,\n    directionLabel: isIncomingTransaction ? 'From' : 'To',\n    action,\n    amount: getTransactionAmount({\n      transactionAssets,\n      isIncomingTransaction\n    }),\n    hash,\n    status: transaction.status as TransactionServerStatusesEnum,\n    timestamp: transaction.timestamp,\n    link: getExplorerLink({\n      explorerAddress,\n      to: explorerUrlBuilder.transactionDetails(hash)\n    })\n  };\n\n  return transactionListItem;\n};\n"],
  "mappings": "+RAkBO,IAAMA,EAA2B,CAAC,CACvC,YAAAC,EACA,QAAAC,EACA,gBAAAC,EACA,UAAAC,EACA,UAAAC,EAAY,EACd,IAAiE,CAC/D,GAAM,CAAE,SAAAC,EAAU,eAAAC,CAAe,EAAIC,EAAgBP,CAAW,EAC1DQ,EAAwBP,IAAYI,EAEpCI,EAASC,EAAqB,CAClC,YAAAV,EACA,mBAAoBC,EACpB,UAAAE,EACA,UAAAC,CACF,CAAC,EAEKO,EAAoBC,EAAqB,CAC7C,eAAgBP,IAAaJ,EAC7B,YAAAD,EACA,UAAAG,CACF,CAAC,EAEKU,EAAOb,EAAY,gBAAkBA,EAAY,OA4BvD,MA1BkD,CAChD,MAAOc,EAAoB,CACzB,GAAGd,EACH,kBAAAW,EACA,iBAAkBP,EAClB,OAAQJ,EAAY,MACtB,CAAC,EACD,WAAYQ,EAAwBR,EAAY,OAASK,EACzD,gBAAiBG,EACbR,EAAY,cAAc,SAAWA,EAAY,cAAc,QAC/DM,GAAgB,SAAWA,GAAgB,QAC/C,eAAgBE,EAAwB,OAAS,KACjD,OAAAC,EACA,OAAQM,EAAqB,CAC3B,kBAAAJ,EACA,sBAAAH,CACF,CAAC,EACD,KAAAK,EACA,OAAQb,EAAY,OACpB,UAAWA,EAAY,UACvB,KAAMgB,EAAgB,CACpB,gBAAAd,EACA,GAAIe,EAAmB,mBAAmBJ,CAAI,CAChD,CAAC,CACH,CAGF",
  "names": ["mapTransactionToListItem", "transaction", "address", "explorerAddress", "egldLabel", "isPending", "receiver", "receiverAssets", "getReceiverData", "isIncomingTransaction", "action", "getTransactionAction", "transactionAssets", "getTransactionAssets", "hash", "getTransactionAsset", "getTransactionAmount", "getExplorerLink", "explorerUrlBuilder"]
}
