{
  "version": 3,
  "sources": ["../../src/apiCalls/tokens/getTokenDetails.ts"],
  "sourcesContent": ["import { NFTS_ENDPOINT, TOKENS_ENDPOINT } from 'apiCalls/endpoints';\nimport { axiosInstance } from 'apiCalls/utils/axiosInstance';\nimport { networkSelector } from 'store/selectors';\nimport { getState } from 'store/store';\nimport { TokenOptionType, TokenInfoResponse } from 'types/tokens.types';\nimport { getIdentifierType } from 'utils/validation/getIdentifierType';\n\nexport async function getTokenDetails({\n  tokenId\n}: {\n  tokenId: string;\n}): Promise<TokenOptionType> {\n  const network = networkSelector(getState());\n  const { isNft } = getIdentifierType(tokenId);\n\n  const tokenIdentifier = tokenId;\n  const tokenEndpoint = isNft ? NFTS_ENDPOINT : TOKENS_ENDPOINT;\n\n  if (!tokenIdentifier) {\n    return {\n      tokenDecimals: Number(network.decimals),\n      tokenLabel: '',\n      tokenAvatar: ''\n    };\n  }\n\n  try {\n    const { data: selectedToken } = await axiosInstance.get<TokenInfoResponse>(\n      `${network.apiAddress}/${tokenEndpoint}/${tokenIdentifier}`\n    );\n\n    const tokenDecimals = selectedToken\n      ? selectedToken?.decimals\n      : Number(network.decimals);\n    const tokenLabel = selectedToken ? selectedToken?.name : '';\n    const tokenAvatar = selectedToken\n      ? selectedToken?.assets?.svgUrl ?? selectedToken?.media?.[0]?.thumbnailUrl\n      : '';\n\n    return {\n      tokenDecimals: tokenDecimals,\n      tokenLabel,\n      type: selectedToken?.type,\n      tokenAvatar,\n      identifier: selectedToken?.identifier,\n      assets: selectedToken?.assets,\n      esdtPrice: selectedToken?.price,\n      ticker: selectedToken?.ticker,\n      name: selectedToken?.name\n    };\n  } catch (error: any) {\n    return {\n      error: `Error fetching token ${tokenIdentifier}: ${error.toString()}`,\n      tokenDecimals: Number(network.decimals),\n      tokenLabel: '',\n      tokenAvatar: '',\n      identifier: tokenIdentifier\n    };\n  }\n}\n"],
  "mappings": "oNAOA,eAAsBA,EAAgB,CACpC,QAAAC,CACF,EAE6B,CAC3B,IAAMC,EAAUC,EAAgBC,EAAS,CAAC,EACpC,CAAE,MAAAC,CAAM,EAAIC,EAAkBL,CAAO,EAErCM,EAAkBN,EAClBO,EAAgBH,EAAQI,EAAgBC,EAE9C,GAAI,CAACH,EACH,MAAO,CACL,cAAe,OAAOL,EAAQ,QAAQ,EACtC,WAAY,GACZ,YAAa,EACf,EAGF,GAAI,CACF,GAAM,CAAE,KAAMS,CAAc,EAAI,MAAMC,EAAc,IAClD,GAAGV,EAAQ,UAAU,IAAIM,CAAa,IAAID,CAAe,EAC3D,EAEMM,EAAgBF,EAClBA,GAAe,SACf,OAAOT,EAAQ,QAAQ,EACrBY,EAAaH,EAAgBA,GAAe,KAAO,GACnDI,EAAcJ,EAChBA,GAAe,QAAQ,QAAUA,GAAe,QAAQ,CAAC,GAAG,aAC5D,GAEJ,MAAO,CACL,cAAeE,EACf,WAAAC,EACA,KAAMH,GAAe,KACrB,YAAAI,EACA,WAAYJ,GAAe,WAC3B,OAAQA,GAAe,OACvB,UAAWA,GAAe,MAC1B,OAAQA,GAAe,OACvB,KAAMA,GAAe,IACvB,CACF,OAASK,EAAY,CACnB,MAAO,CACL,MAAO,wBAAwBT,CAAe,KAAKS,EAAM,SAAS,CAAC,GACnE,cAAe,OAAOd,EAAQ,QAAQ,EACtC,WAAY,GACZ,YAAa,GACb,WAAYK,CACd,CACF,CACF",
  "names": ["getTokenDetails", "tokenId", "network", "networkSelector", "getState", "isNft", "getIdentifierType", "tokenIdentifier", "tokenEndpoint", "NFTS_ENDPOINT", "TOKENS_ENDPOINT", "selectedToken", "axiosInstance", "tokenDecimals", "tokenLabel", "tokenAvatar", "error"]
}
