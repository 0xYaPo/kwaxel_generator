{
  "version": 3,
  "sources": ["../../src/store/actions/transactions/transactionsActions.ts"],
  "sourcesContent": ["import { getTransactionsSessionStatus } from 'managers/TransactionManager/helpers/getTransactionsStatus';\nimport { getStore } from 'store/store';\nimport {\n  TransactionBatchStatusesEnum,\n  TransactionServerStatusesEnum\n} from 'types/enums.types';\nimport {\n  TransactionsDisplayInfoType,\n  SignedTransactionType\n} from 'types/transactions.types';\n\nexport type CreateTransactionsSessionType = {\n  transactions: SignedTransactionType[];\n  transactionsDisplayInfo?: TransactionsDisplayInfoType;\n  status: TransactionBatchStatusesEnum | TransactionServerStatusesEnum;\n  sessionInformation?: any;\n};\n\nexport const createTransactionsSession = ({\n  transactions,\n  transactionsDisplayInfo,\n  status,\n  sessionInformation\n}: CreateTransactionsSessionType) => {\n  const sessionId = Date.now().toString();\n  getStore().setState(\n    ({ transactions: state }) => {\n      state[sessionId] = {\n        transactions,\n        status,\n        transactionsDisplayInfo,\n        interpretedTransactions: {},\n        sessionInformation\n      };\n    },\n    false,\n    'createTransactionsSession'\n  );\n  return sessionId;\n};\n\nexport const updateSessionStatus = ({\n  sessionId,\n  status,\n  errorMessage\n}: {\n  sessionId: string;\n  status: TransactionBatchStatusesEnum;\n  errorMessage?: string;\n}) => {\n  getStore().setState(\n    ({ transactions: state }) => {\n      state[sessionId].status = status;\n      state[sessionId].errorMessage = errorMessage;\n    },\n    false,\n    'updateTransactionsSession'\n  );\n};\n\nexport const updateTransactionStatus = ({\n  sessionId,\n  transaction: updatedTransaction\n}: {\n  sessionId: string;\n  transaction: SignedTransactionType;\n}): TransactionBatchStatusesEnum | null => {\n  let newStatus: TransactionBatchStatusesEnum | null = null;\n  getStore().setState(\n    ({ transactions: state }) => {\n      const transactions = state[sessionId]?.transactions;\n      if (transactions != null) {\n        state[sessionId].transactions = transactions.map((transaction) => {\n          if (transaction.hash === updatedTransaction.hash) {\n            return {\n              ...transaction,\n              ...(updatedTransaction ?? {})\n            };\n          }\n          return transaction;\n        });\n\n        const status = getTransactionsSessionStatus([\n          ...state[sessionId].transactions // Create a copy of the transactions array to avoid Proxy issues\n        ]);\n\n        if (status) {\n          updateSessionStatus({\n            sessionId,\n            status\n          });\n          newStatus = status;\n        }\n      }\n    },\n    false,\n    'updateTransactionStatus'\n  );\n\n  return newStatus;\n};\n\nexport const clearCompletedTransactions = () => {\n  getStore().setState(\n    ({ transactions: state, toasts: toastsState }) => {\n      const sessionIds = Object.keys(state);\n\n      const completedSessionIds = sessionIds.filter((sessionId) => {\n        const session = state[sessionId];\n        if (!session) {\n          return false;\n        }\n\n        const { status } = session;\n\n        const isPending =\n          status === TransactionServerStatusesEnum.pending ||\n          status === TransactionBatchStatusesEnum.signed ||\n          status === TransactionBatchStatusesEnum.sent;\n\n        return !isPending;\n      });\n\n      completedSessionIds.forEach((sessionId) => {\n        delete state[sessionId];\n      });\n\n      const filteredTransactionToasts = toastsState.transactionToasts.filter(\n        (toast) => !completedSessionIds.includes(toast.toastId)\n      );\n\n      toastsState.transactionToasts = filteredTransactionToasts;\n    },\n    false,\n    'clearCompletedTransactions'\n  );\n};\n"],
  "mappings": "kFAkBO,IAAMA,EAA4B,CAAC,CACxC,aAAAC,EACA,wBAAAC,EACA,OAAAC,EACA,mBAAAC,CACF,IAAqC,CACnC,IAAMC,EAAY,KAAK,IAAI,EAAE,SAAS,EACtC,OAAAC,EAAS,EAAE,SACT,CAAC,CAAE,aAAcC,CAAM,IAAM,CAC3BA,EAAMF,CAAS,EAAI,CACjB,aAAAJ,EACA,OAAAE,EACA,wBAAAD,EACA,wBAAyB,CAAC,EAC1B,mBAAAE,CACF,CACF,EACA,GACA,2BACF,EACOC,CACT,EAEaG,EAAsB,CAAC,CAClC,UAAAH,EACA,OAAAF,EACA,aAAAM,CACF,IAIM,CACJH,EAAS,EAAE,SACT,CAAC,CAAE,aAAcC,CAAM,IAAM,CAC3BA,EAAMF,CAAS,EAAE,OAASF,EAC1BI,EAAMF,CAAS,EAAE,aAAeI,CAClC,EACA,GACA,2BACF,CACF,EAEaC,EAA0B,CAAC,CACtC,UAAAL,EACA,YAAaM,CACf,IAG2C,CACzC,IAAIC,EAAiD,KACrD,OAAAN,EAAS,EAAE,SACT,CAAC,CAAE,aAAcC,CAAM,IAAM,CAC3B,IAAMN,EAAeM,EAAMF,CAAS,GAAG,aACvC,GAAIJ,GAAgB,KAAM,CACxBM,EAAMF,CAAS,EAAE,aAAeJ,EAAa,IAAKY,GAC5CA,EAAY,OAASF,EAAmB,KACnC,CACL,GAAGE,EACH,GAAIF,GAAsB,CAAC,CAC7B,EAEKE,CACR,EAED,IAAMV,EAASW,EAA6B,CAC1C,GAAGP,EAAMF,CAAS,EAAE,YACtB,CAAC,EAEGF,IACFK,EAAoB,CAClB,UAAAH,EACA,OAAAF,CACF,CAAC,EACDS,EAAYT,EAEhB,CACF,EACA,GACA,yBACF,EAEOS,CACT,EAEaG,EAA6B,IAAM,CAC9CT,EAAS,EAAE,SACT,CAAC,CAAE,aAAcC,EAAO,OAAQS,CAAY,IAAM,CAGhD,IAAMC,EAFa,OAAO,KAAKV,CAAK,EAEG,OAAQF,GAAc,CAC3D,IAAMa,EAAUX,EAAMF,CAAS,EAC/B,GAAI,CAACa,EACH,MAAO,GAGT,GAAM,CAAE,OAAAf,CAAO,EAAIe,EAOnB,MAAO,EAJLf,eACAA,cACAA,WAGJ,CAAC,EAEDc,EAAoB,QAASZ,GAAc,CACzC,OAAOE,EAAMF,CAAS,CACxB,CAAC,EAED,IAAMc,EAA4BH,EAAY,kBAAkB,OAC7DI,GAAU,CAACH,EAAoB,SAASG,EAAM,OAAO,CACxD,EAEAJ,EAAY,kBAAoBG,CAClC,EACA,GACA,4BACF,CACF",
  "names": ["createTransactionsSession", "transactions", "transactionsDisplayInfo", "status", "sessionInformation", "sessionId", "getStore", "state", "updateSessionStatus", "errorMessage", "updateTransactionStatus", "updatedTransaction", "newStatus", "transaction", "getTransactionsSessionStatus", "clearCompletedTransactions", "toastsState", "completedSessionIds", "session", "filteredTransactionToasts", "toast"]
}
