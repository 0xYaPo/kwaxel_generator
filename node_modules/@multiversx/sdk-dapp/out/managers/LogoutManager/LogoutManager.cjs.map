{
  "version": 3,
  "sources": ["../../../src/managers/LogoutManager/LogoutManager.ts"],
  "sourcesContent": ["import BigNumber from 'bignumber.js';\nimport { ToastIconsEnum } from 'managers/internal/ToastManager/helpers/getToastDataStateByStatus';\nimport { ToastManager } from 'managers/internal/ToastManager/ToastManager';\nimport { getAccountProvider } from 'providers/helpers/accountProvider';\nimport { ProviderTypeEnum } from 'providers/types/providerFactory.types';\nimport { getTokenExpiration } from 'services/nativeAuth/methods/getTokenExpiration';\nimport {\n  addressSelector,\n  isLoggedInSelector\n} from 'store/selectors/accountSelectors';\nimport { nativeAuthConfigSelector } from 'store/selectors/configSelectors';\nimport { tokenLoginSelector } from 'store/selectors/loginInfoSelectors';\nimport { getStore } from 'store/store';\nimport { getHumanReadableTokenExpirationTime } from './helpers/getHumanReadableTokenExpirationTime';\n\nexport class LogoutManager {\n  private static instance: LogoutManager;\n  private store = getStore();\n  private warningLogoutTimeoutRef: ReturnType<typeof setInterval> | null = null;\n  private actualLogoutTimeoutRef: ReturnType<typeof setInterval> | null = null;\n  private plannedLogoutTimeoutRef: ReturnType<typeof setInterval> | null = null;\n  private plannedLogoutKey: string | null = null;\n\n  public static getInstance(): LogoutManager {\n    if (!LogoutManager.instance) {\n      LogoutManager.instance = new LogoutManager();\n    }\n    return LogoutManager.instance;\n  }\n\n  private constructor() {}\n\n  public init = async () => {\n    if (!this.shouldStart()) {\n      return;\n    }\n\n    const state = this.store.getState();\n    const tokenLogin = tokenLoginSelector(state);\n\n    const { isExpired: isNativeAuthTokenExpired } = getTokenExpiration(\n      tokenLogin?.nativeAuthToken\n    );\n\n    if (isNativeAuthTokenExpired) {\n      const provider = getAccountProvider();\n      provider.logout();\n    } else {\n      this.addPlannedLogout();\n    }\n  };\n\n  public stop = () => {\n    clearTimeout(this.warningLogoutTimeoutRef ?? 0);\n    clearTimeout(this.plannedLogoutTimeoutRef ?? 0);\n    clearTimeout(this.actualLogoutTimeoutRef ?? 0);\n\n    this.warningLogoutTimeoutRef = null;\n    this.plannedLogoutTimeoutRef = null;\n    this.actualLogoutTimeoutRef = null;\n    this.plannedLogoutKey = null;\n  };\n\n  private readonly shouldStart = (): boolean => {\n    const state = this.store.getState();\n    const tokenLogin = tokenLoginSelector(state);\n    const isLoggedIn = isLoggedInSelector(state);\n    return Boolean(tokenLogin?.nativeAuthToken && isLoggedIn);\n  };\n\n  private addPlannedLogout = () => {\n    const provider = getAccountProvider();\n    const address = addressSelector(this.store.getState());\n    const isWebviewLogin = provider.getType() === ProviderTypeEnum.webview;\n\n    // prevent unexpected logout if webview login\n    if (!address || isWebviewLogin) {\n      return;\n    }\n\n    this.addLogoutWarning();\n\n    const tokenLogin = tokenLoginSelector(this.store.getState());\n\n    const { secondsUntilExpires, expiresAt } = getTokenExpiration(\n      tokenLogin?.nativeAuthToken\n    );\n\n    // Handle the actual logout functionality.\n    const secondsUntilExpiresBN = new BigNumber(String(secondsUntilExpires));\n    const plannedLogoutKey = `${address}_${expiresAt}`;\n    const plannedLogoutSet = this.plannedLogoutKey === plannedLogoutKey;\n\n    const isValidInterval =\n      secondsUntilExpires && secondsUntilExpiresBN.isGreaterThan(0);\n\n    if (!isValidInterval || plannedLogoutSet) {\n      return;\n    }\n\n    this.plannedLogoutKey = plannedLogoutKey;\n\n    clearTimeout(this.plannedLogoutTimeoutRef ?? 0);\n    const millisecondsUntilLogout = secondsUntilExpiresBN.times(1000);\n\n    this.actualLogoutTimeoutRef = setTimeout(() => {\n      ToastManager.getInstance().createCustomToast({\n        toastId: 'native-auth-logout',\n        iconClassName: 'warning',\n        title: 'Logging out',\n        icon: ToastIconsEnum.times,\n        message: 'Your session has expired!'\n      });\n      this.actualLogoutTimeoutRef = null;\n    }, millisecondsUntilLogout.toNumber() - 3000);\n\n    this.plannedLogoutTimeoutRef = setTimeout(() => {\n      provider.logout();\n      this.plannedLogoutTimeoutRef = null;\n      this.plannedLogoutKey = null;\n    }, millisecondsUntilLogout.toNumber());\n  };\n\n  private readonly addLogoutWarning = () => {\n    if (this.warningLogoutTimeoutRef) {\n      return;\n    }\n\n    const nativeAuthConfig = nativeAuthConfigSelector(this.store.getState());\n    const tokenLogin = tokenLoginSelector(this.store.getState());\n\n    const { secondsUntilExpires } = getTokenExpiration(\n      tokenLogin?.nativeAuthToken\n    );\n\n    const secondsUntilExpiresBN = new BigNumber(String(secondsUntilExpires));\n    const millisecondsUntilLogout = secondsUntilExpiresBN.times(1000);\n\n    if (\n      !secondsUntilExpires ||\n      secondsUntilExpiresBN.isLessThanOrEqualTo(0) ||\n      !nativeAuthConfig?.tokenExpirationToastWarningSeconds\n    ) {\n      return;\n    }\n\n    const logoutWarningOffsetSeconds = new BigNumber(\n      nativeAuthConfig?.tokenExpirationToastWarningSeconds ?? 0\n    );\n\n    const logoutWarningOffsetMilliseconds =\n      logoutWarningOffsetSeconds.times(1000);\n\n    const millisecondsUntilLogoutWarning = secondsUntilExpiresBN\n      .times(1000)\n      .minus(logoutWarningOffsetMilliseconds);\n\n    const readableMinutesUntilLogout = getHumanReadableTokenExpirationTime(\n      millisecondsUntilLogout.toNumber()\n    );\n\n    const timeoutUntilLogoutWarning =\n      millisecondsUntilLogoutWarning.isLessThanOrEqualTo(0)\n        ? 0\n        : millisecondsUntilLogoutWarning.toNumber();\n\n    clearTimeout(this.warningLogoutTimeoutRef ?? 0);\n\n    this.warningLogoutTimeoutRef = setTimeout(() => {\n      ToastManager.getInstance().createCustomToast({\n        toastId: 'native-auth-expired',\n        iconClassName: 'warning',\n        title: 'Session Expiration Warning',\n        icon: ToastIconsEnum.hourglass,\n        message: `Your session will expire in ${readableMinutesUntilLogout}!`\n      });\n      this.warningLogoutTimeoutRef = null;\n    }, timeoutUntilLogoutWarning);\n  };\n}\n"],
  "mappings": "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",
  "names": ["BigNumber"]
}
