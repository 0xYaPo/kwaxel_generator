"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LogoutManager_exports = {};
__export(LogoutManager_exports, {
  LogoutManager: () => LogoutManager
});
module.exports = __toCommonJS(LogoutManager_exports);
var import_bignumber = __toESM(require("bignumber.js"));
var import_getToastDataStateByStatus = require("../../managers/internal/ToastManager/helpers/getToastDataStateByStatus");
var import_ToastManager = require("../../managers/internal/ToastManager/ToastManager");
var import_accountProvider = require("../../providers/helpers/accountProvider");
var import_providerFactory = require("../../providers/types/providerFactory.types");
var import_getTokenExpiration = require("../../services/nativeAuth/methods/getTokenExpiration");
var import_accountSelectors = require("../../store/selectors/accountSelectors");
var import_configSelectors = require("../../store/selectors/configSelectors");
var import_loginInfoSelectors = require("../../store/selectors/loginInfoSelectors");
var import_store = require("../../store/store");
var import_getHumanReadableTokenExpirationTime = require("./helpers/getHumanReadableTokenExpirationTime");
class LogoutManager {
  constructor() {
    this.store = (0, import_store.getStore)();
    this.warningLogoutTimeoutRef = null;
    this.actualLogoutTimeoutRef = null;
    this.plannedLogoutTimeoutRef = null;
    this.plannedLogoutKey = null;
    this.init = async () => {
      if (!this.shouldStart()) {
        return;
      }
      const state = this.store.getState();
      const tokenLogin = (0, import_loginInfoSelectors.tokenLoginSelector)(state);
      const { isExpired: isNativeAuthTokenExpired } = (0, import_getTokenExpiration.getTokenExpiration)(
        tokenLogin?.nativeAuthToken
      );
      if (isNativeAuthTokenExpired) {
        const provider = (0, import_accountProvider.getAccountProvider)();
        provider.logout();
      } else {
        this.addPlannedLogout();
      }
    };
    this.stop = () => {
      clearTimeout(this.warningLogoutTimeoutRef ?? 0);
      clearTimeout(this.plannedLogoutTimeoutRef ?? 0);
      clearTimeout(this.actualLogoutTimeoutRef ?? 0);
      this.warningLogoutTimeoutRef = null;
      this.plannedLogoutTimeoutRef = null;
      this.actualLogoutTimeoutRef = null;
      this.plannedLogoutKey = null;
    };
    this.shouldStart = () => {
      const state = this.store.getState();
      const tokenLogin = (0, import_loginInfoSelectors.tokenLoginSelector)(state);
      const isLoggedIn = (0, import_accountSelectors.isLoggedInSelector)(state);
      return Boolean(tokenLogin?.nativeAuthToken && isLoggedIn);
    };
    this.addPlannedLogout = () => {
      const provider = (0, import_accountProvider.getAccountProvider)();
      const address = (0, import_accountSelectors.addressSelector)(this.store.getState());
      const isWebviewLogin = provider.getType() === import_providerFactory.ProviderTypeEnum.webview;
      if (!address || isWebviewLogin) {
        return;
      }
      this.addLogoutWarning();
      const tokenLogin = (0, import_loginInfoSelectors.tokenLoginSelector)(this.store.getState());
      const { secondsUntilExpires, expiresAt } = (0, import_getTokenExpiration.getTokenExpiration)(
        tokenLogin?.nativeAuthToken
      );
      const secondsUntilExpiresBN = new import_bignumber.default(String(secondsUntilExpires));
      const plannedLogoutKey = `${address}_${expiresAt}`;
      const plannedLogoutSet = this.plannedLogoutKey === plannedLogoutKey;
      const isValidInterval = secondsUntilExpires && secondsUntilExpiresBN.isGreaterThan(0);
      if (!isValidInterval || plannedLogoutSet) {
        return;
      }
      this.plannedLogoutKey = plannedLogoutKey;
      clearTimeout(this.plannedLogoutTimeoutRef ?? 0);
      const millisecondsUntilLogout = secondsUntilExpiresBN.times(1e3);
      this.actualLogoutTimeoutRef = setTimeout(() => {
        import_ToastManager.ToastManager.getInstance().createCustomToast({
          toastId: "native-auth-logout",
          iconClassName: "warning",
          title: "Logging out",
          icon: import_getToastDataStateByStatus.ToastIconsEnum.times,
          message: "Your session has expired!"
        });
        this.actualLogoutTimeoutRef = null;
      }, millisecondsUntilLogout.toNumber() - 3e3);
      this.plannedLogoutTimeoutRef = setTimeout(() => {
        provider.logout();
        this.plannedLogoutTimeoutRef = null;
        this.plannedLogoutKey = null;
      }, millisecondsUntilLogout.toNumber());
    };
    this.addLogoutWarning = () => {
      if (this.warningLogoutTimeoutRef) {
        return;
      }
      const nativeAuthConfig = (0, import_configSelectors.nativeAuthConfigSelector)(this.store.getState());
      const tokenLogin = (0, import_loginInfoSelectors.tokenLoginSelector)(this.store.getState());
      const { secondsUntilExpires } = (0, import_getTokenExpiration.getTokenExpiration)(
        tokenLogin?.nativeAuthToken
      );
      const secondsUntilExpiresBN = new import_bignumber.default(String(secondsUntilExpires));
      const millisecondsUntilLogout = secondsUntilExpiresBN.times(1e3);
      if (!secondsUntilExpires || secondsUntilExpiresBN.isLessThanOrEqualTo(0) || !nativeAuthConfig?.tokenExpirationToastWarningSeconds) {
        return;
      }
      const logoutWarningOffsetSeconds = new import_bignumber.default(
        nativeAuthConfig?.tokenExpirationToastWarningSeconds ?? 0
      );
      const logoutWarningOffsetMilliseconds = logoutWarningOffsetSeconds.times(1e3);
      const millisecondsUntilLogoutWarning = secondsUntilExpiresBN.times(1e3).minus(logoutWarningOffsetMilliseconds);
      const readableMinutesUntilLogout = (0, import_getHumanReadableTokenExpirationTime.getHumanReadableTokenExpirationTime)(
        millisecondsUntilLogout.toNumber()
      );
      const timeoutUntilLogoutWarning = millisecondsUntilLogoutWarning.isLessThanOrEqualTo(0) ? 0 : millisecondsUntilLogoutWarning.toNumber();
      clearTimeout(this.warningLogoutTimeoutRef ?? 0);
      this.warningLogoutTimeoutRef = setTimeout(() => {
        import_ToastManager.ToastManager.getInstance().createCustomToast({
          toastId: "native-auth-expired",
          iconClassName: "warning",
          title: "Session Expiration Warning",
          icon: import_getToastDataStateByStatus.ToastIconsEnum.hourglass,
          message: `Your session will expire in ${readableMinutesUntilLogout}!`
        });
        this.warningLogoutTimeoutRef = null;
      }, timeoutUntilLogoutWarning);
    };
  }
  static getInstance() {
    if (!LogoutManager.instance) {
      LogoutManager.instance = new LogoutManager();
    }
    return LogoutManager.instance;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LogoutManager
});
//# sourceMappingURL=LogoutManager.cjs.map
