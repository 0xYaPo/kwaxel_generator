{
  "version": 3,
  "sources": ["../../../src/managers/UnlockPanelManager/UnlockPanelManager.ts"],
  "sourcesContent": ["import { providerLabels } from 'constants/providerFactory.constants';\nimport { UITagsEnum } from 'constants/UITags.enum';\nimport { MvxUnlockPanel } from 'lib/sdkDappUi';\nimport { ProviderFactory } from 'providers/ProviderFactory';\nimport {\n  IProviderBase,\n  IProviderFactory,\n  ProviderTypeEnum,\n  ProviderType\n} from 'providers/types/providerFactory.types';\nimport { networkSelector } from 'store/selectors';\nimport { getState } from 'store/store';\nimport {\n  OnCloseUnlockPanelType,\n  LoginHandlerType,\n  UnlockPanelEventsEnum,\n  UnlockPanelManagerInitParamsType\n} from './UnlockPanelManager.types';\nimport { SidePanelBaseManager } from '../internal/SidePanelBaseManager';\n\ninterface IUnlockPanelManagerData {\n  providers: IProviderBase[] | null;\n  walletAddress: string | null;\n}\n\nexport class UnlockPanelManager extends SidePanelBaseManager<\n  MvxUnlockPanel,\n  IUnlockPanelManagerData,\n  UnlockPanelEventsEnum\n> {\n  protected initialData: IUnlockPanelManagerData = {\n    providers: null,\n    walletAddress: null\n  };\n\n  private static instance: UnlockPanelManager;\n  private static loginHandler: LoginHandlerType | null = null;\n  private static onClose: OnCloseUnlockPanelType | null = null;\n  private static allowedProviders?: ProviderType[] | null = null;\n\n  constructor() {\n    super({\n      uiTag: UITagsEnum.UNLOCK_PANEL,\n      uiDataUpdateEvent: UnlockPanelEventsEnum.OPEN\n    });\n\n    this.data = this.initialData;\n  }\n\n  public static getInstance(): UnlockPanelManager {\n    if (!UnlockPanelManager.instance) {\n      UnlockPanelManager.instance = new UnlockPanelManager();\n    }\n    return UnlockPanelManager.instance;\n  }\n\n  public static init(params: UnlockPanelManagerInitParamsType) {\n    this.loginHandler = params.loginHandler;\n    this.allowedProviders = params.allowedProviders;\n\n    if (params.onClose) {\n      this.onClose = params.onClose;\n    }\n\n    return this.getInstance();\n  }\n\n  public openUnlockPanel = async () => {\n    const { walletAddress } = networkSelector(getState());\n\n    this.data = {\n      providers: this.getProvidersList(),\n      walletAddress\n    };\n\n    await this.openUI();\n    this.notifyDataUpdate();\n  };\n\n  protected setupEventListeners = async () => {\n    if (!this.eventBus) {\n      return;\n    }\n\n    this.subscribeToEventBus(UnlockPanelEventsEnum.LOGIN, this.handleLogin);\n    this.subscribeToEventBus(\n      UnlockPanelEventsEnum.CANCEL_LOGIN,\n      this.handleCancelLogin\n    );\n    this.subscribeToEventBus(UnlockPanelEventsEnum.CLOSE, this.handleCloseUI);\n  };\n\n  private readonly handleCloseUI = async (options?: {\n    isLoginFinished?: boolean;\n  }) => {\n    if (!options?.isLoginFinished && UnlockPanelManager.onClose) {\n      UnlockPanelManager.onClose();\n    }\n\n    this.closeUI();\n  };\n\n  private readonly handleLogin = async ({ type, anchor }: IProviderFactory) => {\n    if (!UnlockPanelManager.loginHandler) {\n      throw new Error(\n        'Login callback not initialized. Please call `init()` first.'\n      );\n    }\n\n    try {\n      if (this.isSimpleLoginCallback(UnlockPanelManager.loginHandler)) {\n        const provider = await ProviderFactory.create({ type, anchor });\n        await provider.login();\n        UnlockPanelManager.loginHandler();\n      } else {\n        UnlockPanelManager.loginHandler({ type, anchor });\n      }\n      await this.handleCloseUI({ isLoginFinished: true });\n    } catch (error) {\n      console.error(error);\n      this.eventBus?.publish(\n        UnlockPanelEventsEnum.CANCEL_IN_PROVIDER,\n        this.data\n      );\n    }\n  };\n\n  private readonly handleCancelLogin = async () => {\n    await ProviderFactory.destroy();\n  };\n\n  private readonly isSimpleLoginCallback = (\n    login: LoginHandlerType\n  ): login is () => void => {\n    const takesZeroArguments = login.length === 0;\n    return takesZeroArguments;\n  };\n\n  private getProvidersList(): IProviderBase[] {\n    const customProviders = ProviderFactory.customProviders;\n\n    const defaultProviderTypes = Object.values(ProviderTypeEnum).filter(\n      (type) => {\n        const excludedProviders: string[] = [\n          ProviderTypeEnum.none,\n          ProviderTypeEnum.webview,\n          ProviderTypeEnum.passkey // temporary disabled\n        ];\n        return !excludedProviders.includes(type);\n      }\n    );\n\n    const allAvailableProviderTypes = [\n      ...defaultProviderTypes,\n      ...customProviders.map((p) => p.type)\n    ];\n\n    const customProviderLabels = customProviders.reduce(\n      (acc, provider) => {\n        acc[provider.type] = provider.name;\n        return acc;\n      },\n      {} as Record<ProviderType, string>\n    );\n\n    const allAvailableLabels = {\n      ...providerLabels,\n      ...customProviderLabels\n    };\n\n    const allowedProviderTypes = UnlockPanelManager.allowedProviders\n      ? UnlockPanelManager?.allowedProviders.filter((type) =>\n          allAvailableProviderTypes.includes(type)\n        )\n      : allAvailableProviderTypes;\n\n    const providerList = allowedProviderTypes.map((type) => {\n      const custom = customProviders.find(\n        (customProvider) => customProvider.type === type\n      );\n      if (custom) {\n        return custom;\n      }\n\n      return {\n        name: type in allAvailableLabels ? allAvailableLabels[type] : type,\n        type\n      };\n    });\n\n    return providerList;\n  }\n}\n"],
  "mappings": "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",
  "names": ["import_providerFactory"]
}
