"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var UnlockPanelManager_exports = {};
__export(UnlockPanelManager_exports, {
  UnlockPanelManager: () => UnlockPanelManager
});
module.exports = __toCommonJS(UnlockPanelManager_exports);
var import_providerFactory = require("../../constants/providerFactory.constants");
var import_UITags = require("../../constants/UITags.enum");
var import_ProviderFactory = require("../../providers/ProviderFactory");
var import_providerFactory2 = require("../../providers/types/providerFactory.types");
var import_selectors = require("../../store/selectors");
var import_store = require("../../store/store");
var import_UnlockPanelManager = require("./UnlockPanelManager.types");
var import_SidePanelBaseManager = require("../internal/SidePanelBaseManager");
const _UnlockPanelManager = class _UnlockPanelManager extends import_SidePanelBaseManager.SidePanelBaseManager {
  constructor() {
    super({
      uiTag: import_UITags.UITagsEnum.UNLOCK_PANEL,
      uiDataUpdateEvent: import_UnlockPanelManager.UnlockPanelEventsEnum.OPEN
    });
    this.initialData = {
      providers: null,
      walletAddress: null
    };
    this.openUnlockPanel = async () => {
      const { walletAddress } = (0, import_selectors.networkSelector)((0, import_store.getState)());
      this.data = {
        providers: this.getProvidersList(),
        walletAddress
      };
      await this.openUI();
      this.notifyDataUpdate();
    };
    this.setupEventListeners = async () => {
      if (!this.eventBus) {
        return;
      }
      this.subscribeToEventBus(import_UnlockPanelManager.UnlockPanelEventsEnum.LOGIN, this.handleLogin);
      this.subscribeToEventBus(
        import_UnlockPanelManager.UnlockPanelEventsEnum.CANCEL_LOGIN,
        this.handleCancelLogin
      );
      this.subscribeToEventBus(import_UnlockPanelManager.UnlockPanelEventsEnum.CLOSE, this.handleCloseUI);
    };
    this.handleCloseUI = async (options) => {
      if (!options?.isLoginFinished && _UnlockPanelManager.onClose) {
        _UnlockPanelManager.onClose();
      }
      this.closeUI();
    };
    this.handleLogin = async ({ type, anchor }) => {
      if (!_UnlockPanelManager.loginHandler) {
        throw new Error(
          "Login callback not initialized. Please call `init()` first."
        );
      }
      try {
        if (this.isSimpleLoginCallback(_UnlockPanelManager.loginHandler)) {
          const provider = await import_ProviderFactory.ProviderFactory.create({ type, anchor });
          await provider.login();
          _UnlockPanelManager.loginHandler();
        } else {
          _UnlockPanelManager.loginHandler({ type, anchor });
        }
        await this.handleCloseUI({ isLoginFinished: true });
      } catch (error) {
        console.error(error);
        this.eventBus?.publish(
          import_UnlockPanelManager.UnlockPanelEventsEnum.CANCEL_IN_PROVIDER,
          this.data
        );
      }
    };
    this.handleCancelLogin = async () => {
      await import_ProviderFactory.ProviderFactory.destroy();
    };
    this.isSimpleLoginCallback = (login) => {
      const takesZeroArguments = login.length === 0;
      return takesZeroArguments;
    };
    this.data = this.initialData;
  }
  static getInstance() {
    if (!_UnlockPanelManager.instance) {
      _UnlockPanelManager.instance = new _UnlockPanelManager();
    }
    return _UnlockPanelManager.instance;
  }
  static init(params) {
    this.loginHandler = params.loginHandler;
    this.allowedProviders = params.allowedProviders;
    if (params.onClose) {
      this.onClose = params.onClose;
    }
    return this.getInstance();
  }
  getProvidersList() {
    const customProviders = import_ProviderFactory.ProviderFactory.customProviders;
    const defaultProviderTypes = Object.values(import_providerFactory2.ProviderTypeEnum).filter(
      (type) => {
        const excludedProviders = [
          import_providerFactory2.ProviderTypeEnum.none,
          import_providerFactory2.ProviderTypeEnum.webview,
          import_providerFactory2.ProviderTypeEnum.passkey
          // temporary disabled
        ];
        return !excludedProviders.includes(type);
      }
    );
    const allAvailableProviderTypes = [
      ...defaultProviderTypes,
      ...customProviders.map((p) => p.type)
    ];
    const customProviderLabels = customProviders.reduce(
      (acc, provider) => {
        acc[provider.type] = provider.name;
        return acc;
      },
      {}
    );
    const allAvailableLabels = {
      ...import_providerFactory.providerLabels,
      ...customProviderLabels
    };
    const allowedProviderTypes = _UnlockPanelManager.allowedProviders ? _UnlockPanelManager?.allowedProviders.filter(
      (type) => allAvailableProviderTypes.includes(type)
    ) : allAvailableProviderTypes;
    const providerList = allowedProviderTypes.map((type) => {
      const custom = customProviders.find(
        (customProvider) => customProvider.type === type
      );
      if (custom) {
        return custom;
      }
      return {
        name: type in allAvailableLabels ? allAvailableLabels[type] : type,
        type
      };
    });
    return providerList;
  }
};
_UnlockPanelManager.loginHandler = null;
_UnlockPanelManager.onClose = null;
_UnlockPanelManager.allowedProviders = null;
let UnlockPanelManager = _UnlockPanelManager;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  UnlockPanelManager
});
//# sourceMappingURL=UnlockPanelManager.cjs.map
