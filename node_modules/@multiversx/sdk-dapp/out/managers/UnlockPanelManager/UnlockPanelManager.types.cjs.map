{
  "version": 3,
  "sources": ["../../../src/managers/UnlockPanelManager/UnlockPanelManager.types.ts"],
  "sourcesContent": ["import {\n  IProviderFactory,\n  ProviderType\n} from 'providers/types/providerFactory.types';\n\nexport enum UnlockPanelEventsEnum {\n  OPEN = 'OPEN',\n  CLOSE = 'CLOSE',\n  LOGIN = 'LOGIN',\n  CANCEL_LOGIN = 'CANCEL_LOGIN',\n  CANCEL_IN_PROVIDER = 'CANCEL_IN_PROVIDER',\n  /**\n   * User clicks Close button inside mounted provider\n   */\n  ANCHOR_CLOSE = 'ANCHOR_CLOSE'\n}\n\nexport type LoginFunctonType = ({\n  type,\n  anchor\n}: IProviderFactory) => Promise<void>;\n\nexport type LoginCallbackType = () => void;\n\nexport type LoginHandlerType = LoginFunctonType | LoginCallbackType;\nexport type OnCloseUnlockPanelType = () => void;\n\nexport type UnlockPanelManagerInitParamsType = {\n  /**\n     * Accepts:\n     * - 1\uFE0F\u20E3 a `callback` that is executed after login is performed\n     * - 2\uFE0F\u20E3 a `function` that handles the full login process\n     * @example\n     * ```ts\n     *  // 1\uFE0F\u20E3 callback\n        () => {\n          navigate('/dashboard');\n        };\n        // 2\uFE0F\u20E3 login handler function\n        async ({ type, anchor }: IProviderFactory) => {\n          const provider = await ProviderFactory.create({\n            type,\n            anchor\n          });\n          await provider?.login();\n          navigate('/dashboard');\n        };\n   *  ```\n   */\n  loginHandler: LoginHandlerType;\n  /**\n   * Controls which providers are shown in the unlock panel. By default, all providers are shown.\n   * Editing this property will allow you to:\n   * - Hide specific providers\n   * - Show only specific providers\n   * - Reorder the providers\n   * @example\n   * ```ts\n   *  allowedProviders: [ProviderTypeEnum.walletConnect, 'inMemoryProvider']\n   * ```\n   */\n  allowedProviders?: ProviderType[];\n  /**\n   * Callback function to handle UI behavior when the unlock panel is closed\n   * without completing the login process.\n   *\n   * Common use case: redirecting the user away from the `/unlock` route\n   * (e.g., back to the homepage or a previous screen) when login is cancelled or skipped.\n   * \n   * @example\n   * ```ts\n     onClose: () => {\n       navigate('/');\n     }\n   *  ```\n   */\n  onClose?: OnCloseUnlockPanelType;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAKO,IAAK,wBAAL,kBAAKA,2BAAL;AACL,EAAAA,uBAAA,UAAO;AACP,EAAAA,uBAAA,WAAQ;AACR,EAAAA,uBAAA,WAAQ;AACR,EAAAA,uBAAA,kBAAe;AACf,EAAAA,uBAAA,wBAAqB;AAIrB,EAAAA,uBAAA,kBAAe;AATL,SAAAA;AAAA,GAAA;",
  "names": ["UnlockPanelEventsEnum"]
}
