import { Transaction } from '../../lib/sdkCore';
import { TransactionTrackingConfigType } from '../../methods/initApp/initApp.types';
import { SignedTransactionType } from '../../types/transactions.types';
import { TransactionManagerTrackOptionsType } from './TransactionManager.types';
export declare class TransactionManager {
    private static instance;
    static getInstance(): TransactionManager;
    /**
     * Set callbacks to be executed when the transaction session is successful or fails.
     * @param onSuccess - The callback to run when the transaction session is successful.
     * @param onFail - The callback to run when the transaction session fails.
     * @example
     * ```ts
     * TransactionManager.setCallbacks({
     *   onSuccess: (sessionId) => {
     *     console.log('Transaction session successful', sessionId);
     *   },
     * });
     */
    setCallbacks: ({ onSuccess, onFail }: TransactionTrackingConfigType) => void;
    send: (signedTransactions: Transaction[] | Transaction[][]) => Promise<SignedTransactionType[] | SignedTransactionType[][]>;
    track: (sentTransactions: SignedTransactionType[] | SignedTransactionType[][], options?: TransactionManagerTrackOptionsType) => Promise<string>;
    private readonly sendSignedTransactions;
    private readonly sendSignedBatchTransactions;
    private readonly buildBatchId;
    private readonly sequentialToFlatArray;
    private readonly getIsSequential;
}
