{
  "version": 3,
  "sources": ["../../../../src/managers/TransactionManager/helpers/getAreTransactionsCorssShards.ts"],
  "sourcesContent": ["import { SignedTransactionType } from 'types/transactions.types';\nimport { getAddressFromDataField } from 'utils';\nimport { isCrossShardTransaction } from './isCrossShardTransaction';\n\nexport const getAreTransactionsCrossShards = (\n  transactions?: SignedTransactionType[],\n  accountShard = 1\n): boolean => {\n  if (!transactions?.length) {\n    return true;\n  }\n\n  return transactions.reduce(\n    (prevTxIsSameShard: boolean, { receiver, data }: SignedTransactionType) => {\n      const receiverAddress = getAddressFromDataField({\n        receiver,\n        data: data ?? ''\n      });\n      if (receiverAddress == null) {\n        return prevTxIsSameShard;\n      }\n      return (\n        prevTxIsSameShard &&\n        isCrossShardTransaction({\n          receiverAddress,\n          senderShard: accountShard\n        })\n      );\n    },\n    true\n  );\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAwC;AACxC,qCAAwC;AAEjC,MAAM,gCAAgC,CAC3C,cACA,eAAe,MACH;AACZ,MAAI,CAAC,cAAc,QAAQ;AACzB,WAAO;AAAA,EACT;AAEA,SAAO,aAAa;AAAA,IAClB,CAAC,mBAA4B,EAAE,UAAU,KAAK,MAA6B;AACzE,YAAM,sBAAkB,sCAAwB;AAAA,QAC9C;AAAA,QACA,MAAM,QAAQ;AAAA,MAChB,CAAC;AACD,UAAI,mBAAmB,MAAM;AAC3B,eAAO;AAAA,MACT;AACA,aACE,yBACA,wDAAwB;AAAA,QACtB;AAAA,QACA,aAAa;AAAA,MACf,CAAC;AAAA,IAEL;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
