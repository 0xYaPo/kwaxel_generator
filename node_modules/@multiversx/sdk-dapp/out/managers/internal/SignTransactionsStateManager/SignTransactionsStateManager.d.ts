import { Transaction } from '../../../lib/sdkCore';
import { MvxSignTransactionsPanel } from '../../../lib/sdkDappUi';
import { FungibleTransactionType, ISignTransactionsPanelData, SignEventsEnum, TokenType, ISignTransactionsPanelCommonData } from './types/signTransactionsPanel.types';
import { SidePanelBaseManager } from '../SidePanelBaseManager/SidePanelBaseManager';
export declare class SignTransactionsStateManager extends SidePanelBaseManager<MvxSignTransactionsPanel, ISignTransactionsPanelData, SignEventsEnum> {
    private static instance;
    readonly addressesPerPage = 10;
    private _ppuMap;
    protected initialData: ISignTransactionsPanelData;
    static getInstance(): SignTransactionsStateManager;
    constructor();
    get transactionsCount(): number;
    initializeGasPriceMap(transactions: Transaction[]): void;
    updateGasPriceMap({ nonce, ppu, initialGasPrice }: {
        nonce: number;
        initialGasPrice?: number;
        ppu: ISignTransactionsPanelCommonData['ppu'];
    }): void;
    updateCommonData(newCommonData: Partial<ISignTransactionsPanelCommonData>): void;
    updateIsLoading(newState: boolean): void;
    updateTokenTransaction(tokenData: ISignTransactionsPanelData['tokenTransaction']): void;
    updateNonFungibleTransaction(type: TokenType, fungibleData: FungibleTransactionType): void;
    get currentScreenIndex(): number;
    get ppuMap(): Record<number, {
        initialGasPrice: number;
        ppu: number | undefined;
    }>;
    protected setupEventListeners(): Promise<void>;
}
