{
  "version": 3,
  "sources": ["../../../../src/managers/internal/SignTransactionsStateManager/SignTransactionsStateManager.ts"],
  "sourcesContent": ["import { EMPTY_PPU } from 'constants/placeholders.constants';\nimport { UITagsEnum } from 'constants/UITags.enum';\nimport { Transaction } from 'lib/sdkCore';\nimport { MvxSignTransactionsPanel } from 'lib/sdkDappUi';\nimport { NftEnumType } from 'types/tokens.types';\nimport {\n  FungibleTransactionType,\n  ISignTransactionsPanelData,\n  SignEventsEnum,\n  TokenType,\n  ISignTransactionsPanelCommonData\n} from './types/signTransactionsPanel.types';\nimport { SidePanelBaseManager } from '../SidePanelBaseManager/SidePanelBaseManager';\n\nexport class SignTransactionsStateManager extends SidePanelBaseManager<\n  MvxSignTransactionsPanel,\n  ISignTransactionsPanelData,\n  SignEventsEnum\n> {\n  private static instance: SignTransactionsStateManager;\n  public readonly addressesPerPage = 10;\n\n  private _ppuMap: Record<\n    number, // nonce\n    {\n      initialGasPrice: number;\n      ppu: ISignTransactionsPanelCommonData['ppu'];\n    }\n  > = {};\n\n  protected initialData: ISignTransactionsPanelData = {\n    commonData: {\n      transactionsCount: 0,\n      currentIndexToSign: 0,\n      egldLabel: '',\n      currentIndex: 0,\n      ppuOptions: [],\n      address: '',\n      origin: ''\n    },\n    tokenTransaction: null,\n    nftTransaction: null,\n    sftTransaction: null\n  };\n\n  public static getInstance(): SignTransactionsStateManager {\n    if (!SignTransactionsStateManager.instance) {\n      SignTransactionsStateManager.instance =\n        new SignTransactionsStateManager();\n    }\n    return SignTransactionsStateManager.instance;\n  }\n\n  constructor() {\n    super({\n      uiDataUpdateEvent: SignEventsEnum.DATA_UPDATE,\n      uiTag: UITagsEnum.SIGN_TRANSACTIONS_PANEL\n    });\n    this.data = { ...this.initialData };\n  }\n\n  get transactionsCount() {\n    return this.data.commonData.transactionsCount;\n  }\n\n  public initializeGasPriceMap(transactions: Transaction[]) {\n    const ppu = EMPTY_PPU;\n\n    transactions\n      .filter((tx) => tx != null)\n      .forEach((transaction) => {\n        const initialGasPrice = transaction ? Number(transaction.gasPrice) : 0;\n\n        this.updateGasPriceMap({\n          nonce: Number(transaction.nonce),\n          ppu,\n          initialGasPrice\n        });\n      });\n\n    this.updateCommonData({ ppu });\n  }\n\n  public updateGasPriceMap({\n    nonce,\n    ppu,\n    initialGasPrice\n  }: {\n    nonce: number;\n    initialGasPrice?: number;\n    ppu: ISignTransactionsPanelCommonData['ppu'];\n  }) {\n    this._ppuMap[nonce] = {\n      ...this._ppuMap[nonce],\n      ppu\n    };\n\n    if (!initialGasPrice) {\n      return;\n    }\n\n    this._ppuMap[nonce].initialGasPrice = initialGasPrice;\n  }\n\n  public updateCommonData(\n    newCommonData: Partial<ISignTransactionsPanelCommonData>\n  ): void {\n    this.data.commonData = {\n      ...this.data.commonData,\n      ...newCommonData\n    };\n    this.notifyDataUpdate();\n  }\n\n  public updateIsLoading(newState: boolean) {\n    this.data.isLoading = newState;\n\n    this.notifyDataUpdate();\n  }\n\n  public updateTokenTransaction(\n    tokenData: ISignTransactionsPanelData['tokenTransaction']\n  ): void {\n    this.data.tokenTransaction = tokenData;\n    this.data.sftTransaction = null;\n    this.data.nftTransaction = null;\n\n    this.notifyDataUpdate();\n  }\n\n  public updateNonFungibleTransaction(\n    type: TokenType,\n    fungibleData: FungibleTransactionType\n  ): void {\n    switch (type) {\n      case NftEnumType.NonFungibleESDT:\n        this.data.nftTransaction = fungibleData;\n        this.data.tokenTransaction = null;\n        this.data.sftTransaction = null;\n        break;\n      case NftEnumType.SemiFungibleESDT:\n        this.data.sftTransaction = fungibleData;\n        this.data.nftTransaction = null;\n        this.data.tokenTransaction = null;\n        break;\n      default:\n        break;\n    }\n\n    this.notifyDataUpdate();\n  }\n\n  public get currentScreenIndex() {\n    return this.data.commonData.currentIndex;\n  }\n\n  public get ppuMap() {\n    return this._ppuMap;\n  }\n\n  protected async setupEventListeners() {\n    if (!this.eventBus) {\n      return;\n    }\n\n    this.subscribeToEventBus(SignEventsEnum.CLOSE, this.closeUI.bind(this));\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
