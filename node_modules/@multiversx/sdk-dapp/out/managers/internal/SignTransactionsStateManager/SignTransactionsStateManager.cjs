"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SignTransactionsStateManager_exports = {};
__export(SignTransactionsStateManager_exports, {
  SignTransactionsStateManager: () => SignTransactionsStateManager
});
module.exports = __toCommonJS(SignTransactionsStateManager_exports);
var import_placeholders = require("../../../constants/placeholders.constants");
var import_UITags = require("../../../constants/UITags.enum");
var import_tokens = require("../../../types/tokens.types");
var import_signTransactionsPanel = require("./types/signTransactionsPanel.types");
var import_SidePanelBaseManager = require("../SidePanelBaseManager/SidePanelBaseManager");
class SignTransactionsStateManager extends import_SidePanelBaseManager.SidePanelBaseManager {
  constructor() {
    super({
      uiDataUpdateEvent: import_signTransactionsPanel.SignEventsEnum.DATA_UPDATE,
      uiTag: import_UITags.UITagsEnum.SIGN_TRANSACTIONS_PANEL
    });
    this.addressesPerPage = 10;
    this._ppuMap = {};
    this.initialData = {
      commonData: {
        transactionsCount: 0,
        currentIndexToSign: 0,
        egldLabel: "",
        currentIndex: 0,
        ppuOptions: [],
        address: "",
        origin: ""
      },
      tokenTransaction: null,
      nftTransaction: null,
      sftTransaction: null
    };
    this.data = { ...this.initialData };
  }
  static getInstance() {
    if (!SignTransactionsStateManager.instance) {
      SignTransactionsStateManager.instance = new SignTransactionsStateManager();
    }
    return SignTransactionsStateManager.instance;
  }
  get transactionsCount() {
    return this.data.commonData.transactionsCount;
  }
  initializeGasPriceMap(transactions) {
    const ppu = import_placeholders.EMPTY_PPU;
    transactions.filter((tx) => tx != null).forEach((transaction) => {
      const initialGasPrice = transaction ? Number(transaction.gasPrice) : 0;
      this.updateGasPriceMap({
        nonce: Number(transaction.nonce),
        ppu,
        initialGasPrice
      });
    });
    this.updateCommonData({ ppu });
  }
  updateGasPriceMap({
    nonce,
    ppu,
    initialGasPrice
  }) {
    this._ppuMap[nonce] = {
      ...this._ppuMap[nonce],
      ppu
    };
    if (!initialGasPrice) {
      return;
    }
    this._ppuMap[nonce].initialGasPrice = initialGasPrice;
  }
  updateCommonData(newCommonData) {
    this.data.commonData = {
      ...this.data.commonData,
      ...newCommonData
    };
    this.notifyDataUpdate();
  }
  updateIsLoading(newState) {
    this.data.isLoading = newState;
    this.notifyDataUpdate();
  }
  updateTokenTransaction(tokenData) {
    this.data.tokenTransaction = tokenData;
    this.data.sftTransaction = null;
    this.data.nftTransaction = null;
    this.notifyDataUpdate();
  }
  updateNonFungibleTransaction(type, fungibleData) {
    switch (type) {
      case import_tokens.NftEnumType.NonFungibleESDT:
        this.data.nftTransaction = fungibleData;
        this.data.tokenTransaction = null;
        this.data.sftTransaction = null;
        break;
      case import_tokens.NftEnumType.SemiFungibleESDT:
        this.data.sftTransaction = fungibleData;
        this.data.nftTransaction = null;
        this.data.tokenTransaction = null;
        break;
      default:
        break;
    }
    this.notifyDataUpdate();
  }
  get currentScreenIndex() {
    return this.data.commonData.currentIndex;
  }
  get ppuMap() {
    return this._ppuMap;
  }
  async setupEventListeners() {
    if (!this.eventBus) {
      return;
    }
    this.subscribeToEventBus(import_signTransactionsPanel.SignEventsEnum.CLOSE, this.closeUI.bind(this));
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SignTransactionsStateManager
});
//# sourceMappingURL=SignTransactionsStateManager.cjs.map
