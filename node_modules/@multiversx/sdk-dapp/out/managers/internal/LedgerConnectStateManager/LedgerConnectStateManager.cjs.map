{
  "version": 3,
  "sources": ["../../../../src/managers/internal/LedgerConnectStateManager/LedgerConnectStateManager.ts"],
  "sourcesContent": ["import { UITagsEnum } from 'constants/UITags.enum';\n\nimport { MvxLedgerConnect } from 'lib/sdkDappUi';\nimport { UnlockPanelEventsEnum } from 'managers/UnlockPanelManager/UnlockPanelManager.types';\nimport {\n  IAccountScreenData,\n  ILedgerAccount,\n  ILedgerConnectPanelData,\n  IConnectScreenData,\n  IConfirmScreenData\n} from 'providers/strategies/LedgerProviderStrategy/types/ledger.types';\nimport { LedgerConnectEventsEnum } from './types';\nimport { UIBaseManager } from '../UIBaseManager/UIBaseManager';\n\ntype AuthEventsParams = {\n  handleCancel: () => Promise<void>;\n  handleAccessWallet: (payload: {\n    addressIndex: number;\n    selectedAddress: string;\n  }) => Promise<void>;\n  handleGoToPage: (page: number) => Promise<void>;\n};\n\ntype ProviderInitEventsParams = {\n  handleRetry: () => void;\n  handleCancel: () => void;\n};\n\nexport class LedgerConnectStateManager extends UIBaseManager<\n  MvxLedgerConnect,\n  ILedgerConnectPanelData,\n  LedgerConnectEventsEnum\n> {\n  private static instance: LedgerConnectStateManager;\n\n  public static getInstance(): LedgerConnectStateManager {\n    if (!LedgerConnectStateManager.instance) {\n      LedgerConnectStateManager.instance = new LedgerConnectStateManager();\n    }\n    return LedgerConnectStateManager.instance;\n  }\n\n  public readonly addressesPerPage = 10;\n\n  private allAccounts: ILedgerAccount[] = [];\n\n  // first screen data\n  private initialConnectScreenData: IConnectScreenData = {};\n  private connectScreenData: IConnectScreenData = {\n    ...this.initialConnectScreenData\n  };\n\n  // second screen data\n  private initialAccountScreenData: IAccountScreenData = {\n    accounts: this.allAccounts,\n    startIndex: 0,\n    addressesPerPage: this.addressesPerPage,\n    isLoading: true\n  };\n\n  private accountScreenData: IAccountScreenData = {\n    ...this.initialAccountScreenData\n  };\n\n  // third screen data\n  private initialConfirmScreenData: IConfirmScreenData = {\n    selectedAddress: '',\n    explorerLink: ''\n  };\n\n  private confirmScreenData: IConfirmScreenData = {\n    ...this.initialConfirmScreenData\n  };\n\n  protected initialData: ILedgerConnectPanelData = {\n    connectScreenData: this.initialConnectScreenData,\n    accountScreenData: this.initialAccountScreenData,\n    confirmScreenData: this.initialConfirmScreenData\n  };\n\n  constructor() {\n    super({\n      uiDataUpdateEvent: LedgerConnectEventsEnum.DATA_UPDATE,\n      uiTag: UITagsEnum.LEDGER_CONNECT\n    });\n    this.data = this.getInitialData();\n  }\n\n  public updateAllAccounts(accounts: ILedgerAccount[]): void {\n    this.allAccounts = accounts;\n    this.accountScreenData.accounts = accounts;\n  }\n\n  public updateStartIndex(startIndex: number): void {\n    this.accountScreenData.startIndex = startIndex;\n  }\n\n  public updateConnectScreen(members: Partial<IConnectScreenData>): void {\n    this.connectScreenData = {\n      ...this.connectScreenData,\n      ...members\n    };\n\n    this.data.confirmScreenData = null;\n    this.data.accountScreenData = null;\n    this.data.connectScreenData = this.connectScreenData;\n    this.notifyDataUpdate();\n  }\n\n  public updateAccountScreen(members: Partial<IAccountScreenData>): void {\n    this.accountScreenData = {\n      ...this.accountScreenData,\n      ...members\n    };\n    this.data.confirmScreenData = null;\n    this.data.accountScreenData = this.accountScreenData;\n    this.notifyDataUpdate();\n  }\n\n  public updateConfirmScreen(members: Partial<IConfirmScreenData>): void {\n    this.confirmScreenData = {\n      ...this.confirmScreenData,\n      ...members\n    };\n    this.data.accountScreenData = null;\n    this.data.confirmScreenData = this.confirmScreenData;\n    this.notifyDataUpdate();\n  }\n\n  public getAccountScreenData(): IAccountScreenData | null {\n    return this.data.accountScreenData;\n  }\n\n  public getConfirmScreenData(): IConfirmScreenData | null {\n    return this.data.confirmScreenData;\n  }\n\n  public getAllAccounts(): ILedgerAccount[] {\n    return this.allAccounts;\n  }\n\n  public subscribeToProviderInit({\n    handleRetry,\n    handleCancel\n  }: ProviderInitEventsParams): void {\n    if (!this.eventBus) {\n      return;\n    }\n\n    this.eventBus.subscribe(\n      LedgerConnectEventsEnum.CONNECT_DEVICE,\n      handleRetry\n    );\n    this.eventBus.subscribe(LedgerConnectEventsEnum.CLOSE, handleCancel);\n    this.eventBus.subscribe(\n      LedgerConnectEventsEnum.UI_DISCONNECTED,\n      this.destroy.bind(this)\n    );\n  }\n\n  public unsubscribeFromProviderInit({\n    handleRetry,\n    handleCancel\n  }: ProviderInitEventsParams): void {\n    if (!this.eventBus) {\n      return;\n    }\n\n    this.eventBus.unsubscribe(\n      LedgerConnectEventsEnum.CONNECT_DEVICE,\n      handleRetry\n    );\n    this.eventBus.unsubscribe(LedgerConnectEventsEnum.CLOSE, handleCancel);\n    this.eventBus.unsubscribe(\n      LedgerConnectEventsEnum.UI_DISCONNECTED,\n      this.destroy.bind(this)\n    );\n  }\n\n  public subscribeToAuthEvents({\n    handleCancel,\n    handleAccessWallet,\n    handleGoToPage\n  }: AuthEventsParams) {\n    if (!this.eventBus) {\n      return;\n    }\n\n    this.eventBus.subscribe(LedgerConnectEventsEnum.CLOSE, handleCancel);\n\n    this.eventBus.subscribe(\n      LedgerConnectEventsEnum.ACCESS_WALLET,\n      handleAccessWallet\n    );\n    this.eventBus.subscribe(LedgerConnectEventsEnum.GO_TO_PAGE, handleGoToPage);\n  }\n  public unsubscribeFromAuthEvents({\n    handleCancel,\n    handleAccessWallet,\n    handleGoToPage\n  }: AuthEventsParams) {\n    if (!this.eventBus) {\n      return;\n    }\n\n    this.eventBus.unsubscribe(LedgerConnectEventsEnum.CLOSE, handleCancel);\n\n    this.eventBus.unsubscribe(\n      LedgerConnectEventsEnum.ACCESS_WALLET,\n      handleAccessWallet\n    );\n    this.eventBus.unsubscribe(\n      LedgerConnectEventsEnum.GO_TO_PAGE,\n      handleGoToPage\n    );\n  }\n\n  public handleClose() {\n    if (this.anchor) {\n      this.anchor?.dispatchEvent(\n        new CustomEvent(UnlockPanelEventsEnum.ANCHOR_CLOSE, {\n          composed: false,\n          bubbles: false\n        })\n      );\n    } else {\n      this.destroy();\n    }\n  }\n\n  protected resetData(): void {\n    this.accountScreenData = { ...this.initialAccountScreenData };\n    this.confirmScreenData = { ...this.initialConfirmScreenData };\n    this.connectScreenData = { ...this.initialConnectScreenData };\n    super.resetData();\n  }\n\n  protected async setupEventListeners() {\n    if (!this.eventBus) {\n      return;\n    }\n\n    this.eventBus.subscribe(\n      LedgerConnectEventsEnum.CLOSE,\n      this.handleClose.bind(this)\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
