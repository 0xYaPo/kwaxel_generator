import { MvxLedgerConnect } from '../../../lib/sdkDappUi';
import { IAccountScreenData, ILedgerAccount, ILedgerConnectPanelData, IConnectScreenData, IConfirmScreenData } from '../../../providers/strategies/LedgerProviderStrategy/types/ledger.types';
import { LedgerConnectEventsEnum } from './types';
import { UIBaseManager } from '../UIBaseManager/UIBaseManager';
type AuthEventsParams = {
    handleCancel: () => Promise<void>;
    handleAccessWallet: (payload: {
        addressIndex: number;
        selectedAddress: string;
    }) => Promise<void>;
    handleGoToPage: (page: number) => Promise<void>;
};
type ProviderInitEventsParams = {
    handleRetry: () => void;
    handleCancel: () => void;
};
export declare class LedgerConnectStateManager extends UIBaseManager<MvxLedgerConnect, ILedgerConnectPanelData, LedgerConnectEventsEnum> {
    private static instance;
    static getInstance(): LedgerConnectStateManager;
    readonly addressesPerPage = 10;
    private allAccounts;
    private initialConnectScreenData;
    private connectScreenData;
    private initialAccountScreenData;
    private accountScreenData;
    private initialConfirmScreenData;
    private confirmScreenData;
    protected initialData: ILedgerConnectPanelData;
    constructor();
    updateAllAccounts(accounts: ILedgerAccount[]): void;
    updateStartIndex(startIndex: number): void;
    updateConnectScreen(members: Partial<IConnectScreenData>): void;
    updateAccountScreen(members: Partial<IAccountScreenData>): void;
    updateConfirmScreen(members: Partial<IConfirmScreenData>): void;
    getAccountScreenData(): IAccountScreenData | null;
    getConfirmScreenData(): IConfirmScreenData | null;
    getAllAccounts(): ILedgerAccount[];
    subscribeToProviderInit({ handleRetry, handleCancel }: ProviderInitEventsParams): void;
    unsubscribeFromProviderInit({ handleRetry, handleCancel }: ProviderInitEventsParams): void;
    subscribeToAuthEvents({ handleCancel, handleAccessWallet, handleGoToPage }: AuthEventsParams): void;
    unsubscribeFromAuthEvents({ handleCancel, handleAccessWallet, handleGoToPage }: AuthEventsParams): void;
    handleClose(): void;
    protected resetData(): void;
    protected setupEventListeners(): Promise<void>;
}
export {};
