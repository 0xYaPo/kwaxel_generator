"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LedgerConnectStateManager_exports = {};
__export(LedgerConnectStateManager_exports, {
  LedgerConnectStateManager: () => LedgerConnectStateManager
});
module.exports = __toCommonJS(LedgerConnectStateManager_exports);
var import_UITags = require("../../../constants/UITags.enum");
var import_UnlockPanelManager = require("../../../managers/UnlockPanelManager/UnlockPanelManager.types");
var import_types = require("./types");
var import_UIBaseManager = require("../UIBaseManager/UIBaseManager");
class LedgerConnectStateManager extends import_UIBaseManager.UIBaseManager {
  constructor() {
    super({
      uiDataUpdateEvent: import_types.LedgerConnectEventsEnum.DATA_UPDATE,
      uiTag: import_UITags.UITagsEnum.LEDGER_CONNECT
    });
    this.addressesPerPage = 10;
    this.allAccounts = [];
    // first screen data
    this.initialConnectScreenData = {};
    this.connectScreenData = {
      ...this.initialConnectScreenData
    };
    // second screen data
    this.initialAccountScreenData = {
      accounts: this.allAccounts,
      startIndex: 0,
      addressesPerPage: this.addressesPerPage,
      isLoading: true
    };
    this.accountScreenData = {
      ...this.initialAccountScreenData
    };
    // third screen data
    this.initialConfirmScreenData = {
      selectedAddress: "",
      explorerLink: ""
    };
    this.confirmScreenData = {
      ...this.initialConfirmScreenData
    };
    this.initialData = {
      connectScreenData: this.initialConnectScreenData,
      accountScreenData: this.initialAccountScreenData,
      confirmScreenData: this.initialConfirmScreenData
    };
    this.data = this.getInitialData();
  }
  static getInstance() {
    if (!LedgerConnectStateManager.instance) {
      LedgerConnectStateManager.instance = new LedgerConnectStateManager();
    }
    return LedgerConnectStateManager.instance;
  }
  updateAllAccounts(accounts) {
    this.allAccounts = accounts;
    this.accountScreenData.accounts = accounts;
  }
  updateStartIndex(startIndex) {
    this.accountScreenData.startIndex = startIndex;
  }
  updateConnectScreen(members) {
    this.connectScreenData = {
      ...this.connectScreenData,
      ...members
    };
    this.data.confirmScreenData = null;
    this.data.accountScreenData = null;
    this.data.connectScreenData = this.connectScreenData;
    this.notifyDataUpdate();
  }
  updateAccountScreen(members) {
    this.accountScreenData = {
      ...this.accountScreenData,
      ...members
    };
    this.data.confirmScreenData = null;
    this.data.accountScreenData = this.accountScreenData;
    this.notifyDataUpdate();
  }
  updateConfirmScreen(members) {
    this.confirmScreenData = {
      ...this.confirmScreenData,
      ...members
    };
    this.data.accountScreenData = null;
    this.data.confirmScreenData = this.confirmScreenData;
    this.notifyDataUpdate();
  }
  getAccountScreenData() {
    return this.data.accountScreenData;
  }
  getConfirmScreenData() {
    return this.data.confirmScreenData;
  }
  getAllAccounts() {
    return this.allAccounts;
  }
  subscribeToProviderInit({
    handleRetry,
    handleCancel
  }) {
    if (!this.eventBus) {
      return;
    }
    this.eventBus.subscribe(
      import_types.LedgerConnectEventsEnum.CONNECT_DEVICE,
      handleRetry
    );
    this.eventBus.subscribe(import_types.LedgerConnectEventsEnum.CLOSE, handleCancel);
    this.eventBus.subscribe(
      import_types.LedgerConnectEventsEnum.UI_DISCONNECTED,
      this.destroy.bind(this)
    );
  }
  unsubscribeFromProviderInit({
    handleRetry,
    handleCancel
  }) {
    if (!this.eventBus) {
      return;
    }
    this.eventBus.unsubscribe(
      import_types.LedgerConnectEventsEnum.CONNECT_DEVICE,
      handleRetry
    );
    this.eventBus.unsubscribe(import_types.LedgerConnectEventsEnum.CLOSE, handleCancel);
    this.eventBus.unsubscribe(
      import_types.LedgerConnectEventsEnum.UI_DISCONNECTED,
      this.destroy.bind(this)
    );
  }
  subscribeToAuthEvents({
    handleCancel,
    handleAccessWallet,
    handleGoToPage
  }) {
    if (!this.eventBus) {
      return;
    }
    this.eventBus.subscribe(import_types.LedgerConnectEventsEnum.CLOSE, handleCancel);
    this.eventBus.subscribe(
      import_types.LedgerConnectEventsEnum.ACCESS_WALLET,
      handleAccessWallet
    );
    this.eventBus.subscribe(import_types.LedgerConnectEventsEnum.GO_TO_PAGE, handleGoToPage);
  }
  unsubscribeFromAuthEvents({
    handleCancel,
    handleAccessWallet,
    handleGoToPage
  }) {
    if (!this.eventBus) {
      return;
    }
    this.eventBus.unsubscribe(import_types.LedgerConnectEventsEnum.CLOSE, handleCancel);
    this.eventBus.unsubscribe(
      import_types.LedgerConnectEventsEnum.ACCESS_WALLET,
      handleAccessWallet
    );
    this.eventBus.unsubscribe(
      import_types.LedgerConnectEventsEnum.GO_TO_PAGE,
      handleGoToPage
    );
  }
  handleClose() {
    if (this.anchor) {
      this.anchor?.dispatchEvent(
        new CustomEvent(import_UnlockPanelManager.UnlockPanelEventsEnum.ANCHOR_CLOSE, {
          composed: false,
          bubbles: false
        })
      );
    } else {
      this.destroy();
    }
  }
  resetData() {
    this.accountScreenData = { ...this.initialAccountScreenData };
    this.confirmScreenData = { ...this.initialConfirmScreenData };
    this.connectScreenData = { ...this.initialConnectScreenData };
    super.resetData();
  }
  async setupEventListeners() {
    if (!this.eventBus) {
      return;
    }
    this.eventBus.subscribe(
      import_types.LedgerConnectEventsEnum.CLOSE,
      this.handleClose.bind(this)
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LedgerConnectStateManager
});
//# sourceMappingURL=LedgerConnectStateManager.cjs.map
