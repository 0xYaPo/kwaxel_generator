{
  "version": 3,
  "sources": ["../../../../src/managers/internal/LedgerIdleStateManager/LedgerIdleStateManager.ts"],
  "sourcesContent": ["import { DappProvider } from 'providers/DappProvider';\nimport {\n  getAccountProvider,\n  setAccountProvider\n} from 'providers/helpers/accountProvider';\nimport { LedgerProviderStrategy } from 'providers/strategies/LedgerProviderStrategy/LedgerProviderStrategy';\nimport { ProviderTypeEnum } from 'providers/types/providerFactory.types';\nimport { isLoggedInSelector, loginInfoSelector } from 'store/selectors';\nimport { isSidePanelOpenSelector } from 'store/selectors/uiSelectors';\nimport { getState, getStore } from 'store/store';\nimport { ToastIconsEnum } from '../ToastManager/helpers/getToastDataStateByStatus';\nimport { ToastManager } from '../ToastManager/ToastManager';\n\nconst LEDGER_IDLE_STATE_CHECK_INTERVAL = 30_000;\nconst LEDGER_IDLE_STATE_RECONNECT_INTERVAL = 5_000;\nconst RECONNECT_SUCCESS_DURATION = 3000;\n\nexport class LedgerIdleStateManager {\n  private static instance: LedgerIdleStateManager;\n  private store = getStore();\n  private connectionCheckInterval: ReturnType<typeof setInterval> | null = null;\n  private recreateProviderInterval: ReturnType<typeof setInterval> | null =\n    null;\n\n  public static getInstance(): LedgerIdleStateManager {\n    if (!LedgerIdleStateManager.instance) {\n      LedgerIdleStateManager.instance = new LedgerIdleStateManager();\n    }\n    return LedgerIdleStateManager.instance;\n  }\n\n  private constructor() {}\n\n  public init = async () => {\n    this.startCheckConnectionLoop();\n  };\n\n  private readonly shouldCheckConnection = (): boolean => {\n    const state = this.store.getState();\n    const { providerType } = loginInfoSelector(state);\n    const isLoggedIn = isLoggedInSelector(state);\n    return Boolean(providerType === ProviderTypeEnum.ledger && isLoggedIn);\n  };\n\n  private readonly startCheckConnectionLoop = () => {\n    if (this.connectionCheckInterval) {\n      return;\n    }\n\n    this.connectionCheckInterval = setInterval(async () => {\n      const isSigningProcess = isSidePanelOpenSelector(getState());\n\n      if (!this.shouldCheckConnection() || isSigningProcess) {\n        return;\n      }\n\n      try {\n        const ledgerProvider = getAccountProvider().getProvider();\n        await ledgerProvider.getAddress();\n      } catch (_error) {\n        ToastManager.getInstance().createCustomToast({\n          toastId: 'ledger-provider-idle-warning',\n          icon: ToastIconsEnum.times,\n          iconClassName: 'warning',\n          message: 'Unlock your device to continue signing transactions',\n          title: 'Ledger disconnected'\n        });\n        this.reset();\n        if (this.recreateProviderInterval) {\n          return;\n        }\n        this.recreateProviderInterval = setInterval(\n          this.reconnectProvider,\n          LEDGER_IDLE_STATE_RECONNECT_INTERVAL\n        );\n      }\n    }, LEDGER_IDLE_STATE_CHECK_INTERVAL);\n  };\n\n  private readonly reconnectProvider = async () => {\n    if (!this.shouldCheckConnection()) {\n      return;\n    }\n\n    try {\n      const createdProvider = new LedgerProviderStrategy({\n        shouldInitProvider: true\n      });\n\n      await createdProvider.init();\n\n      const dappProvider = new DappProvider(createdProvider);\n      createdProvider.getType = () => ProviderTypeEnum.ledger;\n      setAccountProvider(dappProvider);\n\n      this.reset();\n      clearInterval(this.recreateProviderInterval ?? 0);\n      this.recreateProviderInterval = null;\n\n      ToastManager.getInstance().createCustomToast({\n        toastId: 'ledger-provider-idle-warning',\n        duration: RECONNECT_SUCCESS_DURATION,\n        icon: ToastIconsEnum.check,\n        iconClassName: 'success',\n        message: 'Your device is ready to sign transactions',\n        title: 'Ledger reconnected'\n      });\n      this.startCheckConnectionLoop();\n    } catch (_err) {\n      console.log('Unable to reconnect to Ledger');\n    }\n  };\n\n  public reset = () => {\n    clearInterval(this.connectionCheckInterval ?? 0);\n    this.connectionCheckInterval = null;\n  };\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA6B;AAC7B,6BAGO;AACP,oCAAuC;AACvC,6BAAiC;AACjC,uBAAsD;AACtD,yBAAwC;AACxC,mBAAmC;AACnC,uCAA+B;AAC/B,0BAA6B;AAE7B,MAAM,mCAAmC;AACzC,MAAM,uCAAuC;AAC7C,MAAM,6BAA6B;AAE5B,MAAM,uBAAuB;AAAA,EAc1B,cAAc;AAZtB,SAAQ,YAAQ,uBAAS;AACzB,SAAQ,0BAAiE;AACzE,SAAQ,2BACN;AAWF,SAAO,OAAO,YAAY;AACxB,WAAK,yBAAyB;AAAA,IAChC;AAEA,SAAiB,wBAAwB,MAAe;AACtD,YAAM,QAAQ,KAAK,MAAM,SAAS;AAClC,YAAM,EAAE,aAAa,QAAI,oCAAkB,KAAK;AAChD,YAAM,iBAAa,qCAAmB,KAAK;AAC3C,aAAO,QAAQ,iBAAiB,wCAAiB,UAAU,UAAU;AAAA,IACvE;AAEA,SAAiB,2BAA2B,MAAM;AAChD,UAAI,KAAK,yBAAyB;AAChC;AAAA,MACF;AAEA,WAAK,0BAA0B,YAAY,YAAY;AACrD,cAAM,uBAAmB,gDAAwB,uBAAS,CAAC;AAE3D,YAAI,CAAC,KAAK,sBAAsB,KAAK,kBAAkB;AACrD;AAAA,QACF;AAEA,YAAI;AACF,gBAAM,qBAAiB,2CAAmB,EAAE,YAAY;AACxD,gBAAM,eAAe,WAAW;AAAA,QAClC,SAAS,QAAQ;AACf,2CAAa,YAAY,EAAE,kBAAkB;AAAA,YAC3C,SAAS;AAAA,YACT,MAAM,gDAAe;AAAA,YACrB,eAAe;AAAA,YACf,SAAS;AAAA,YACT,OAAO;AAAA,UACT,CAAC;AACD,eAAK,MAAM;AACX,cAAI,KAAK,0BAA0B;AACjC;AAAA,UACF;AACA,eAAK,2BAA2B;AAAA,YAC9B,KAAK;AAAA,YACL;AAAA,UACF;AAAA,QACF;AAAA,MACF,GAAG,gCAAgC;AAAA,IACrC;AAEA,SAAiB,oBAAoB,YAAY;AAC/C,UAAI,CAAC,KAAK,sBAAsB,GAAG;AACjC;AAAA,MACF;AAEA,UAAI;AACF,cAAM,kBAAkB,IAAI,qDAAuB;AAAA,UACjD,oBAAoB;AAAA,QACtB,CAAC;AAED,cAAM,gBAAgB,KAAK;AAE3B,cAAM,eAAe,IAAI,iCAAa,eAAe;AACrD,wBAAgB,UAAU,MAAM,wCAAiB;AACjD,uDAAmB,YAAY;AAE/B,aAAK,MAAM;AACX,sBAAc,KAAK,4BAA4B,CAAC;AAChD,aAAK,2BAA2B;AAEhC,yCAAa,YAAY,EAAE,kBAAkB;AAAA,UAC3C,SAAS;AAAA,UACT,UAAU;AAAA,UACV,MAAM,gDAAe;AAAA,UACrB,eAAe;AAAA,UACf,SAAS;AAAA,UACT,OAAO;AAAA,QACT,CAAC;AACD,aAAK,yBAAyB;AAAA,MAChC,SAAS,MAAM;AACb,gBAAQ,IAAI,+BAA+B;AAAA,MAC7C;AAAA,IACF;AAEA,SAAO,QAAQ,MAAM;AACnB,oBAAc,KAAK,2BAA2B,CAAC;AAC/C,WAAK,0BAA0B;AAAA,IACjC;AAAA,EArFuB;AAAA,EAPvB,OAAc,cAAsC;AAClD,QAAI,CAAC,uBAAuB,UAAU;AACpC,6BAAuB,WAAW,IAAI,uBAAuB;AAAA,IAC/D;AACA,WAAO,uBAAuB;AAAA,EAChC;AAwFF;",
  "names": []
}
