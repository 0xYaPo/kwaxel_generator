"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var LedgerIdleStateManager_exports = {};
__export(LedgerIdleStateManager_exports, {
  LedgerIdleStateManager: () => LedgerIdleStateManager
});
module.exports = __toCommonJS(LedgerIdleStateManager_exports);
var import_DappProvider = require("../../../providers/DappProvider");
var import_accountProvider = require("../../../providers/helpers/accountProvider");
var import_LedgerProviderStrategy = require("../../../providers/strategies/LedgerProviderStrategy/LedgerProviderStrategy");
var import_providerFactory = require("../../../providers/types/providerFactory.types");
var import_selectors = require("../../../store/selectors");
var import_uiSelectors = require("../../../store/selectors/uiSelectors");
var import_store = require("../../../store/store");
var import_getToastDataStateByStatus = require("../ToastManager/helpers/getToastDataStateByStatus");
var import_ToastManager = require("../ToastManager/ToastManager");
const LEDGER_IDLE_STATE_CHECK_INTERVAL = 3e4;
const LEDGER_IDLE_STATE_RECONNECT_INTERVAL = 5e3;
const RECONNECT_SUCCESS_DURATION = 3e3;
class LedgerIdleStateManager {
  constructor() {
    this.store = (0, import_store.getStore)();
    this.connectionCheckInterval = null;
    this.recreateProviderInterval = null;
    this.init = async () => {
      this.startCheckConnectionLoop();
    };
    this.shouldCheckConnection = () => {
      const state = this.store.getState();
      const { providerType } = (0, import_selectors.loginInfoSelector)(state);
      const isLoggedIn = (0, import_selectors.isLoggedInSelector)(state);
      return Boolean(providerType === import_providerFactory.ProviderTypeEnum.ledger && isLoggedIn);
    };
    this.startCheckConnectionLoop = () => {
      if (this.connectionCheckInterval) {
        return;
      }
      this.connectionCheckInterval = setInterval(async () => {
        const isSigningProcess = (0, import_uiSelectors.isSidePanelOpenSelector)((0, import_store.getState)());
        if (!this.shouldCheckConnection() || isSigningProcess) {
          return;
        }
        try {
          const ledgerProvider = (0, import_accountProvider.getAccountProvider)().getProvider();
          await ledgerProvider.getAddress();
        } catch (_error) {
          import_ToastManager.ToastManager.getInstance().createCustomToast({
            toastId: "ledger-provider-idle-warning",
            icon: import_getToastDataStateByStatus.ToastIconsEnum.times,
            iconClassName: "warning",
            message: "Unlock your device to continue signing transactions",
            title: "Ledger disconnected"
          });
          this.reset();
          if (this.recreateProviderInterval) {
            return;
          }
          this.recreateProviderInterval = setInterval(
            this.reconnectProvider,
            LEDGER_IDLE_STATE_RECONNECT_INTERVAL
          );
        }
      }, LEDGER_IDLE_STATE_CHECK_INTERVAL);
    };
    this.reconnectProvider = async () => {
      if (!this.shouldCheckConnection()) {
        return;
      }
      try {
        const createdProvider = new import_LedgerProviderStrategy.LedgerProviderStrategy({
          shouldInitProvider: true
        });
        await createdProvider.init();
        const dappProvider = new import_DappProvider.DappProvider(createdProvider);
        createdProvider.getType = () => import_providerFactory.ProviderTypeEnum.ledger;
        (0, import_accountProvider.setAccountProvider)(dappProvider);
        this.reset();
        clearInterval(this.recreateProviderInterval ?? 0);
        this.recreateProviderInterval = null;
        import_ToastManager.ToastManager.getInstance().createCustomToast({
          toastId: "ledger-provider-idle-warning",
          duration: RECONNECT_SUCCESS_DURATION,
          icon: import_getToastDataStateByStatus.ToastIconsEnum.check,
          iconClassName: "success",
          message: "Your device is ready to sign transactions",
          title: "Ledger reconnected"
        });
        this.startCheckConnectionLoop();
      } catch (_err) {
        console.log("Unable to reconnect to Ledger");
      }
    };
    this.reset = () => {
      clearInterval(this.connectionCheckInterval ?? 0);
      this.connectionCheckInterval = null;
    };
  }
  static getInstance() {
    if (!LedgerIdleStateManager.instance) {
      LedgerIdleStateManager.instance = new LedgerIdleStateManager();
    }
    return LedgerIdleStateManager.instance;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  LedgerIdleStateManager
});
//# sourceMappingURL=LedgerIdleStateManager.cjs.map
