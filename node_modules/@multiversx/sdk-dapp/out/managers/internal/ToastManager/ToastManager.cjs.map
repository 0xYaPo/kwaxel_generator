{
  "version": 3,
  "sources": ["../../../../src/managers/internal/ToastManager/ToastManager.ts"],
  "sourcesContent": ["import isEqual from 'lodash.isequal';\nimport { DEFAULT_TOAST_LIEFTIME } from 'constants/transactions.constants';\nimport { UITagsEnum } from 'constants/UITags.enum';\nimport { MvxToastList } from 'lib/sdkDappUi';\nimport { NotificationsFeedManager } from 'managers/NotificationsFeedManager/NotificationsFeedManager';\nimport {\n  customToastCloseHandlersDictionary,\n  customToastComponentDictionary,\n  removeAllCustomToasts,\n  removeCustomToast,\n  removeTransactionToast,\n  addTransactionToast,\n  createCustomToast\n} from 'store/actions/toasts/toastsActions';\nimport {\n  getIsTransactionFailed,\n  getIsTransactionSuccessful,\n  getIsTransactionTimedOut\n} from 'store/actions/transactions/transactionStateByStatus';\n\nimport { CustomToastType } from 'store/slices/toast/toastSlice.types';\nimport { getStore } from 'store/store';\nimport { IEventBus } from 'types/manager.types';\nimport { ProviderErrorsEnum } from 'types/provider.types';\nimport { ComponentFactory } from 'utils/ComponentFactory';\nimport { createToastsFromTransactions } from './helpers/createToastsFromTransactions';\nimport { LifetimeManager } from './helpers/LifetimeManager';\nimport { ITransactionToast, ToastEventsEnum } from './types';\n\ninterface IToastManager {\n  successfulToastLifetime?: number;\n}\n\nexport class ToastManager {\n  private readonly lifetimeManager: LifetimeManager;\n  private isCreatingElement = false;\n  private static instance: ToastManager;\n  private toastsElement: MvxToastList | null = null;\n  private transactionToasts: ITransactionToast[] = [];\n  private customToasts: CustomToastType[] = [];\n  private successfulToastLifetime?: number;\n  private storeToastsSubscription: () => void = () => null;\n  private readonly notificationsFeedManager: NotificationsFeedManager;\n  private eventBusUnsubscribeFunctions: (() => void)[] = [];\n  private eventBus: IEventBus<\n    ITransactionToast[] | CustomToastType[] | null\n  > | null = null;\n\n  store = getStore();\n\n  constructor() {\n    this.destroy();\n    this.lifetimeManager = new LifetimeManager();\n\n    this.notificationsFeedManager = NotificationsFeedManager.getInstance();\n  }\n\n  public async init({\n    successfulToastLifetime = DEFAULT_TOAST_LIEFTIME\n  }: IToastManager = {}) {\n    this.successfulToastLifetime = successfulToastLifetime;\n\n    this.lifetimeManager.init({ successfulToastLifetime });\n\n    await this.updateTransactionToastsList();\n    await this.updateCustomToastList();\n\n    await this.subscribeToEventBusNotifications();\n\n    this.storeToastsSubscription = this.store.subscribe(\n      async (\n        { toasts, transactions },\n        { toasts: prevToasts, transactions: prevTransactions }\n      ) => {\n        if (\n          !isEqual(prevToasts.transactionToasts, toasts.transactionToasts) ||\n          !isEqual(prevTransactions, transactions)\n        ) {\n          await this.updateTransactionToastsList();\n        }\n\n        if (!isEqual(prevToasts.customToasts, toasts.customToasts)) {\n          await this.updateCustomToastList();\n        }\n      }\n    );\n  }\n\n  public static getInstance(): ToastManager {\n    if (!ToastManager.instance) {\n      ToastManager.instance = new ToastManager();\n    }\n    return ToastManager.instance;\n  }\n\n  private handleCompletedTransaction(toastId: string): boolean {\n    const { transactions } = this.store.getState();\n    const transaction = transactions[toastId];\n\n    if (!transaction) {\n      return false;\n    }\n\n    const { status } = transaction;\n    const isTimedOut = getIsTransactionTimedOut(status);\n    const isFailed = getIsTransactionFailed(status);\n    const isSuccessful = getIsTransactionSuccessful(status);\n    const isCompleted = isFailed || isSuccessful || isTimedOut;\n\n    if (isCompleted) {\n      if (this.successfulToastLifetime) {\n        this.lifetimeManager.start(toastId);\n      }\n      return isCompleted;\n    }\n\n    this.lifetimeManager.stop(toastId);\n    return isCompleted;\n  }\n\n  public async createTransactionToast(\n    toastId: string,\n    totalDuration: number\n  ): Promise<string> {\n    const newToastId = addTransactionToast({\n      toastId,\n      totalDuration\n    });\n\n    this.handleCompletedTransaction(toastId);\n    await this.updateTransactionToastsList();\n    return newToastId;\n  }\n\n  public createCustomToast(toast: CustomToastType): string {\n    const toastId = createCustomToast(toast);\n    this.updateCustomToastList();\n    return toastId;\n  }\n\n  private async updateTransactionToastsList() {\n    const {\n      toasts: toastList,\n      transactions: transactionsSessions,\n      account\n    } = this.store.getState();\n\n    const { pendingTransactionToasts, completedTransactionToasts } =\n      await createToastsFromTransactions({\n        toastList,\n        transactionsSessions,\n        account\n      });\n\n    this.transactionToasts = [\n      ...pendingTransactionToasts,\n      ...completedTransactionToasts\n    ];\n\n    for (const toast of toastList.transactionToasts) {\n      this.handleCompletedTransaction(toast.toastId);\n    }\n\n    await this.publishTransactionToasts();\n  }\n\n  private async updateCustomToastList() {\n    const { toasts: toastList } = this.store.getState();\n    this.customToasts = [];\n\n    for (const toast of toastList.customToasts) {\n      const isSimpleToast = 'message' in toast;\n\n      const newToast: CustomToastType = isSimpleToast\n        ? { ...toast }\n        : {\n            ...toast,\n            instantiateToastElement:\n              customToastComponentDictionary[toast.toastId]\n          };\n      this.customToasts.push(newToast);\n\n      if (toast.duration) {\n        this.lifetimeManager.startWithCustomDuration(\n          toast.toastId,\n          toast.duration\n        );\n      }\n    }\n    this.eventBus?.publish(\n      ToastEventsEnum.CUSTOM_TOAST_DATA_UPDATE,\n      this.customToasts\n    );\n  }\n\n  private async createToastListElement(): Promise<MvxToastList | null> {\n    if (this.toastsElement) {\n      return this.toastsElement;\n    }\n\n    if (!this.isCreatingElement) {\n      this.isCreatingElement = true;\n\n      this.toastsElement = await ComponentFactory.create<MvxToastList>({\n        name: UITagsEnum.TOAST_LIST\n      });\n\n      this.isCreatingElement = false;\n    }\n\n    return this.toastsElement;\n  }\n\n  private handleTransactionToastClose(toastId: string) {\n    const isCompleted = this.handleCompletedTransaction(toastId);\n\n    if (isCompleted) {\n      removeTransactionToast(toastId);\n    }\n  }\n\n  private async subscribeToEventBusNotifications() {\n    const toastsElement = await this.createToastListElement();\n\n    if (!toastsElement) {\n      return;\n    }\n\n    this.eventBus = await toastsElement.getEventBus();\n    if (!this.eventBus) {\n      throw new Error(ProviderErrorsEnum.eventBusError);\n    }\n\n    this.eventBus.subscribe(\n      ToastEventsEnum.CLOSE,\n      this.handleCloseToast.bind(this)\n    );\n\n    this.eventBusUnsubscribeFunctions.push(() => {\n      this.eventBus?.unsubscribe(\n        ToastEventsEnum.CLOSE,\n        this.handleCloseToast.bind(this)\n      );\n    });\n\n    this.eventBus.subscribe(\n      ToastEventsEnum.OPEN_NOTIFICATIONS_FEED,\n      this.handleOpenNotificationsFeed.bind(this)\n    );\n\n    this.eventBusUnsubscribeFunctions.push(() => {\n      this.eventBus?.unsubscribe(\n        ToastEventsEnum.OPEN_NOTIFICATIONS_FEED,\n        this.handleOpenNotificationsFeed.bind(this)\n      );\n    });\n  }\n\n  public async showToasts() {\n    this.eventBus?.publish(ToastEventsEnum.SHOW, null);\n\n    await this.updateCustomToastList();\n    await this.updateTransactionToastsList();\n  }\n\n  public hideToasts() {\n    this.eventBus?.publish(ToastEventsEnum.HIDE, null);\n  }\n\n  private async handleOpenNotificationsFeed() {\n    this.notificationsFeedManager.openNotificationsFeed();\n  }\n\n  private handleCloseToast(toastId: string) {\n    const customToast = this.customToasts.find(\n      (toast) => toast.toastId === toastId\n    );\n\n    if (customToast) {\n      this.lifetimeManager.stop(toastId);\n      const handleClose = customToastCloseHandlersDictionary[toastId];\n      handleClose?.();\n      removeCustomToast(toastId);\n      return;\n    }\n\n    this.handleTransactionToastClose(toastId);\n  }\n\n  private async publishTransactionToasts() {\n    if (\n      this.notificationsFeedManager.isNotificationsFeedOpen() &&\n      this.eventBus\n    ) {\n      this.eventBus.publish(\n        ToastEventsEnum.TRANSACTION_TOAST_DATA_UPDATE,\n        this.transactionToasts\n      );\n\n      this.hideToasts();\n      return;\n    }\n\n    if (!this.eventBus) {\n      const toastsElement = await this.createToastListElement();\n\n      if (!toastsElement) {\n        return;\n      }\n\n      this.eventBus = await toastsElement.getEventBus();\n    }\n\n    this.eventBus.publish(\n      ToastEventsEnum.TRANSACTION_TOAST_DATA_UPDATE,\n      this.transactionToasts\n    );\n  }\n\n  public destroy() {\n    this.storeToastsSubscription();\n    this.lifetimeManager?.destroy();\n    this.notificationsFeedManager?.destroy();\n    removeAllCustomToasts();\n    this.eventBusUnsubscribeFunctions.forEach((unsubscribe) => unsubscribe());\n    this.eventBusUnsubscribeFunctions = [];\n  }\n}\n"],
  "mappings": "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",
  "names": ["isEqual"]
}
