import { CustomToastType } from '../../../store/slices/toast/toastSlice.types';
interface IToastManager {
    successfulToastLifetime?: number;
}
export declare class ToastManager {
    private readonly lifetimeManager;
    private isCreatingElement;
    private static instance;
    private toastsElement;
    private transactionToasts;
    private customToasts;
    private successfulToastLifetime?;
    private storeToastsSubscription;
    private readonly notificationsFeedManager;
    private eventBusUnsubscribeFunctions;
    private eventBus;
    store: Omit<Omit<Omit<import("zustand").StoreApi<import("../../../store/store.types").StoreType>, "setState"> & {
        setState<A extends string | {
            type: string;
        }>(partial: import("../../../store/store.types").StoreType | Partial<import("../../../store/store.types").StoreType> | ((state: import("../../../store/store.types").StoreType) => import("../../../store/store.types").StoreType | Partial<import("../../../store/store.types").StoreType>), replace?: boolean | undefined, action?: A | undefined): void;
    }, "persist"> & {
        persist: {
            setOptions: (options: Partial<import("zustand/middleware").PersistOptions<import("../../../store/store.types").StoreType, import("../../../store/store.types").StoreType>>) => void;
            clearStorage: () => void;
            rehydrate: () => void | Promise<void>;
            hasHydrated: () => boolean;
            onHydrate: (fn: (state: import("../../../store/store.types").StoreType) => void) => () => void;
            onFinishHydration: (fn: (state: import("../../../store/store.types").StoreType) => void) => () => void;
            getOptions: () => Partial<import("zustand/middleware").PersistOptions<import("../../../store/store.types").StoreType, import("../../../store/store.types").StoreType>>;
        };
    }, "setState"> & {
        setState(nextStateOrUpdater: import("../../../store/store.types").StoreType | Partial<import("../../../store/store.types").StoreType> | ((state: import("immer").WritableDraft<import("../../../store/store.types").StoreType>) => void), shouldReplace?: boolean | undefined, action?: string | {
            type: string;
        } | undefined): void;
    };
    constructor();
    init({ successfulToastLifetime }?: IToastManager): Promise<void>;
    static getInstance(): ToastManager;
    private handleCompletedTransaction;
    createTransactionToast(toastId: string, totalDuration: number): Promise<string>;
    createCustomToast(toast: CustomToastType): string;
    private updateTransactionToastsList;
    private updateCustomToastList;
    private createToastListElement;
    private handleTransactionToastClose;
    private subscribeToEventBusNotifications;
    showToasts(): Promise<void>;
    hideToasts(): void;
    private handleOpenNotificationsFeed;
    private handleCloseToast;
    private publishTransactionToasts;
    destroy(): void;
}
export {};
