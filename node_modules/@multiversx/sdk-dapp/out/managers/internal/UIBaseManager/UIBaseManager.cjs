"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var UIBaseManager_exports = {};
__export(UIBaseManager_exports, {
  UIBaseManager: () => UIBaseManager
});
module.exports = __toCommonJS(UIBaseManager_exports);
var import_provider = require("../../../types/provider.types");
var import_ComponentFactory = require("../../../utils/ComponentFactory");
class UIBaseManager {
  constructor({
    uiDataUpdateEvent,
    uiTag
  }) {
    this.eventBus = null;
    this.uiElement = null;
    this.isCreatingElement = false;
    this.unsubscribeFunctions = /* @__PURE__ */ new Map();
    this.uiDataUpdateEvent = uiDataUpdateEvent;
    this.uiTag = uiTag;
    this.data = this.getInitialData();
  }
  async init(anchor) {
    this.anchor = anchor;
    await this.createUIElement(anchor);
    await this.setupEventListeners();
  }
  updateData(newData) {
    this.data = { ...this.data, ...newData };
    this.notifyDataUpdate();
  }
  subscribeToEventBus(event, callback) {
    if (!this.eventBus) {
      throw new Error(import_provider.ProviderErrorsEnum.eventBusError);
    }
    const unsubscribe = this.eventBus?.subscribe(event, callback);
    if (unsubscribe) {
      const existing = this.unsubscribeFunctions.get(event) || [];
      existing.push(unsubscribe);
      this.unsubscribeFunctions.set(event, existing);
    }
  }
  notifyDataUpdate() {
    this.eventBus?.publish(this.uiDataUpdateEvent, this.data);
  }
  destroy() {
    this.unsubscribeFunctions.forEach(
      (unsubList) => unsubList.forEach((unsubscribe) => unsubscribe())
    );
    this.unsubscribeFunctions.clear();
    this.eventBus = null;
    this.uiElement?.remove?.();
    this.uiElement = null;
  }
  getInitialData() {
    return this.initialData;
  }
  resetData() {
    this.data = this.getInitialData();
  }
  async createUIElement(anchor = this.anchor) {
    if (this.isCreatingElement || this.uiElement) {
      return this.uiElement;
    }
    this.isCreatingElement = true;
    this.uiElement = await import_ComponentFactory.ComponentFactory.create({
      name: this.uiTag,
      anchor
    });
    this.isCreatingElement = false;
    if (!this.uiElement) {
      throw new Error(`Failed to create ${this.uiTag} element`);
    }
    if (!this.eventBus) {
      this.eventBus = await this.uiElement.getEventBus();
    }
    if (!this.eventBus) {
      throw new Error(import_provider.ProviderErrorsEnum.eventBusError);
    }
    return this.uiElement;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  UIBaseManager
});
//# sourceMappingURL=UIBaseManager.cjs.map
