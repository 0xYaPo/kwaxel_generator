import { UITagsEnum } from '../../../constants/UITags.enum';
import { IEventBus } from '../../../lib/sdkDappUi';
import { CreateEventBusUIElementType } from '../../../utils/ComponentFactory';
export declare abstract class UIBaseManager<TElement extends CreateEventBusUIElementType, TData extends Record<string, any> | null, TEventEnum extends string> {
    protected eventBus: IEventBus | null;
    protected uiElement: TElement | null;
    protected isCreatingElement: boolean;
    protected anchor?: HTMLElement;
    protected uiTag: UITagsEnum;
    protected uiDataUpdateEvent: TEventEnum;
    protected unsubscribeFunctions: Map<TEventEnum, (() => void)[]>;
    protected abstract initialData: TData;
    protected data: TData;
    constructor({ uiDataUpdateEvent, uiTag }: {
        uiTag: UITagsEnum;
        uiDataUpdateEvent: TEventEnum;
    });
    init(anchor?: HTMLElement): Promise<void>;
    updateData(newData: Partial<TData>): void;
    subscribeToEventBus(event: TEventEnum, callback: Function): void;
    notifyDataUpdate(): void;
    destroy(): void;
    protected getInitialData(): TData;
    protected resetData(): void;
    protected abstract setupEventListeners(): Promise<void>;
    private createUIElement;
}
