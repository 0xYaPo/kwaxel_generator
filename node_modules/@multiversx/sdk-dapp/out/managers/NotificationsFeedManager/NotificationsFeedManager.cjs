"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var NotificationsFeedManager_exports = {};
__export(NotificationsFeedManager_exports, {
  NotificationsFeedManager: () => NotificationsFeedManager
});
module.exports = __toCommonJS(NotificationsFeedManager_exports);
var import_lodash = __toESM(require("lodash.isequal"));
var import_UITags = require("../../constants/UITags.enum");
var import_TransactionsHistoryController = require("../../controllers/TransactionsHistoryController");
var import_transactionsActions = require("../../store/actions/transactions/transactionsActions");
var import_store = require("../../store/store");
var import_types = require("./types");
var import_internal = require("../internal");
var import_SidePanelBaseManager = require("../internal/SidePanelBaseManager/SidePanelBaseManager");
var import_createToastsFromTransactions = require("../internal/ToastManager/helpers/createToastsFromTransactions");
const NOTIFICATIONS_FEED_STORE_SUBSCRIBE = "NOTIFICATIONS_FEED_STORE_SUBSCRIBE";
class NotificationsFeedManager extends import_SidePanelBaseManager.SidePanelBaseManager {
  constructor() {
    super({
      uiDataUpdateEvent: import_types.NotificationsFeedEventsEnum.OPEN,
      uiTag: import_UITags.UITagsEnum.NOTIFICATIONS_FEED
    });
    this.store = (0, import_store.getStore)();
    this.initialData = {
      pendingTransactions: [],
      historicTransactions: []
    };
    this.data = { ...this.initialData };
  }
  static getInstance() {
    if (!NotificationsFeedManager.instance) {
      NotificationsFeedManager.instance = new NotificationsFeedManager();
    }
    return NotificationsFeedManager.instance;
  }
  isNotificationsFeedOpen() {
    return this.isOpen;
  }
  /**
   * Open the notifications feed and toggle off the toast manager.
   */
  async openNotificationsFeed() {
    const toastManager = import_internal.ToastManager.getInstance();
    toastManager.hideToasts();
    await this.openUI();
    await this.updateDataAndNotifications();
    const storeToastsUnsubscribe = this.store.subscribe(
      async ({ toasts, transactions }, { toasts: prevToasts, transactions: prevTransactions }) => {
        if (!(0, import_lodash.default)(prevToasts.transactionToasts, toasts.transactionToasts) || !(0, import_lodash.default)(prevTransactions, transactions)) {
          await this.updateDataAndNotifications();
        }
      }
    );
    this.unsubscribeFunctions.set(NOTIFICATIONS_FEED_STORE_SUBSCRIBE, [
      storeToastsUnsubscribe
    ]);
    this.eventBus?.publish(import_types.NotificationsFeedEventsEnum.OPEN);
    await this.updateDataAndNotifications();
  }
  /**
   * Close the notifications feed and toggle on the toast manager.
   */
  async handleCloseUI() {
    const toastManager = import_internal.ToastManager.getInstance();
    this.closeUI();
    await toastManager.showToasts();
  }
  async setupEventListeners() {
    if (!this.eventBus) {
      return;
    }
    this.subscribeToEventBus(
      import_types.NotificationsFeedEventsEnum.CLOSE,
      this.handleCloseUI.bind(this)
    );
    this.subscribeToEventBus(
      import_types.NotificationsFeedEventsEnum.CLEAR,
      this.handleClearNotificationsFeedHistory.bind(this)
    );
  }
  async updateDataAndNotifications() {
    const { transactions, account, toasts, network } = this.store.getState();
    const { pendingTransactionToasts } = await (0, import_createToastsFromTransactions.createToastsFromTransactions)({
      toastList: toasts,
      transactionsSessions: transactions,
      account
    });
    this.data.pendingTransactions = pendingTransactionToasts;
    this.data.historicTransactions = await import_TransactionsHistoryController.TransactionsHistoryController.getTransactionsHistory({
      transactionsSessions: transactions,
      address: account.address,
      explorerAddress: network.network.explorerAddress,
      egldLabel: network.network.egldLabel
    });
    await this.updateNotificationsFeed();
  }
  handleClearNotificationsFeedHistory() {
    (0, import_transactionsActions.clearCompletedTransactions)();
    this.resetData();
    this.updateNotificationsFeed();
  }
  async updateNotificationsFeed() {
    if (!this.eventBus) {
      return;
    }
    this.eventBus.publish(
      import_types.NotificationsFeedEventsEnum.PENDING_TRANSACTIONS_UPDATE,
      this.data.pendingTransactions
    );
    this.eventBus.publish(
      import_types.NotificationsFeedEventsEnum.TRANSACTIONS_HISTORY_UPDATE,
      this.data.historicTransactions
    );
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  NotificationsFeedManager
});
//# sourceMappingURL=NotificationsFeedManager.cjs.map
