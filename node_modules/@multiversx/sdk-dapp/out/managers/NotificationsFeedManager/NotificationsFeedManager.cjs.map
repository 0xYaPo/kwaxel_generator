{
  "version": 3,
  "sources": ["../../../src/managers/NotificationsFeedManager/NotificationsFeedManager.ts"],
  "sourcesContent": ["import isEqual from 'lodash.isequal';\nimport { UITagsEnum } from 'constants/UITags.enum';\nimport { TransactionsHistoryController } from 'controllers/TransactionsHistoryController';\nimport { ITransactionListItem, MvxNotificationsFeed } from 'lib/sdkDappUi';\nimport { clearCompletedTransactions } from 'store/actions/transactions/transactionsActions';\nimport { getStore } from 'store/store';\nimport { NotificationsFeedEventsEnum } from './types';\nimport { ToastManager } from '../internal';\nimport { SidePanelBaseManager } from '../internal/SidePanelBaseManager/SidePanelBaseManager';\nimport { createToastsFromTransactions } from '../internal/ToastManager/helpers/createToastsFromTransactions';\nimport { ITransactionToast } from '../internal/ToastManager/types';\n\ninterface INotificationsFeedManagerData {\n  pendingTransactions: ITransactionToast[];\n  historicTransactions: ITransactionListItem[];\n}\n\nconst NOTIFICATIONS_FEED_STORE_SUBSCRIBE = 'NOTIFICATIONS_FEED_STORE_SUBSCRIBE';\n\nexport class NotificationsFeedManager extends SidePanelBaseManager<\n  MvxNotificationsFeed,\n  INotificationsFeedManagerData,\n  NotificationsFeedEventsEnum | typeof NOTIFICATIONS_FEED_STORE_SUBSCRIBE\n> {\n  private static instance: NotificationsFeedManager;\n  private readonly store = getStore();\n\n  protected initialData: INotificationsFeedManagerData = {\n    pendingTransactions: [],\n    historicTransactions: []\n  };\n\n  public static getInstance(): NotificationsFeedManager {\n    if (!NotificationsFeedManager.instance) {\n      NotificationsFeedManager.instance = new NotificationsFeedManager();\n    }\n    return NotificationsFeedManager.instance;\n  }\n\n  constructor() {\n    super({\n      uiDataUpdateEvent: NotificationsFeedEventsEnum.OPEN,\n      uiTag: UITagsEnum.NOTIFICATIONS_FEED\n    });\n    this.data = { ...this.initialData };\n  }\n\n  public isNotificationsFeedOpen(): boolean {\n    return this.isOpen;\n  }\n\n  /**\n   * Open the notifications feed and toggle off the toast manager.\n   */\n  public async openNotificationsFeed(): Promise<void> {\n    const toastManager = ToastManager.getInstance();\n    toastManager.hideToasts();\n    await this.openUI();\n    await this.updateDataAndNotifications();\n\n    const storeToastsUnsubscribe = this.store.subscribe(\n      async (\n        { toasts, transactions },\n        { toasts: prevToasts, transactions: prevTransactions }\n      ) => {\n        if (\n          !isEqual(prevToasts.transactionToasts, toasts.transactionToasts) ||\n          !isEqual(prevTransactions, transactions)\n        ) {\n          await this.updateDataAndNotifications();\n        }\n      }\n    );\n    this.unsubscribeFunctions.set(NOTIFICATIONS_FEED_STORE_SUBSCRIBE, [\n      storeToastsUnsubscribe\n    ]);\n\n    this.eventBus?.publish(NotificationsFeedEventsEnum.OPEN);\n    await this.updateDataAndNotifications();\n  }\n\n  /**\n   * Close the notifications feed and toggle on the toast manager.\n   */\n  protected async handleCloseUI() {\n    const toastManager = ToastManager.getInstance();\n    this.closeUI();\n    await toastManager.showToasts();\n  }\n\n  protected async setupEventListeners() {\n    if (!this.eventBus) {\n      return;\n    }\n\n    this.subscribeToEventBus(\n      NotificationsFeedEventsEnum.CLOSE,\n      this.handleCloseUI.bind(this)\n    );\n\n    this.subscribeToEventBus(\n      NotificationsFeedEventsEnum.CLEAR,\n      this.handleClearNotificationsFeedHistory.bind(this)\n    );\n  }\n\n  protected async updateDataAndNotifications() {\n    const { transactions, account, toasts, network } = this.store.getState();\n\n    const { pendingTransactionToasts } = await createToastsFromTransactions({\n      toastList: toasts,\n      transactionsSessions: transactions,\n      account\n    });\n\n    this.data.pendingTransactions = pendingTransactionToasts;\n\n    this.data.historicTransactions =\n      await TransactionsHistoryController.getTransactionsHistory({\n        transactionsSessions: transactions,\n        address: account.address,\n        explorerAddress: network.network.explorerAddress,\n        egldLabel: network.network.egldLabel\n      });\n\n    await this.updateNotificationsFeed();\n  }\n\n  private handleClearNotificationsFeedHistory() {\n    clearCompletedTransactions();\n    this.resetData();\n    this.updateNotificationsFeed();\n  }\n\n  private async updateNotificationsFeed() {\n    if (!this.eventBus) {\n      return;\n    }\n\n    this.eventBus.publish(\n      NotificationsFeedEventsEnum.PENDING_TRANSACTIONS_UPDATE,\n      this.data.pendingTransactions\n    );\n\n    this.eventBus.publish(\n      NotificationsFeedEventsEnum.TRANSACTIONS_HISTORY_UPDATE,\n      this.data.historicTransactions\n    );\n  }\n}\n"],
  "mappings": "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",
  "names": ["isEqual"]
}
