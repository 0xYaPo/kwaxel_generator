import { IGasLimitEstimator } from "../core";
import { Address } from "../core/address";
import { BaseFactory } from "../core/baseFactory";
import { Transaction } from "../core/transaction";
import * as resources from "./resources";
interface IConfig {
    chainID: string;
    addressHrp: string;
    minGasLimit: bigint;
    gasLimitPerByte: bigint;
    gasLimitStake: bigint;
    gasLimitUnstake: bigint;
    gasLimitUnbond: bigint;
    gasLimitCreateDelegationContract: bigint;
    gasLimitDelegationOperations: bigint;
    additionalGasLimitPerValidatorNode: bigint;
    additionalGasLimitForDelegationOperations: bigint;
}
/**
 * Use this class to create delegation related transactions like creating a new delegation contract or adding nodes.
 */
export declare class DelegationTransactionsFactory extends BaseFactory {
    private readonly config;
    private readonly argSerializer;
    private readonly delegationManagerAddress;
    constructor(options: {
        config: IConfig;
        gasLimitEstimator?: IGasLimitEstimator;
    });
    createTransactionForNewDelegationContract(sender: Address, options: resources.NewDelegationContractInput): Promise<Transaction>;
    createTransactionForAddingNodes(sender: Address, options: resources.AddNodesInput): Promise<Transaction>;
    createTransactionForRemovingNodes(sender: Address, options: resources.ManageNodesInput): Promise<Transaction>;
    createTransactionForStakingNodes(sender: Address, options: resources.ManageNodesInput): Promise<Transaction>;
    createTransactionForUnbondingNodes(sender: Address, options: resources.ManageNodesInput): Promise<Transaction>;
    createTransactionForUnstakingNodes(sender: Address, options: resources.ManageNodesInput): Promise<Transaction>;
    createTransactionForUnjailingNodes(sender: Address, options: resources.UnjailingNodesInput): Promise<Transaction>;
    createTransactionForChangingServiceFee(sender: Address, options: resources.ChangeServiceFee): Promise<Transaction>;
    createTransactionForModifyingDelegationCap(sender: Address, options: resources.ModifyDelegationCapInput): Promise<Transaction>;
    createTransactionForSettingAutomaticActivation(sender: Address, options: resources.ManageDelegationContractInput): Promise<Transaction>;
    createTransactionForUnsettingAutomaticActivation(sender: Address, options: resources.ManageDelegationContractInput): Promise<Transaction>;
    createTransactionForSettingCapCheckOnRedelegateRewards(sender: Address, options: resources.ManageDelegationContractInput): Promise<Transaction>;
    createTransactionForUnsettingCapCheckOnRedelegateRewards(sender: Address, options: resources.ManageDelegationContractInput): Promise<Transaction>;
    createTransactionForSettingMetadata(sender: Address, options: resources.SetContractMetadataInput): Promise<Transaction>;
    createTransactionForDelegating(sender: Address, options: resources.DelegateActionsInput): Promise<Transaction>;
    createTransactionForClaimingRewards(sender: Address, options: resources.ManageDelegationContractInput): Promise<Transaction>;
    createTransactionForRedelegatingRewards(sender: Address, options: resources.ManageDelegationContractInput): Promise<Transaction>;
    createTransactionForUndelegating(sender: Address, options: resources.DelegateActionsInput): Promise<Transaction>;
    createTransactionForWithdrawing(sender: Address, options: resources.ManageDelegationContractInput): Promise<Transaction>;
    private computeExecutionGasLimitForNodesManagement;
}
export {};
