"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenManagementTransactionsFactory = void 0;
const abi_1 = require("../abi");
const address_1 = require("../core/address");
const baseFactory_1 = require("../core/baseFactory");
const constants_1 = require("../core/constants");
const errors_1 = require("../core/errors");
const logger_1 = require("../core/logger");
const transaction_1 = require("../core/transaction");
/**
 * Use this class to create token management transactions like issuing ESDTs, creating NFTs, setting roles, etc.
 */
class TokenManagementTransactionsFactory extends baseFactory_1.BaseFactory {
    constructor(options) {
        super({ config: options.config, gasLimitEstimator: options.gasLimitEstimator });
        this.config = options.config;
        this.argSerializer = new abi_1.ArgSerializer();
        this.trueAsString = "true";
        this.falseAsString = "false";
        this.esdtContractAddress = address_1.Address.newFromHex(constants_1.ESDT_CONTRACT_ADDRESS_HEX, this.config.addressHrp);
    }
    async createTransactionForIssuingFungible(sender, options) {
        this.notifyAboutUnsettingBurnRoleGlobally();
        const args = [
            new abi_1.StringValue(options.tokenName),
            new abi_1.StringValue(options.tokenTicker),
            new abi_1.BigUIntValue(options.initialSupply),
            new abi_1.BigUIntValue(options.numDecimals),
            new abi_1.StringValue("canFreeze"),
            new abi_1.StringValue(this.boolToString(options.canFreeze)),
            new abi_1.StringValue("canWipe"),
            new abi_1.StringValue(this.boolToString(options.canWipe)),
            new abi_1.StringValue("canPause"),
            new abi_1.StringValue(this.boolToString(options.canPause)),
            new abi_1.StringValue("canChangeOwner"),
            new abi_1.StringValue(this.boolToString(options.canChangeOwner)),
            new abi_1.StringValue("canUpgrade"),
            new abi_1.StringValue(this.boolToString(options.canUpgrade)),
            new abi_1.StringValue("canAddSpecialRoles"),
            new abi_1.StringValue(this.boolToString(options.canAddSpecialRoles)),
        ];
        const dataParts = ["issue", ...this.argSerializer.valuesToStrings(args)];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
            value: this.config.issueCost,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitIssue);
        return transaction;
    }
    async createTransactionForIssuingSemiFungible(sender, options) {
        this.notifyAboutUnsettingBurnRoleGlobally();
        const args = [
            new abi_1.StringValue(options.tokenName),
            new abi_1.StringValue(options.tokenTicker),
            new abi_1.StringValue("canFreeze"),
            new abi_1.StringValue(this.boolToString(options.canFreeze)),
            new abi_1.StringValue("canWipe"),
            new abi_1.StringValue(this.boolToString(options.canWipe)),
            new abi_1.StringValue("canPause"),
            new abi_1.StringValue(this.boolToString(options.canPause)),
            new abi_1.StringValue("canTransferNFTCreateRole"),
            new abi_1.StringValue(this.boolToString(options.canTransferNFTCreateRole)),
            new abi_1.StringValue("canChangeOwner"),
            new abi_1.StringValue(this.boolToString(options.canChangeOwner)),
            new abi_1.StringValue("canUpgrade"),
            new abi_1.StringValue(this.boolToString(options.canUpgrade)),
            new abi_1.StringValue("canAddSpecialRoles"),
            new abi_1.StringValue(this.boolToString(options.canAddSpecialRoles)),
        ];
        const dataParts = ["issueSemiFungible", ...this.argSerializer.valuesToStrings(args)];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
            value: this.config.issueCost,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitIssue);
        return transaction;
    }
    async createTransactionForIssuingNonFungible(sender, options) {
        this.notifyAboutUnsettingBurnRoleGlobally();
        const args = [
            new abi_1.StringValue(options.tokenName),
            new abi_1.StringValue(options.tokenTicker),
            new abi_1.StringValue("canFreeze"),
            new abi_1.StringValue(this.boolToString(options.canFreeze)),
            new abi_1.StringValue("canWipe"),
            new abi_1.StringValue(this.boolToString(options.canWipe)),
            new abi_1.StringValue("canPause"),
            new abi_1.StringValue(this.boolToString(options.canPause)),
            new abi_1.StringValue("canTransferNFTCreateRole"),
            new abi_1.StringValue(this.boolToString(options.canTransferNFTCreateRole)),
            new abi_1.StringValue("canChangeOwner"),
            new abi_1.StringValue(this.boolToString(options.canChangeOwner)),
            new abi_1.StringValue("canUpgrade"),
            new abi_1.StringValue(this.boolToString(options.canUpgrade)),
            new abi_1.StringValue("canAddSpecialRoles"),
            new abi_1.StringValue(this.boolToString(options.canAddSpecialRoles)),
        ];
        const dataParts = ["issueNonFungible", ...this.argSerializer.valuesToStrings(args)];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
            value: this.config.issueCost,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitIssue);
        return transaction;
    }
    async createTransactionForRegisteringMetaESDT(sender, options) {
        this.notifyAboutUnsettingBurnRoleGlobally();
        const args = [
            new abi_1.StringValue(options.tokenName),
            new abi_1.StringValue(options.tokenTicker),
            new abi_1.BigUIntValue(options.numDecimals),
            new abi_1.StringValue("canFreeze"),
            new abi_1.StringValue(this.boolToString(options.canFreeze)),
            new abi_1.StringValue("canWipe"),
            new abi_1.StringValue(this.boolToString(options.canWipe)),
            new abi_1.StringValue("canPause"),
            new abi_1.StringValue(this.boolToString(options.canPause)),
            new abi_1.StringValue("canTransferNFTCreateRole"),
            new abi_1.StringValue(this.boolToString(options.canTransferNFTCreateRole)),
            new abi_1.StringValue("canChangeOwner"),
            new abi_1.StringValue(this.boolToString(options.canChangeOwner)),
            new abi_1.StringValue("canUpgrade"),
            new abi_1.StringValue(this.boolToString(options.canUpgrade)),
            new abi_1.StringValue("canAddSpecialRoles"),
            new abi_1.StringValue(this.boolToString(options.canAddSpecialRoles)),
        ];
        const dataParts = ["registerMetaESDT", ...this.argSerializer.valuesToStrings(args)];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
            value: this.config.issueCost,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitIssue);
        return transaction;
    }
    async createTransactionForRegisteringAndSettingRoles(sender, options) {
        this.notifyAboutUnsettingBurnRoleGlobally();
        const dataParts = [
            "registerAndSetAllRoles",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenName),
                new abi_1.StringValue(options.tokenTicker),
                new abi_1.StringValue(options.tokenType),
                new abi_1.BigUIntValue(options.numDecimals),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
            value: this.config.issueCost,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitIssue);
        return transaction;
    }
    async createTransactionForSettingBurnRoleGlobally(sender, options) {
        const dataParts = [
            "setBurnRoleGlobally",
            ...this.argSerializer.valuesToStrings([new abi_1.StringValue(options.tokenIdentifier)]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitToggleBurnRoleGlobally);
        return transaction;
    }
    async createTransactionForUnsettingBurnRoleGlobally(sender, options) {
        const dataParts = [
            "unsetBurnRoleGlobally",
            ...this.argSerializer.valuesToStrings([new abi_1.StringValue(options.tokenIdentifier)]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitToggleBurnRoleGlobally);
        return transaction;
    }
    async createTransactionForSettingSpecialRoleOnFungibleToken(sender, options) {
        const args = [new abi_1.StringValue(options.tokenIdentifier), new abi_1.AddressValue(options.user)];
        options.addRoleLocalMint ? args.push(new abi_1.StringValue("ESDTRoleLocalMint")) : 0;
        options.addRoleLocalBurn ? args.push(new abi_1.StringValue("ESDTRoleLocalBurn")) : 0;
        options.addRoleESDTTransferRole ? args.push(new abi_1.StringValue("ESDTTransferRole")) : 0;
        const dataParts = ["setSpecialRole", ...this.argSerializer.valuesToStrings(args)];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitSetSpecialRole);
        return transaction;
    }
    async createTransactionForUnsettingSpecialRoleOnFungibleToken(sender, options) {
        const args = [new abi_1.StringValue(options.tokenIdentifier), new abi_1.AddressValue(options.user)];
        options.removeRoleLocalMint ? args.push(new abi_1.StringValue("ESDTRoleLocalMint")) : 0;
        options.removeRoleESDTTransferRole ? args.push(new abi_1.StringValue("ESDTRoleLocalBurn")) : 0;
        options.removeRoleESDTTransferRole ? args.push(new abi_1.StringValue("ESDTTransferRole")) : 0;
        const dataParts = ["unSetSpecialRole", ...this.argSerializer.valuesToStrings(args)];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitSetSpecialRole);
        return transaction;
    }
    async createTransactionForSettingSpecialRoleOnSemiFungibleToken(sender, options) {
        const args = [new abi_1.StringValue(options.tokenIdentifier), new abi_1.AddressValue(options.user)];
        options.addRoleNFTCreate ? args.push(new abi_1.StringValue("ESDTRoleNFTCreate")) : 0;
        options.addRoleNFTBurn ? args.push(new abi_1.StringValue("ESDTRoleNFTBurn")) : 0;
        options.addRoleNFTAddQuantity ? args.push(new abi_1.StringValue("ESDTRoleNFTAddQuantity")) : 0;
        options.addRoleESDTTransferRole ? args.push(new abi_1.StringValue("ESDTTransferRole")) : 0;
        options.addRoleNFTUpdate ? args.push(new abi_1.StringValue("ESDTRoleNFTUpdate")) : 0;
        options.addRoleESDTModifyRoyalties ? args.push(new abi_1.StringValue("ESDTRoleModifyRoyalties")) : 0;
        options.addRoleESDTSetNewUri ? args.push(new abi_1.StringValue("ESDTRoleSetNewURI")) : 0;
        options.addRoleESDTModifyCreator ? args.push(new abi_1.StringValue("ESDTRoleModifyCreator")) : 0;
        options.addRoleNFTRecreate ? args.push(new abi_1.StringValue("ESDTRoleNFTRecreate")) : 0;
        const dataParts = ["setSpecialRole", ...this.argSerializer.valuesToStrings(args)];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitSetSpecialRole);
        return transaction;
    }
    async createTransactionForUnsettingSpecialRoleOnSemiFungibleToken(sender, options) {
        const args = [new abi_1.StringValue(options.tokenIdentifier), new abi_1.AddressValue(options.user)];
        options.removeRoleNFTBurn ? args.push(new abi_1.StringValue("ESDTRoleNFTBurn")) : 0;
        options.removeRoleNFTAddQuantity ? args.push(new abi_1.StringValue("ESDTRoleNFTAddQuantity")) : 0;
        options.removeRoleESDTTransferRole ? args.push(new abi_1.StringValue("ESDTTransferRole")) : 0;
        options.removeRoleNFTUpdate ? args.push(new abi_1.StringValue("ESDTRoleNFTUpdate")) : 0;
        options.removeRoleESDTModifyRoyalties ? args.push(new abi_1.StringValue("ESDTRoleModifyRoyalties")) : 0;
        options.removeRoleESDTSetNewUri ? args.push(new abi_1.StringValue("ESDTRoleSetNewURI")) : 0;
        options.removeRoleESDTModifyCreator ? args.push(new abi_1.StringValue("ESDTRoleModifyCreator")) : 0;
        options.removeRoleNFTRecreate ? args.push(new abi_1.StringValue("ESDTRoleNFTRecreate")) : 0;
        const dataParts = ["unSetSpecialRole", ...this.argSerializer.valuesToStrings(args)];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitSetSpecialRole);
        return transaction;
    }
    async createTransactionForSettingSpecialRoleOnMetaESDT(sender, options) {
        return await this.createTransactionForSettingSpecialRoleOnSemiFungibleToken(sender, options);
    }
    async createTransactionForUnsettingSpecialRoleOnMetaESDT(sender, options) {
        return await this.createTransactionForUnsettingSpecialRoleOnSemiFungibleToken(sender, options);
    }
    async createTransactionForSettingSpecialRoleOnNonFungibleToken(sender, options) {
        const args = [new abi_1.StringValue(options.tokenIdentifier), new abi_1.AddressValue(options.user)];
        options.addRoleNFTCreate ? args.push(new abi_1.StringValue("ESDTRoleNFTCreate")) : 0;
        options.addRoleNFTBurn ? args.push(new abi_1.StringValue("ESDTRoleNFTBurn")) : 0;
        options.addRoleNFTUpdateAttributes ? args.push(new abi_1.StringValue("ESDTRoleNFTUpdateAttributes")) : 0;
        options.addRoleNFTAddURI ? args.push(new abi_1.StringValue("ESDTRoleNFTAddURI")) : 0;
        options.addRoleESDTTransferRole ? args.push(new abi_1.StringValue("ESDTTransferRole")) : 0;
        options.addRoleESDTModifyCreator ? args.push(new abi_1.StringValue("ESDTRoleModifyCreator")) : 0;
        options.addRoleNFTRecreate ? args.push(new abi_1.StringValue("ESDTRoleNFTRecreate")) : 0;
        options.addRoleESDTSetNewURI ? args.push(new abi_1.StringValue("ESDTRoleSetNewURI")) : 0;
        options.addRoleESDTModifyRoyalties ? args.push(new abi_1.StringValue("ESDTRoleModifyRoyalties")) : 0;
        const dataParts = ["setSpecialRole", ...this.argSerializer.valuesToStrings(args)];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitSetSpecialRole);
        return transaction;
    }
    async createTransactionForUnsettingSpecialRoleOnNonFungibleToken(sender, options) {
        const args = [new abi_1.StringValue(options.tokenIdentifier), new abi_1.AddressValue(options.user)];
        options.removeRoleNFTBurn ? args.push(new abi_1.StringValue("ESDTRoleNFTBurn")) : 0;
        options.removeRoleNFTUpdateAttributes ? args.push(new abi_1.StringValue("ESDTRoleNFTUpdateAttributes")) : 0;
        options.removeRoleNFTAddURI ? args.push(new abi_1.StringValue("ESDTRoleNFTAddURI")) : 0;
        options.removeRoleESDTTransferRole ? args.push(new abi_1.StringValue("ESDTTransferRole")) : 0;
        options.removeRoleESDTModifyCreator ? args.push(new abi_1.StringValue("ESDTRoleModifyCreator")) : 0;
        options.removeRoleNFTRecreate ? args.push(new abi_1.StringValue("ESDTRoleNFTRecreate")) : 0;
        options.removeRoleESDTSetNewURI ? args.push(new abi_1.StringValue("ESDTRoleSetNewURI")) : 0;
        options.removeRoleESDTModifyRoyalties ? args.push(new abi_1.StringValue("ESDTRoleModifyRoyalties")) : 0;
        const dataParts = ["unSetSpecialRole", ...this.argSerializer.valuesToStrings(args)];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitSetSpecialRole);
        return transaction;
    }
    async createTransactionForCreatingNFT(sender, options) {
        const dataParts = [
            "ESDTNFTCreate",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.BigUIntValue(options.initialQuantity ?? 1n),
                new abi_1.StringValue(options.name),
                new abi_1.BigUIntValue(options.royalties),
                new abi_1.StringValue(options.hash),
                new abi_1.BytesValue(Buffer.from(options.attributes)),
                ...options.uris.map((uri) => new abi_1.StringValue(uri)),
            ]),
        ];
        // Note that the following is an approximation (a reasonable one):
        const nftData = options.name + options.hash + options.attributes + options.uris.join("");
        const storageGasLimit = this.config.gasLimitStorePerByte + BigInt(nftData.length);
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitEsdtNftCreate + storageGasLimit);
        return transaction;
    }
    async createTransactionForPausing(sender, options) {
        const dataParts = ["pause", ...this.argSerializer.valuesToStrings([new abi_1.StringValue(options.tokenIdentifier)])];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitPausing);
        return transaction;
    }
    async createTransactionForUnpausing(sender, options) {
        const dataParts = [
            "unPause",
            ...this.argSerializer.valuesToStrings([new abi_1.StringValue(options.tokenIdentifier)]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitPausing);
        return transaction;
    }
    async createTransactionForFreezing(sender, options) {
        const dataParts = [
            "freeze",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.AddressValue(options.user),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitFreezing);
        return transaction;
    }
    async createTransactionForUnfreezing(sender, options) {
        const dataParts = [
            "UnFreeze",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.AddressValue(options.user),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitFreezing);
        return transaction;
    }
    async createTransactionForWiping(sender, options) {
        const dataParts = [
            "wipe",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.AddressValue(options.user),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitWiping);
        return transaction;
    }
    async createTransactionForLocalMint(sender, options) {
        const dataParts = [
            "ESDTLocalMint",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.BigUIntValue(options.supplyToMint),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitEsdtLocalMint);
        return transaction;
    }
    async createTransactionForLocalBurning(sender, options) {
        const dataParts = [
            "ESDTLocalBurn",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.BigUIntValue(options.supplyToBurn),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitEsdtLocalBurn);
        return transaction;
    }
    async createTransactionForUpdatingAttributes(sender, options) {
        const dataParts = [
            "ESDTNFTUpdateAttributes",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.BigUIntValue(options.tokenNonce),
                new abi_1.BytesValue(Buffer.from(options.attributes)),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitEsdtNftUpdateAttributes);
        return transaction;
    }
    async createTransactionForAddingQuantity(sender, options) {
        const dataParts = [
            "ESDTNFTAddQuantity",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.BigUIntValue(options.tokenNonce),
                new abi_1.BigUIntValue(options.quantity),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitEsdtNftAddQuantity);
        return transaction;
    }
    async createTransactionForBurningQuantity(sender, options) {
        const dataParts = [
            "ESDTNFTBurn",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.BigUIntValue(options.tokenNonce),
                new abi_1.BigUIntValue(options.quantity),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitEsdtNftBurn);
        return transaction;
    }
    async createTransactionForModifyingRoyalties(sender, options) {
        const dataParts = [
            "ESDTModifyRoyalties",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.BigUIntValue(options.tokenNonce),
                new abi_1.BigUIntValue(options.newRoyalties),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitEsdtModifyRoyalties);
        return transaction;
    }
    async createTransactionForSettingNewUris(sender, options) {
        if (!options.newUris.length) {
            throw new errors_1.ErrBadUsage("No URIs provided");
        }
        const dataParts = [
            "ESDTSetNewURIs",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.BigUIntValue(options.tokenNonce),
                ...options.newUris.map((uri) => new abi_1.StringValue(uri)),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitSetNewUris);
        return transaction;
    }
    async createTransactionForModifyingCreator(sender, options) {
        const dataParts = [
            "ESDTModifyCreator",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.BigUIntValue(options.tokenNonce),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitEsdtModifyCreator);
        return transaction;
    }
    async createTransactionForUpdatingMetadata(sender, options) {
        const dataParts = [
            "ESDTMetaDataUpdate",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.BigUIntValue(options.tokenNonce),
                ...(options.newTokenName ? [new abi_1.StringValue(options.newTokenName)] : []),
                ...(options.newRoyalties ? [new abi_1.BigUIntValue(options.newRoyalties)] : []),
                ...(options.newHash ? [new abi_1.StringValue(options.newHash)] : []),
                ...(options.newAttributes ? [new abi_1.BytesValue(Buffer.from(options.newAttributes))] : []),
                ...(options.newUris ? options.newUris.map((uri) => new abi_1.StringValue(uri)) : []),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitEsdtMetadataUpdate);
        return transaction;
    }
    async createTransactionForMetadataRecreate(sender, options) {
        const dataParts = [
            "ESDTMetaDataRecreate",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenIdentifier),
                new abi_1.BigUIntValue(options.tokenNonce),
                ...(options.newTokenName ? [new abi_1.StringValue(options.newTokenName)] : []),
                ...(options.newRoyalties ? [new abi_1.BigUIntValue(options.newRoyalties)] : []),
                ...(options.newHash ? [new abi_1.StringValue(options.newHash)] : []),
                ...(options.newAttributes ? [new abi_1.BytesValue(Buffer.from(options.newAttributes))] : []),
                ...(options.newUris ? options.newUris.map((uri) => new abi_1.StringValue(uri)) : []),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: sender,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitNftMetadataRecreate);
        return transaction;
    }
    async createTransactionForChangingTokenToDynamic(sender, options) {
        const dataParts = [
            "changeToDynamic",
            ...this.argSerializer.valuesToStrings([new abi_1.StringValue(options.tokenIdentifier)]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitNftChangeToDynamic);
        return transaction;
    }
    async createTransactionForUpdatingTokenId(sender, options) {
        const dataParts = [
            "updateTokenID",
            ...this.argSerializer.valuesToStrings([new abi_1.StringValue(options.tokenIdentifier)]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitUpdateTokenId);
        return transaction;
    }
    async createTransactionForRegisteringDynamicToken(sender, options) {
        const dataParts = [
            "registerDynamic",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenName),
                new abi_1.StringValue(options.tokenTicker),
                new abi_1.StringValue(options.tokenType),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
            value: this.config.issueCost,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitRegisterDynamic);
        return transaction;
    }
    async createTransactionForRegisteringDynamicAndSettingRoles(sender, options) {
        const dataParts = [
            "registerAndSetAllRolesDynamic",
            ...this.argSerializer.valuesToStrings([
                new abi_1.StringValue(options.tokenName),
                new abi_1.StringValue(options.tokenTicker),
                new abi_1.StringValue(options.tokenType),
            ]),
        ];
        const transaction = new transaction_1.Transaction({
            sender: sender,
            receiver: this.esdtContractAddress,
            chainID: this.config.chainID,
            gasLimit: 0n,
            value: this.config.issueCost,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, undefined, this.config.gasLimitRegisterDynamic);
        return transaction;
    }
    notifyAboutUnsettingBurnRoleGlobally() {
        logger_1.Logger.info(`
==========
IMPORTANT!
==========
You are about to issue (register) a new token. This will set the role "ESDTRoleBurnForAll" (globally).
Once the token is registered, you can unset this role by calling "unsetBurnRoleGlobally" (in a separate transaction).`);
    }
    boolToString(value) {
        if (value) {
            return this.trueAsString;
        }
        return this.falseAsString;
    }
}
exports.TokenManagementTransactionsFactory = TokenManagementTransactionsFactory;
//# sourceMappingURL=tokenManagementTransactionsFactory.js.map