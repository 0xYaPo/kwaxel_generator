export declare type TokenType = "NFT" | "SFT" | "META" | "FNG";
export declare class Token {
    /**
     * E.g. "FOO-abcdef", "EGLD-000000".
     */
    readonly identifier: string;
    readonly nonce: bigint;
    constructor(options: {
        identifier: string;
        nonce?: bigint;
    });
}
export declare class TokenTransfer {
    readonly token: Token;
    readonly amount: bigint;
    constructor(options: {
        token: Token;
        amount: bigint;
    });
    /**     *
     * @param amount
     * @returns @TokenTransfer from native token
     */
    static newFromNativeAmount(amount: bigint): TokenTransfer;
    toString(): string;
}
export declare class TokenComputer {
    TOKEN_RANDOM_SEQUENCE_LENGTH: number;
    constructor();
    /**
     * Returns token.nonce == 0
     */
    isFungible(token: Token): boolean;
    /**
     * Given "FOO-abcdef-0a" returns 10.
     */
    extractNonceFromExtendedIdentifier(identifier: string): number;
    /**
     * Given "FOO-abcdef-0a" returns FOO-abcdef.
     */
    extractIdentifierFromExtendedIdentifier(identifier: string): string;
    /**
     * Given "FOO-abcdef-0a" returns FOO.
     * Given "FOO-abcdef" returns FOO.
     */
    extractTickerFromExtendedIdentifier(identifier: string): string;
    computeExtendedIdentifier(token: Token): string;
    private validateExtendedIdentifier;
    private splitIdentifierIntoComponents;
    private checkIfExtendedIdentifierWasProvided;
    private checkLengthOfRandomSequence;
    private checkLengthOfPrefix;
    private ensureTokenTickerValidity;
}
