"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseFactory = void 0;
const constants_1 = require("./constants");
/**
 * @internal
 */
class BaseFactory {
    constructor(options) {
        this.gasConfig = options.config;
        this.gasLimitEstimator = options.gasLimitEstimator;
    }
    setTransactionPayload(transaction, dataParts) {
        const data = dataParts.join(constants_1.ARGUMENTS_SEPARATOR);
        transaction.data = Buffer.from(data);
    }
    /**
     * Sets the gas limit for the transaction.
     * @param gasLimit - Optional gas limit to set. This is the value provided by the user.
     * @param configGasLimit - Optional gas limit from the configuration. This is computed internally based on some config values.
     */
    async setGasLimit(transaction, gasLimit, configGasLimit) {
        if (gasLimit !== undefined) {
            transaction.gasLimit = gasLimit;
            return;
        }
        if (this.gasLimitEstimator) {
            transaction.gasLimit = await this.gasLimitEstimator.estimateGasLimit({ transaction });
            return;
        }
        if (configGasLimit !== undefined) {
            const dataMovementGas = this.gasConfig.minGasLimit + this.gasConfig.gasLimitPerByte * BigInt(transaction.data.length);
            transaction.gasLimit = dataMovementGas + configGasLimit;
            return;
        }
        throw new Error("Either provide a `gasLimit` parameter or initialize the factory with a `gasLimitEstimator`.");
    }
}
exports.BaseFactory = BaseFactory;
//# sourceMappingURL=baseFactory.js.map