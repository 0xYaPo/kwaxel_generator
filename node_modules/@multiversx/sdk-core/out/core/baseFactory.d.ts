import { IGasLimitEstimator } from "./interfaces";
import { Transaction } from "./transaction";
interface Config {
    minGasLimit: bigint;
    gasLimitPerByte: bigint;
}
/**
 * @internal
 */
export declare class BaseFactory {
    private gasConfig;
    private gasLimitEstimator?;
    constructor(options: {
        config: Config;
        gasLimitEstimator?: IGasLimitEstimator;
    });
    protected setTransactionPayload(transaction: Transaction, dataParts: string[]): void;
    /**
     * Sets the gas limit for the transaction.
     * @param gasLimit - Optional gas limit to set. This is the value provided by the user.
     * @param configGasLimit - Optional gas limit from the configuration. This is computed internally based on some config values.
     */
    protected setGasLimit(transaction: Transaction, gasLimit?: bigint, configGasLimit?: bigint): Promise<void>;
}
export {};
