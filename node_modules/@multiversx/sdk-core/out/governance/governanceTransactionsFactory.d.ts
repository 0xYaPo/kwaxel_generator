import { Address, IGasLimitEstimator, Transaction, TransactionsFactoryConfig } from "../core";
import { BaseFactory } from "../core/baseFactory";
import { ChangeConfigInput, ClearEndedProposalsInput, CloseProposalInput, NewProposalInput, VoteProposalInput } from "./resources";
export declare class GovernanceTransactionsFactory extends BaseFactory {
    private readonly config;
    private readonly argSerializer;
    private readonly governanceContract;
    constructor(options: {
        config: TransactionsFactoryConfig;
        gasLimitEstimator?: IGasLimitEstimator;
    });
    createTransactionForNewProposal(sender: Address, options: NewProposalInput): Promise<Transaction>;
    createTransactionForVoting(sender: Address, options: VoteProposalInput): Promise<Transaction>;
    createTransactionForClosingProposal(sender: Address, options: CloseProposalInput): Promise<Transaction>;
    createTransactionForClearingEndedProposals(sender: Address, options: ClearEndedProposalsInput): Promise<Transaction>;
    createTransactionForClaimingAccumulatedFees(sender: Address): Promise<Transaction>;
    createTransactionForChangingConfig(sender: Address, options: ChangeConfigInput): Promise<Transaction>;
}
