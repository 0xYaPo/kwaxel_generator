import { IGasLimitEstimator } from "../core";
import { Address } from "../core/address";
import { BaseFactory } from "../core/baseFactory";
import { Transaction } from "../core/transaction";
import { SaveKeyValueInput, SetGuardianInput } from "./resources";
interface IConfig {
    chainID: string;
    minGasLimit: bigint;
    gasLimitPerByte: bigint;
    gasLimitSaveKeyValue: bigint;
    gasLimitPersistPerByte: bigint;
    gasLimitStorePerByte: bigint;
    gasLimitSetGuardian: bigint;
    gasLimitGuardAccount: bigint;
    gasLimitUnguardAccount: bigint;
}
export declare class AccountTransactionsFactory extends BaseFactory {
    private readonly config;
    constructor(options: {
        config: IConfig;
        gasLimitEstimator?: IGasLimitEstimator;
    });
    createTransactionForSavingKeyValue(sender: Address, options: SaveKeyValueInput): Promise<Transaction>;
    private computeExtraGasForSavingKeyValue;
    private computeDataPartsForSavingKeyValue;
    createTransactionForSettingGuardian(sender: Address, options: SetGuardianInput): Promise<Transaction>;
    createTransactionForGuardingAccount(sender: Address): Promise<Transaction>;
    createTransactionForUnguardingAccount(sender: Address, options: {
        guardian?: Address;
    }): Promise<Transaction>;
}
export {};
