"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SmartContractTransactionsFactory = void 0;
const abi_1 = require("../abi");
const core_1 = require("../core");
const baseFactory_1 = require("../core/baseFactory");
const constants_1 = require("../core/constants");
const errors_1 = require("../core/errors");
const logger_1 = require("../core/logger");
const tokens_1 = require("../core/tokens");
const tokenTransfersDataBuilder_1 = require("../core/tokenTransfersDataBuilder");
const transaction_1 = require("../core/transaction");
const utils_codec_1 = require("../core/utils.codec");
/**
 * Use this class to create transactions to deploy, call or upgrade a smart contract.
 */
class SmartContractTransactionsFactory extends baseFactory_1.BaseFactory {
    constructor(options) {
        super({ config: options.config, gasLimitEstimator: options.gasLimitEstimator });
        this.config = options.config;
        this.abi = options.abi;
        this.tokenComputer = new tokens_1.TokenComputer();
        this.dataArgsBuilder = new tokenTransfersDataBuilder_1.TokenTransfersDataBuilder();
        this.contractDeployAddress = core_1.Address.newFromHex(constants_1.CONTRACT_DEPLOY_ADDRESS_HEX, this.config.addressHrp);
    }
    async createTransactionForDeploy(sender, options) {
        const nativeTransferAmount = options.nativeTransferAmount ?? 0n;
        const isUpgradeable = options.isUpgradeable ?? true;
        const isReadable = options.isReadable ?? true;
        const isPayable = options.isPayable ?? false;
        const isPayableBySmartContract = options.isPayableBySmartContract ?? true;
        const args = options.arguments || [];
        const metadata = new core_1.CodeMetadata(isUpgradeable, isReadable, isPayable, isPayableBySmartContract);
        const dataParts = [utils_codec_1.byteArrayToHex(options.bytecode), utils_codec_1.byteArrayToHex(constants_1.VM_TYPE_WASM_VM), metadata.toString()];
        const endpoint = this.abi?.constructorDefinition;
        const preparedArgs = this.argsToDataParts(args, endpoint);
        dataParts.push(...preparedArgs);
        const transaction = new transaction_1.Transaction({
            sender,
            receiver: this.contractDeployAddress,
            value: nativeTransferAmount,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, options.gasLimit);
        return transaction;
    }
    async createTransactionForExecute(sender, options) {
        const args = options.arguments || [];
        let tokenTransfers = options.tokenTransfers ? [...options.tokenTransfers] : [];
        let nativeTransferAmount = options.nativeTransferAmount ?? 0n;
        let numberOfTokens = tokenTransfers.length;
        if (nativeTransferAmount && numberOfTokens) {
            tokenTransfers.push(tokens_1.TokenTransfer.newFromNativeAmount(nativeTransferAmount));
            nativeTransferAmount = 0n;
            numberOfTokens++;
        }
        let receiver = options.contract;
        let dataParts = [];
        if (numberOfTokens === 1) {
            const transfer = tokenTransfers[0];
            if (transfer.token.identifier === constants_1.EGLD_IDENTIFIER_FOR_MULTI_ESDTNFT_TRANSFER) {
                dataParts = this.dataArgsBuilder.buildDataPartsForMultiESDTNFTTransfer(receiver, tokenTransfers);
                receiver = sender;
            }
            else if (this.tokenComputer.isFungible(transfer.token)) {
                dataParts = this.dataArgsBuilder.buildDataPartsForESDTTransfer(transfer);
            }
            else {
                dataParts = this.dataArgsBuilder.buildDataPartsForSingleESDTNFTTransfer(transfer, receiver);
                receiver = sender;
            }
        }
        else if (numberOfTokens > 1) {
            dataParts = this.dataArgsBuilder.buildDataPartsForMultiESDTNFTTransfer(receiver, tokenTransfers);
            receiver = sender;
        }
        dataParts.push(dataParts.length ? utils_codec_1.utf8ToHex(options.function) : options.function);
        const endpoint = this.abi?.getEndpoint(options.function);
        const preparedArgs = this.argsToDataParts(args, endpoint);
        dataParts.push(...preparedArgs);
        const transaction = new transaction_1.Transaction({
            sender,
            receiver,
            value: nativeTransferAmount,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, options.gasLimit);
        return transaction;
    }
    async createTransactionForUpgrade(sender, options) {
        const nativeTransferAmount = options.nativeTransferAmount ?? 0n;
        const isUpgradeable = options.isUpgradeable ?? true;
        const isReadable = options.isReadable ?? true;
        const isPayable = options.isPayable ?? false;
        const isPayableBySmartContract = options.isPayableBySmartContract ?? true;
        const args = options.arguments || [];
        const metadata = new core_1.CodeMetadata(isUpgradeable, isReadable, isPayable, isPayableBySmartContract);
        const dataParts = ["upgradeContract", utils_codec_1.byteArrayToHex(options.bytecode), metadata.toString()];
        const endpoint = this.getEndpointForUpgrade();
        const preparedArgs = this.argsToDataParts(args, endpoint);
        dataParts.push(...preparedArgs);
        const transaction = new transaction_1.Transaction({
            sender,
            receiver: options.contract,
            value: nativeTransferAmount,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, options.gasLimit);
        return transaction;
    }
    getEndpointForUpgrade() {
        if (!this.abi) {
            return undefined;
        }
        if (this.abi.upgradeConstructorDefinition) {
            return this.abi.upgradeConstructorDefinition;
        }
        try {
            return this.abi.getEndpoint("upgrade");
        }
        catch (error) {
            // Contracts written using an old Rust framework and deployed prior Sirius might not describe the 'upgrade' endpoint in the ABI.
            logger_1.Logger.warn("In the ABI, cannot find the 'upgrade' endpoint definition. Will use the constructor definition (fallback).");
            return this.abi.constructorDefinition;
        }
    }
    async createTransactionForClaimingDeveloperRewards(options) {
        const dataParts = ["ClaimDeveloperRewards"];
        const transaction = new transaction_1.Transaction({
            sender: options.sender,
            receiver: options.contract,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, options.gasLimit, this.config.gasLimitClaimDeveloperRewards);
        return transaction;
    }
    async createTransactionForChangingOwnerAddress(options) {
        const dataParts = ["ChangeOwnerAddress", options.newOwner.toHex()];
        const transaction = new transaction_1.Transaction({
            sender: options.sender,
            receiver: options.contract,
            chainID: this.config.chainID,
            gasLimit: 0n,
        });
        this.setTransactionPayload(transaction, dataParts);
        await this.setGasLimit(transaction, options.gasLimit, this.config.gasLimitChangeOwnerAddress);
        return transaction;
    }
    argsToDataParts(args, endpoint) {
        if (endpoint) {
            const typedArgs = abi_1.NativeSerializer.nativeToTypedValues(args, endpoint);
            return new abi_1.ArgSerializer().valuesToStrings(typedArgs);
        }
        if (this.areArgsOfTypedValue(args)) {
            return new abi_1.ArgSerializer().valuesToStrings(args);
        }
        throw new errors_1.Err("Can't convert args to TypedValues");
    }
    areArgsOfTypedValue(args) {
        return args.every((arg) => abi_1.isTyped(arg));
    }
}
exports.SmartContractTransactionsFactory = SmartContractTransactionsFactory;
//# sourceMappingURL=smartContractTransactionsFactory.js.map