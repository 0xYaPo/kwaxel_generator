import { WindowProviderRequestEnums } from '@multiversx/sdk-web-wallet-cross-window-provider/out/enums/windowProviderEnums';
import { PostMessageParamsType, PostMessageReturnType } from '@multiversx/sdk-web-wallet-cross-window-provider/out/types';
import { WindowManager } from '@multiversx/sdk-web-wallet-cross-window-provider/out/WindowManager';
import { ExtendedIframeLoginType, IframeProviderContentWindowModel, LoginBrandingType } from './IframeManager.types';
export declare class IframeManager extends WindowManager {
    private iframeWalletComponent;
    private readonly iframeId;
    private loginType;
    private hasHandshake;
    constructor(props?: {
        onDisconnect?: () => Promise<boolean>;
    });
    get iframeWallet(): IframeProviderContentWindowModel | null;
    postMessage<T extends WindowProviderRequestEnums>({ type, payload }: PostMessageParamsType<T>): Promise<PostMessageReturnType<T>>;
    closeConnection(): Promise<boolean>;
    setLoginType(loginType: ExtendedIframeLoginType): Promise<void>;
    isWalletOpened(): boolean;
    closeWalletWindow(): void;
    setWalletWindow(): Promise<boolean>;
    setWalletVisible(visible: boolean): void;
    setLoginBranding(loginBranding: LoginBrandingType): void;
    private registerToChildResponse;
}
