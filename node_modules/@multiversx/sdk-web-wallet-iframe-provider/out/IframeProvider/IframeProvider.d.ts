import { Message, Transaction } from '@multiversx/sdk-core';
import { CrossWindowProvider, IProviderAccount } from '@multiversx/sdk-web-wallet-cross-window-provider/out/CrossWindowProvider/CrossWindowProvider';
import { WindowProviderResponseEnums } from '@multiversx/sdk-web-wallet-cross-window-provider/out/enums';
import { ReplyWithPostMessagePayloadType } from '@multiversx/sdk-web-wallet-cross-window-provider/out/types';
import { IframeManager } from '../IframeManager/IframeManager';
import { ExtendedIframeLoginType, LoginBrandingType } from '../IframeManager/IframeManager.types';
export type IframeProviderEventDataType<T extends WindowProviderResponseEnums> = {
    type: T;
    payload: ReplyWithPostMessagePayloadType<T>;
};
export declare class IframeProvider extends CrossWindowProvider {
    protected static _instance: IframeProvider | null;
    protected readonly windowManager: IframeManager;
    private loginType;
    constructor();
    static getInstance(): IframeProvider;
    init(): Promise<boolean>;
    setLoginType(loginType: ExtendedIframeLoginType): void;
    setLoginBranding(loginBranding: LoginBrandingType): void;
    setWalletUrl(url: string): CrossWindowProvider;
    login(options?: {
        token?: string;
    }): Promise<IProviderAccount>;
    dispose(): Promise<boolean>;
    logout(): Promise<boolean>;
    signTransaction(transaction: Transaction): Promise<Transaction>;
    signTransactions(transactions: Transaction[]): Promise<Transaction[]>;
    guardTransactions(transactions: Transaction[]): Promise<Transaction[]>;
    signMessage(messageToSign: Message): Promise<Message>;
}
