import { WindowProviderRequestEnums, WindowProviderResponseEnums } from '../enums';
import { PostMessageParamsType, PostMessageReturnType, ReplyWithPostMessagePayloadType } from '../types';
export declare class WindowManager {
    private _session;
    private _walletUrl;
    protected initialized: boolean;
    walletWindow: Window | null;
    isPopupBlocked: boolean;
    private _isLoggingOut;
    private activeListeners;
    private static readonly SESSION_STORAGE_KEY;
    constructor();
    get walletUrl(): string;
    setWalletUrl(url: string): WindowManager;
    private _loadSessionFromStorage;
    private _saveSessionToStorage;
    private _clearSessionFromStorage;
    init(): Promise<boolean>;
    onDestroy(): boolean;
    isWalletOpened(type?: WindowProviderRequestEnums): boolean;
    openPopupConsent(): Promise<boolean>;
    handshake(type: WindowProviderRequestEnums): Promise<boolean>;
    private addHandshakeChangeListener;
    listenOnce<T extends WindowProviderResponseEnums>(action: T): Promise<{
        type: T;
        payload: ReplyWithPostMessagePayloadType<T>;
    }>;
    closeConnection(): Promise<boolean>;
    isInitialized(): boolean;
    postMessage<T extends WindowProviderRequestEnums>({ type, payload }: PostMessageParamsType<T>): Promise<PostMessageReturnType<T>>;
    closeWalletWindow(): void;
    setWalletWindow(): Promise<boolean>;
}
