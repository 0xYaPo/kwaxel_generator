{
  "version": 3,
  "sources": ["../../src/native.auth.client.ts"],
  "sourcesContent": ["import axios from \"axios\";\nimport { NativeAuthClientConfig } from \"./entities/native.auth.client.config\";\n\nexport class NativeAuthClient {\n  private readonly config: NativeAuthClientConfig;\n\n  constructor(config?: Partial<NativeAuthClientConfig>) {\n    this.config = Object.assign(new NativeAuthClientConfig(), config);\n  }\n\n  getToken(address: string, token: string, signature: string): string {\n    const encodedAddress = this.encodeValue(address);\n    const encodedToken = this.encodeValue(token);\n\n    const accessToken = `${encodedAddress}.${encodedToken}.${signature}`;\n    return accessToken;\n  }\n\n  async initialize(extraInfo: any = {}): Promise<string> {\n    const blockHash = await this.getCurrentBlockHash();\n    const encodedExtraInfo = this.encodeValue(JSON.stringify(extraInfo));\n    const origin = this.encodeValue(this.config.origin);\n\n    return `${origin}.${blockHash}.${this.config.expirySeconds}.${encodedExtraInfo}`;\n  }\n\n  async getCurrentBlockHash(): Promise<string> {\n    if (this.config.gatewayUrl) {\n      return await this.getCurrentBlockHashWithGateway();\n    }\n    return await this.getCurrentBlockHashWithApi();\n  }\n\n  private async getCurrentBlockHashWithGateway(): Promise<string> {\n    const round = await this.getCurrentRound();\n    const url = `${this.config.gatewayUrl}/blocks/by-round/${round}`;\n    const response = await this.get(url);\n    const blocks = response.data.data.blocks;\n    const block = blocks.filter(\n      (block: { shard: number }) => block.shard === this.config.blockHashShard\n    )[0];\n    return block.hash;\n  }\n\n  private async getCurrentRound(): Promise<number> {\n    if (!this.config.gatewayUrl) {\n      throw new Error(\"Gateway URL not set\");\n    }\n    if (!this.config.blockHashShard) {\n      throw new Error(\"Blockhash shard not set\");\n    }\n\n    const url = `${this.config.gatewayUrl}/network/status/${this.config.blockHashShard}`;\n    const response = await this.get(url);\n    const status = response.data.data.status;\n    return status.erd_current_round;\n  }\n\n  private async getCurrentBlockHashWithApi(): Promise<string> {\n    try {\n      const url = `${this.config.apiUrl}/blocks/latest?ttl=${this.config.expirySeconds}&fields=hash`;\n      const response = await this.get(url);\n      if (response.data[0].hash !== undefined) {\n        return response.data[0].hash;\n      }\n    } catch (error) {}\n    return this.getCurrentBlockHashWithApiFallback();\n  }\n\n  private async getCurrentBlockHashWithApiFallback(): Promise<string> {\n    let url = `${this.config.apiUrl}/blocks?size=1&fields=hash`;\n    if (this.config.blockHashShard !== undefined) {\n      url += `&shard=${this.config.blockHashShard}`;\n    }\n\n    const response = await this.get(url);\n    return response.data[0].hash;\n  }\n  encodeValue(str: string) {\n    return this.escape(Buffer.from(str, \"utf8\").toString(\"base64\"));\n  }\n\n  private escape(str: string) {\n    return str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  }\n\n  private async get(url: string): Promise<any> {\n    return await axios.get(url, { headers: this.config.extraRequestHeaders });\n  }\n}\n"],
  "mappings": "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",
  "names": ["block"]
}
