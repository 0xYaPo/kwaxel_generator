"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
var native_auth_client_exports = {};
__export(native_auth_client_exports, {
  NativeAuthClient: () => NativeAuthClient
});
module.exports = __toCommonJS(native_auth_client_exports);
var import_axios = __toESM(require("axios"));
var import_native_auth_client = require("./entities/native.auth.client.config");
class NativeAuthClient {
  constructor(config) {
    __publicField(this, "config");
    this.config = Object.assign(new import_native_auth_client.NativeAuthClientConfig(), config);
  }
  getToken(address, token, signature) {
    const encodedAddress = this.encodeValue(address);
    const encodedToken = this.encodeValue(token);
    const accessToken = `${encodedAddress}.${encodedToken}.${signature}`;
    return accessToken;
  }
  initialize() {
    return __async(this, arguments, function* (extraInfo = {}) {
      const blockHash = yield this.getCurrentBlockHash();
      const encodedExtraInfo = this.encodeValue(JSON.stringify(extraInfo));
      const origin = this.encodeValue(this.config.origin);
      return `${origin}.${blockHash}.${this.config.expirySeconds}.${encodedExtraInfo}`;
    });
  }
  getCurrentBlockHash() {
    return __async(this, null, function* () {
      if (this.config.gatewayUrl) {
        return yield this.getCurrentBlockHashWithGateway();
      }
      return yield this.getCurrentBlockHashWithApi();
    });
  }
  getCurrentBlockHashWithGateway() {
    return __async(this, null, function* () {
      const round = yield this.getCurrentRound();
      const url = `${this.config.gatewayUrl}/blocks/by-round/${round}`;
      const response = yield this.get(url);
      const blocks = response.data.data.blocks;
      const block = blocks.filter(
        (block2) => block2.shard === this.config.blockHashShard
      )[0];
      return block.hash;
    });
  }
  getCurrentRound() {
    return __async(this, null, function* () {
      if (!this.config.gatewayUrl) {
        throw new Error("Gateway URL not set");
      }
      if (!this.config.blockHashShard) {
        throw new Error("Blockhash shard not set");
      }
      const url = `${this.config.gatewayUrl}/network/status/${this.config.blockHashShard}`;
      const response = yield this.get(url);
      const status = response.data.data.status;
      return status.erd_current_round;
    });
  }
  getCurrentBlockHashWithApi() {
    return __async(this, null, function* () {
      try {
        const url = `${this.config.apiUrl}/blocks/latest?ttl=${this.config.expirySeconds}&fields=hash`;
        const response = yield this.get(url);
        if (response.data[0].hash !== void 0) {
          return response.data[0].hash;
        }
      } catch (error) {
      }
      return this.getCurrentBlockHashWithApiFallback();
    });
  }
  getCurrentBlockHashWithApiFallback() {
    return __async(this, null, function* () {
      let url = `${this.config.apiUrl}/blocks?size=1&fields=hash`;
      if (this.config.blockHashShard !== void 0) {
        url += `&shard=${this.config.blockHashShard}`;
      }
      const response = yield this.get(url);
      return response.data[0].hash;
    });
  }
  encodeValue(str) {
    return this.escape(Buffer.from(str, "utf8").toString("base64"));
  }
  escape(str) {
    return str.replace(/\+/g, "-").replace(/\//g, "_").replace(/=/g, "");
  }
  get(url) {
    return __async(this, null, function* () {
      return yield import_axios.default.get(url, { headers: this.config.extraRequestHeaders });
    });
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  NativeAuthClient
});
//# sourceMappingURL=native.auth.client.js.map
