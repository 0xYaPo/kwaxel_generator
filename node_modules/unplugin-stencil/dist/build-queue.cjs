"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __typeError = (msg) => {
  throw TypeError(msg);
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => member.has(obj) || __typeError("Cannot " + msg);
var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read from private field"), getter ? getter.call(obj) : member.get(obj));
var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);

// src/build-queue.ts
var build_queue_exports = {};
__export(build_queue_exports, {
  BuildQueue: () => BuildQueue
});
module.exports = __toCommonJS(build_queue_exports);
var import_node_events = require("events");
var _compiler, _isBuilding, _pending, _BuildQueue_instances, queueBuild_fn, runBuild_fn;
var BuildQueue = class extends import_node_events.EventEmitter {
  constructor(compiler) {
    super();
    __privateAdd(this, _BuildQueue_instances);
    __privateAdd(this, _compiler);
    __privateAdd(this, _isBuilding, false);
    __privateAdd(this, _pending, false);
    __privateSet(this, _compiler, compiler);
  }
  async getLatestBuild(srcPath, distPath) {
    try {
      const [srcStats, distStats] = await Promise.all([
        __privateGet(this, _compiler).sys.stat(srcPath),
        __privateGet(this, _compiler).sys.stat(distPath)
      ]);
      if (distStats?.mtimeMs && srcStats?.mtimeMs && distStats.mtimeMs >= srcStats.mtimeMs) {
        return __privateGet(this, _compiler).sys.readFile(distPath);
      }
    } catch {
    }
    __privateMethod(this, _BuildQueue_instances, queueBuild_fn).call(this);
    await new Promise((resolve) => this.once("buildFinished", resolve));
    return __privateGet(this, _compiler).sys.readFile(distPath);
  }
};
_compiler = new WeakMap();
_isBuilding = new WeakMap();
_pending = new WeakMap();
_BuildQueue_instances = new WeakSet();
/**
 * Queues a build process. If a build is already in progress, set a pending flag and skip the build. Other vice initiates another build afterward
 */
queueBuild_fn = function() {
  if (__privateGet(this, _isBuilding)) {
    __privateSet(this, _pending, true);
    return;
  }
  __privateMethod(this, _BuildQueue_instances, runBuild_fn).call(this);
};
runBuild_fn = async function() {
  __privateSet(this, _isBuilding, true);
  this.emit("buildStart");
  try {
    await __privateGet(this, _compiler).build();
  } catch (err) {
    this.emit("buildError", err);
    throw err;
  } finally {
    __privateSet(this, _isBuilding, false);
    if (__privateGet(this, _pending)) {
      __privateSet(this, _pending, false);
      await __privateMethod(this, _BuildQueue_instances, runBuild_fn).call(this);
    } else {
      this.emit("buildFinished");
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BuildQueue
});
exports.default = module.exports;