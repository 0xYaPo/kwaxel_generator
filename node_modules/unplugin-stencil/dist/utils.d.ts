import { ParsedStaticImport } from 'mlly';
import { Options } from './types.js';
import '@stencil/core/internal';

/**
 * StencilJS does not import the `h` or `Fragment` function by default. We need to add it so the user
 * doesn't need to.
 */
declare function injectStencilImports(code: string, imports: ParsedStaticImport[]): string;
interface CompilerOptions {
    baseUrl?: string;
    paths?: Record<string, string[]>;
    target?: string;
}
/**
 * Read the TypeScript compiler configuration file from disk
 * @param ts the TypeScript module
 * @param rootDir the location to search for the config file
 * @returns the configuration, or `null` if the file cannot be found
 */
declare function getCompilerOptions(ts: any, rootDir: string): CompilerOptions | null;
/**
 * compile root directory of the project
 * @param options the options to use
 * @returns the path to the created config file
 */
declare function getRootDir(options: Options): string;
/**
 * create a temporary config file for StencilJS
 * @param options the options to use
 * @returns the path to the created config file
 */
declare function getStencilConfigFile(options: Options): Promise<string>;
/**
 * Parse the tag config from the code
 * @param code the code to parse the tag config from
 * @returns the tag config, or `undefined` if no tag config is found
 */
declare function parseTagConfig(code: string): string | undefined;
/**
 * transform the compiled code in amend the following:
 * - make relative imports absolute
 * - export the original component class
 *
 * @param code the code to transform
 * @param outputPath the path to the where the compiler outputs dist-custom-elements
 * @returns the transformed code
 */
declare function transformCompiledCode(code: string, outputPath: string): string;

export { getCompilerOptions, getRootDir, getStencilConfigFile, injectStencilImports, parseTagConfig, transformCompiledCode };
