import {
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet
} from "./chunk-ZJKILUQ3.js";

// src/build-queue.ts
import { EventEmitter } from "node:events";
var _compiler, _isBuilding, _pending, _BuildQueue_instances, queueBuild_fn, runBuild_fn;
var BuildQueue = class extends EventEmitter {
  constructor(compiler) {
    super();
    __privateAdd(this, _BuildQueue_instances);
    __privateAdd(this, _compiler);
    __privateAdd(this, _isBuilding, false);
    __privateAdd(this, _pending, false);
    __privateSet(this, _compiler, compiler);
  }
  async getLatestBuild(srcPath, distPath) {
    try {
      const [srcStats, distStats] = await Promise.all([
        __privateGet(this, _compiler).sys.stat(srcPath),
        __privateGet(this, _compiler).sys.stat(distPath)
      ]);
      if (distStats?.mtimeMs && srcStats?.mtimeMs && distStats.mtimeMs >= srcStats.mtimeMs) {
        return __privateGet(this, _compiler).sys.readFile(distPath);
      }
    } catch {
    }
    __privateMethod(this, _BuildQueue_instances, queueBuild_fn).call(this);
    await new Promise((resolve) => this.once("buildFinished", resolve));
    return __privateGet(this, _compiler).sys.readFile(distPath);
  }
};
_compiler = new WeakMap();
_isBuilding = new WeakMap();
_pending = new WeakMap();
_BuildQueue_instances = new WeakSet();
/**
 * Queues a build process. If a build is already in progress, set a pending flag and skip the build. Other vice initiates another build afterward
 */
queueBuild_fn = function() {
  if (__privateGet(this, _isBuilding)) {
    __privateSet(this, _pending, true);
    return;
  }
  __privateMethod(this, _BuildQueue_instances, runBuild_fn).call(this);
};
runBuild_fn = async function() {
  __privateSet(this, _isBuilding, true);
  this.emit("buildStart");
  try {
    await __privateGet(this, _compiler).build();
  } catch (err) {
    this.emit("buildError", err);
    throw err;
  } finally {
    __privateSet(this, _isBuilding, false);
    if (__privateGet(this, _pending)) {
      __privateSet(this, _pending, false);
      await __privateMethod(this, _BuildQueue_instances, runBuild_fn).call(this);
    } else {
      this.emit("buildFinished");
    }
  }
};

export {
  BuildQueue
};
