const require_chunk = require('./chunk-CsX-DzYB.cjs');
const module$1 = require_chunk.__toESM(require("module"));
const path = require_chunk.__toESM(require("path"));
const unplugin_stencil_vite = require_chunk.__toESM(require("unplugin-stencil/vite"));
const url = require_chunk.__toESM(require("url"));
const vite = require_chunk.__toESM(require("vite"));

//#region src/preset.ts
const require$1 = (0, module$1.createRequire)(require("url").pathToFileURL(__filename).href);
const getAbsolutePath = (input) => (0, path.dirname)(require$1.resolve((0, path.join)(input, "package.json")));
const __dirname$1 = (0, path.dirname)((0, url.fileURLToPath)(require("url").pathToFileURL(__filename).href));
const renderer = (0, path.join)(__dirname$1, "entry-preview.js");
const core = {
	builder: getAbsolutePath("@storybook/builder-vite"),
	renderer
};
const viteFinal = async (defaultConfig, { configType }) => {
	const config = (0, vite.mergeConfig)(defaultConfig, {
		build: { target: "es2020" },
		plugins: [(0, unplugin_stencil_vite.default)({ rootPath: defaultConfig.root })]
	});
	if (configType === "DEVELOPMENT") return (0, vite.mergeConfig)(config, { build: { rollupOptions: { external: ["@stencil/core"] } } });
	return config;
};
const previewAnnotations = async (input = [], options) => {
	const docsEnabled = Object.keys(await options.presets.apply("docs", {}, options)).length > 0;
	const result = [];
	return result.concat(input).concat([renderer]).concat(docsEnabled ? [(0, path.join)(__dirname$1, "entry-preview-docs.js")] : []);
};

//#endregion
exports.core = core;
exports.previewAnnotations = previewAnnotations;
exports.viteFinal = viteFinal;
//# sourceMappingURL=preset.cjs.map