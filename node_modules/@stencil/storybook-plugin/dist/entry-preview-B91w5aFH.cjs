const require_chunk = require('./chunk-CsX-DzYB.cjs');
const storybook_internal_docs_tools = require_chunk.__toESM(require("storybook/internal/docs-tools"));
const __stencil_core = require_chunk.__toESM(require("@stencil/core"));
const storybook_preview_api = require_chunk.__toESM(require("storybook/preview-api"));

//#region src/render.ts
const render = (args, context) => {
	const { component, parameters: parameters$1 } = context;
	if (Array.isArray(component)) throw new Error("If your story does not contain a render function, you must provide a component property!");
	if (typeof component === "string" && !customElements.get(component)) throw new Error(`Stencil component not found. If you are not lazy loading your components with \`defineCustomElements()\` in preview.ts, pass a constructor value for component in your story \`component: MyComponent\``);
	else if (typeof component !== "string" && !customElements.getName(component)) throw new Error(`Stencil component not found. If you are lazy loading your components with \`defineCustomElements()\` in preview.ts, pass a string value for component in your story \`component: 'my-component'\``);
	const cmpName = typeof component === "string" ? component : customElements.getName(component);
	const children = Object.entries(parameters$1.slots || []).map(([key, value]) => {
		const slot = key === "default" ? void 0 : key;
		const child = typeof value === "string" ? (0, __stencil_core.h)(void 0, { slot }, value) : {
			...value,
			$attrs$: {
				...value.$attrs$,
				slot
			}
		};
		child.$tag$ = child.$tag$ || (slot ? "span" : null);
		return child.$tag$ ? child : child.$children$;
	});
	const Component = `${cmpName}`;
	return (0, __stencil_core.h)(Component, { ...args }, children);
};
function renderToCanvas({ storyFn, showMain, storyContext }, canvasElement) {
	const vdom = storyFn();
	showMain();
	/**
	* If the component is not automatically registered after import, register it here
	*/
	if (storyContext.component && storyContext.component.is && !customElements.get(storyContext.component.is)) customElements.define(storyContext.component.is, storyContext.component);
	if (canvasElement.firstChild) canvasElement.removeChild(canvasElement.firstChild);
	const element = document.createElement("div");
	canvasElement.appendChild(element);
	(0, __stencil_core.render)(vdom, element);
	(0, storybook_preview_api.simulatePageLoad)(element);
}

//#endregion
//#region src/entry-preview.ts
var entry_preview_exports = {};
require_chunk.__export(entry_preview_exports, {
	argTypesEnhancers: () => argTypesEnhancers,
	parameters: () => parameters,
	render: () => render,
	renderToCanvas: () => renderToCanvas
});
const parameters = { renderer: "stencil" };
const argTypesEnhancers = [storybook_internal_docs_tools.enhanceArgTypes];

//#endregion
Object.defineProperty(exports, 'argTypesEnhancers', {
  enumerable: true,
  get: function () {
    return argTypesEnhancers;
  }
});
Object.defineProperty(exports, 'entry_preview_exports', {
  enumerable: true,
  get: function () {
    return entry_preview_exports;
  }
});
Object.defineProperty(exports, 'parameters', {
  enumerable: true,
  get: function () {
    return parameters;
  }
});
Object.defineProperty(exports, 'render', {
  enumerable: true,
  get: function () {
    return render;
  }
});
Object.defineProperty(exports, 'renderToCanvas', {
  enumerable: true,
  get: function () {
    return renderToCanvas;
  }
});
//# sourceMappingURL=entry-preview-B91w5aFH.cjs.map