import { enhanceArgTypes } from "storybook/internal/docs-tools";
import { h, render } from "@stencil/core";
import { simulatePageLoad } from "storybook/preview-api";

//#region rolldown:runtime
var __defProp = Object.defineProperty;
var __export = (target, all) => {
	for (var name in all) __defProp(target, name, {
		get: all[name],
		enumerable: true
	});
};

//#endregion
//#region src/render.ts
const render$1 = (args, context) => {
	const { component, parameters: parameters$1 } = context;
	if (Array.isArray(component)) throw new Error("If your story does not contain a render function, you must provide a component property!");
	if (typeof component === "string" && !customElements.get(component)) throw new Error(`Stencil component not found. If you are not lazy loading your components with \`defineCustomElements()\` in preview.ts, pass a constructor value for component in your story \`component: MyComponent\``);
	else if (typeof component !== "string" && !customElements.getName(component)) throw new Error(`Stencil component not found. If you are lazy loading your components with \`defineCustomElements()\` in preview.ts, pass a string value for component in your story \`component: 'my-component'\``);
	const cmpName = typeof component === "string" ? component : customElements.getName(component);
	const children = Object.entries(parameters$1.slots || []).map(([key, value]) => {
		const slot = key === "default" ? void 0 : key;
		const child = typeof value === "string" ? h(void 0, { slot }, value) : {
			...value,
			$attrs$: {
				...value.$attrs$,
				slot
			}
		};
		child.$tag$ = child.$tag$ || (slot ? "span" : null);
		return child.$tag$ ? child : child.$children$;
	});
	const Component = `${cmpName}`;
	return h(Component, { ...args }, children);
};
function renderToCanvas({ storyFn, showMain, storyContext }, canvasElement) {
	const vdom = storyFn();
	showMain();
	/**
	* If the component is not automatically registered after import, register it here
	*/
	if (storyContext.component && storyContext.component.is && !customElements.get(storyContext.component.is)) customElements.define(storyContext.component.is, storyContext.component);
	if (canvasElement.firstChild) canvasElement.removeChild(canvasElement.firstChild);
	const element = document.createElement("div");
	canvasElement.appendChild(element);
	render(vdom, element);
	simulatePageLoad(element);
}

//#endregion
//#region src/entry-preview.ts
var entry_preview_exports = {};
__export(entry_preview_exports, {
	argTypesEnhancers: () => argTypesEnhancers,
	parameters: () => parameters,
	render: () => render$1,
	renderToCanvas: () => renderToCanvas
});
const parameters = { renderer: "stencil" };
const argTypesEnhancers = [enhanceArgTypes];

//#endregion
export { argTypesEnhancers, entry_preview_exports, parameters, render$1 as render, renderToCanvas };
//# sourceMappingURL=entry-preview-DWaghsKM.js.map