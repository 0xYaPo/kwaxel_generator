{"version":3,"file":"ssr.js","sources":["../../../node_modules/.pnpm/@emotion+unitless@0.10.0/node_modules/@emotion/unitless/dist/emotion-unitless.esm.js","../../../node_modules/.pnpm/react-style-stringify@1.2.0/node_modules/react-style-stringify/dist/index.mjs","../src/runtime/constants.ts","../src/runtime/ssr.tsx"],"sourcesContent":["var unitlessKeys = {\n  animationIterationCount: 1,\n  aspectRatio: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  msGridRow: 1,\n  msGridRowSpan: 1,\n  msGridColumn: 1,\n  msGridColumnSpan: 1,\n  fontWeight: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  scale: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  WebkitLineClamp: 1,\n  // SVG-related properties\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\n\nexport { unitlessKeys as default };\n","// src/helpers.ts\nimport unitless from \"@emotion/unitless\";\nvar DEFAULT_UNIT = \"px\";\nvar isCSSPropertyValue = (value) => typeof value === \"number\" || typeof value === \"string\";\nfunction camelToKebab(str) {\n  return str.replace(/[A-Z]/g, (match) => `-${match.toLowerCase()}`);\n}\nfunction trimCssSelector(selector) {\n  return selector.replace(/\\s*([+~>])\\s*/g, \"$1\").replace(/\\s{2,}/g, \" \").trim();\n}\nfunction applyCssUnits(property, value, unit = DEFAULT_UNIT) {\n  if (typeof value !== \"string\" && typeof value !== \"number\") {\n    throw new Error(\n      \"Invalid input: value of 'cssProperties' must be string or number.\"\n    );\n  }\n  const isUnitless = unitless[property] === 1;\n  if (typeof value === \"string\" || value === 0 || isUnitless) {\n    return `${value}`;\n  }\n  const resolvedUnit = (typeof unit === \"string\" ? unit : unit[property]) || DEFAULT_UNIT;\n  return `${value}${resolvedUnit}`;\n}\n\n// src/stringifyStyleDeclaration.ts\nfunction stringifyStyleDeclaration(styleDeclaration, options) {\n  if (typeof styleDeclaration !== \"object\" || styleDeclaration === null) {\n    throw new TypeError(\n      `[stringifyStyleDeclaration]: Expected 'styleDeclaration' to be a non-null object, but received ${styleDeclaration} (type:${typeof styleDeclaration}).`\n    );\n  }\n  const importantSuffix = options?.important ? \"!important\" : \"\";\n  return Object.entries(styleDeclaration).filter(([_, value]) => isCSSPropertyValue(value)).map(\n    ([property, value]) => `${camelToKebab(property)}:${applyCssUnits(\n      property,\n      value,\n      options?.unit\n    )}${importantSuffix};`\n  ).join(\"\");\n}\n\n// src/stringifyStyleRule.ts\nfunction stringifyStyleRule(styleRule, options) {\n  if (typeof styleRule !== \"object\" || styleRule === null) {\n    throw new TypeError(\n      `[stringifyStyleRule]: Expected 'styleRule' to be a non-null object, but received ${styleRule} (type:${typeof styleRule}).`\n    );\n  }\n  return Object.entries(styleRule).reduce((result, [selector, declaration]) => {\n    if (Object.keys(declaration).length > 0) {\n      result.push(\n        `${trimCssSelector(selector)}{${stringifyStyleDeclaration(\n          declaration,\n          options\n        )}}`\n      );\n    }\n    return result;\n  }, []).join(\"\");\n}\n\n// src/stringify-react-styles.ts\nfunction stringifyCSSProperties(cssProperties, optionsOrImportant = false) {\n  if (typeof cssProperties !== \"object\" || cssProperties === null) {\n    throw new TypeError(\n      `[stringifyCSSProperties]: Expected 'cssProperties' to be a non-null object, but received ${cssProperties} (type:${typeof cssProperties}).`\n    );\n  }\n  const options = typeof optionsOrImportant === \"boolean\" ? {\n    important: optionsOrImportant\n  } : optionsOrImportant;\n  return stringifyStyleDeclaration(cssProperties, options);\n}\nfunction stringifyStyleMap(styleMap, optionsOrImportant = false) {\n  if (typeof styleMap !== \"object\" || styleMap === null) {\n    throw new TypeError(\n      `[stringifyStyleMap]: Expected 'styleMap' to be a non-null object, but received ${styleMap} (type:${typeof styleMap}).`\n    );\n  }\n  const options = typeof optionsOrImportant === \"boolean\" ? {\n    important: optionsOrImportant\n  } : optionsOrImportant;\n  return stringifyStyleRule(styleMap, options);\n}\nexport {\n  stringifyCSSProperties,\n  stringifyStyleDeclaration,\n  stringifyStyleMap,\n  stringifyStyleRule\n};\n//# sourceMappingURL=index.mjs.map","/**\n * Copied from https://github.com/facebook/react/blob/7771d3a7972cc2483c45fde51b7ec2d926cba097/packages/react-dom-bindings/src/shared/possibleStandardNames.js\n * and amended accordingly to remove duplicates and entries where key value pairs are the same.\n */\nexport const possibleStandardNames = {\n  acceptCharset: 'accept-charset',\n  accessKey: 'accesskey',\n  allowFullScreen: 'allowfullscreen',\n  autoCapitalize: 'autocapitalize',\n  autoComplete: 'autocomplete',\n  autoCorrect: 'autocorrect',\n  autoFocus: 'autofocus',\n  autoPlay: 'autoplay',\n  autoSave: 'autosave',\n  cellPadding: 'cellpadding',\n  cellSpacing: 'cellspacing',\n  charSet: 'charset',\n  className: 'class',\n  classID: 'classid',\n  colSpan: 'colspan',\n  contentEditable: 'contenteditable',\n  contextMenu: 'contextmenu',\n  controlsList: 'controlslist',\n  crossOrigin: 'crossorigin',\n  dangerouslySetInnerHTML: 'dangerouslysetinnerhtml',\n  dateTime: 'datetime',\n  defaultChecked: 'defaultchecked',\n  defaultValue: 'defaultvalue',\n  disablePictureInPicture: 'disablepictureinpicture',\n  disableRemotePlayback: 'disableremoteplayback',\n  encType: 'enctype',\n  enterKeyHint: 'enterkeyhint',\n  fetchPriority: 'fetchpriority',\n  htmlFor: 'for',\n  formMethod: 'formmethod',\n  formAction: 'formaction',\n  formEncType: 'formenctype',\n  formNoValidate: 'formnovalidate',\n  formTarget: 'formtarget',\n  frameBorder: 'frameborder',\n  hrefLang: 'hreflang',\n  httpEquiv: 'http-equiv',\n  imageSizes: 'imagesizes',\n  imageSrcSet: 'imagesrcset',\n  inputMode: 'inputmode',\n  itemID: 'itemid',\n  itemProp: 'itemprop',\n  itemRef: 'itemref',\n  itemScope: 'itemscope',\n  itemType: 'itemtype',\n  keyParams: 'keyparams',\n  keyType: 'keytype',\n  marginWidth: 'marginwidth',\n  marginHeight: 'marginheight',\n  maxLength: 'maxlength',\n  mediaGroup: 'mediagroup',\n  noModule: 'nomodule',\n  noValidate: 'novalidate',\n  playsInline: 'playsinline',\n  radioGroup: 'radiogroup',\n  readOnly: 'readonly',\n  referrerPolicy: 'referrerpolicy',\n  rowSpan: 'rowspan',\n  spellCheck: 'spellcheck',\n  srcDoc: 'srcdoc',\n  srcLang: 'srclang',\n  srcSet: 'srcset',\n  tabIndex: 'tabindex',\n  useMap: 'usemap',\n  accentHeight: 'accent-height',\n  alignmentBaseline: 'alignment-baseline',\n  arabicForm: 'arabic-form',\n  attributeName: 'attributename',\n  attributeType: 'attributetype',\n  autoReverse: 'autoreverse',\n  baseFrequency: 'basefrequency',\n  baselineShift: 'baseline-shift',\n  baseProfile: 'baseprofile',\n  calcMode: 'calcmode',\n  capHeight: 'cap-height',\n  clipPath: 'clip-path',\n  clipPathUnits: 'clippathunits',\n  clipRule: 'clip-rule',\n  colorInterpolation: 'color-interpolation',\n  colorInterpolationFilters: 'color-interpolation-filters',\n  colorProfile: 'color-profile',\n  colorRendering: 'color-rendering',\n  contentScriptType: 'contentscripttype',\n  contentStyleType: 'contentstyletype',\n  diffuseConstant: 'diffuseconstant',\n  dominantBaseline: 'dominant-baseline',\n  enableBackground: 'enable-background',\n  externalResourcesRequired: 'externalresourcesrequired',\n  fillOpacity: 'fill-opacity',\n  fillRule: 'fill-rule',\n  filterRes: 'filterres',\n  filterUnits: 'filterunits',\n  floodOpacity: 'flood-opacity',\n  floodColor: 'flood-color',\n  fontFamily: 'font-family',\n  fontSize: 'font-size',\n  fontSizeAdjust: 'font-size-adjust',\n  fontStretch: 'font-stretch',\n  fontStyle: 'font-style',\n  fontVariant: 'font-variant',\n  fontWeight: 'font-weight',\n  glyphName: 'glyph-name',\n  glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n  glyphOrientationVertical: 'glyph-orientation-vertical',\n  gradientTransform: 'gradienttransform',\n  gradientUnits: 'gradientunits',\n  horizAdvX: 'horiz-adv-x',\n  horizOriginX: 'horiz-origin-x',\n  imageRendering: 'image-rendering',\n  kernelMatrix: 'kernelmatrix',\n  kernelUnitLength: 'kernelunitlength',\n  keyPoints: 'keypoints',\n  keySplines: 'keysplines',\n  keyTimes: 'keytimes',\n  lengthAdjust: 'lengthadjust',\n  letterSpacing: 'letter-spacing',\n  lightingColor: 'lighting-color',\n  limitingConeAngle: 'limitingconeangle',\n  markerEnd: 'marker-end',\n  markerHeight: 'markerheight',\n  markerMid: 'marker-mid',\n  markerStart: 'marker-start',\n  markerUnits: 'markerunits',\n  markerWidth: 'markerwidth',\n  maskContentUnits: 'maskcontentunits',\n  maskUnits: 'maskunits',\n  numOctaves: 'numoctaves',\n  overlinePosition: 'overline-position',\n  overlineThickness: 'overline-thickness',\n  paintOrder: 'paint-order',\n  panose1: 'panose-1',\n  pathLength: 'pathlength',\n  patternContentUnits: 'patterncontentunits',\n  patternTransform: 'patterntransform',\n  patternUnits: 'patternunits',\n  pointerEvents: 'pointer-events',\n  pointsAtX: 'pointsatx',\n  pointsAtY: 'pointsaty',\n  pointsAtZ: 'pointsatz',\n  preserveAlpha: 'preservealpha',\n  preserveAspectRatio: 'preserveaspectratio',\n  primitiveUnits: 'primitiveunits',\n  refX: 'refx',\n  refY: 'refy',\n  renderingIntent: 'rendering-intent',\n  repeatCount: 'repeatcount',\n  repeatDur: 'repeatdur',\n  requiredExtensions: 'requiredextensions',\n  requiredFeatures: 'requiredfeatures',\n  shapeRendering: 'shape-rendering',\n  slot: 'slot',\n  specularConstant: 'specularconstant',\n  specularExponent: 'specularexponent',\n  spreadMethod: 'spreadmethod',\n  startOffset: 'startoffset',\n  stdDeviation: 'stddeviation',\n  stitchTiles: 'stitchtiles',\n  stopColor: 'stop-color',\n  stopOpacity: 'stop-opacity',\n  strikethroughPosition: 'strikethrough-position',\n  strikethroughThickness: 'strikethrough-thickness',\n  strokeDasharray: 'stroke-dasharray',\n  strokeDashoffset: 'stroke-dashoffset',\n  strokeLinecap: 'stroke-linecap',\n  strokeLinejoin: 'stroke-linejoin',\n  strokeMiterlimit: 'stroke-miterlimit',\n  strokeWidth: 'stroke-width',\n  strokeOpacity: 'stroke-opacity',\n  suppressContentEditableWarning: 'suppresscontenteditablewarning',\n  suppressHydrationWarning: 'suppresshydrationwarning',\n  surfaceScale: 'surfacescale',\n  systemLanguage: 'systemlanguage',\n  tableValues: 'tablevalues',\n  targetX: 'targetx',\n  targetY: 'targety',\n  textAnchor: 'text-anchor',\n  textDecoration: 'text-decoration',\n  textLength: 'textlength',\n  textRendering: 'text-rendering',\n  transformOrigin: 'transform-origin',\n  underlinePosition: 'underline-position',\n  underlineThickness: 'underline-thickness',\n  unicodeBidi: 'unicode-bidi',\n  unicodeRange: 'unicode-range',\n  unitsPerEm: 'units-per-em',\n  vectorEffect: 'vector-effect',\n  vertAdvY: 'vert-adv-y',\n  vertOriginX: 'vert-origin-x',\n  vertOriginY: 'vert-origin-y',\n  wordSpacing: 'word-spacing',\n  writingMode: 'writing-mode',\n  xChannelSelector: 'xchannelselector',\n  xHeight: 'x-height',\n  xlinkActuate: 'xlink:actuate',\n  xlinkArcrole: 'xlink:arcrole',\n  xlinkHref: 'xlink:href',\n  xlinkRole: 'xlink:role',\n  xlinkShow: 'xlink:show',\n  xlinkTitle: 'xlink:title',\n  xlinkType: 'xlink:type',\n  xmlBase: 'xml:base',\n  xmlLang: 'xml:lang',\n  xmlnsXlink: 'xmlns:xlink',\n  yChannelSelector: 'ychannelselector',\n  zoomAndPan: 'zoomandpan',\n};\n","import type { EventName, ReactWebComponent, WebComponentProps } from '@lit/react';\nimport React, { Component, JSXElementConstructor, ReactNode } from 'react';\nimport { stringifyCSSProperties } from 'react-style-stringify';\n// @ts-expect-error\nimport dynamic from 'next/dynamic';\n\nimport { possibleStandardNames } from './constants.js';\n\nconst LOG_PREFIX = '[react-output-target]';\n\n// A key value map matching React prop names to event names.\ntype EventNames = Record<string, EventName | string>;\n\nexport type { ReactWebComponent, WebComponentProps } from '@lit/react';\n\nexport type SerializeShadowRootOptions =\n  | 'declarative-shadow-dom'\n  | 'scoped'\n  | {\n      'declarative-shadow-dom'?: string[];\n      scoped?: string[];\n      default: 'declarative-shadow-dom' | 'scoped';\n    }\n  | boolean;\n\n/**\n * Type that emulates Next.js dynamic import functionality without importing Next.js types\n */\nexport type DynamicImport<T = any> = () => Promise<T>;\nexport type DynamicOptions = {\n  loading?: () => ReactNode;\n  ssr?: boolean;\n  suspense?: boolean;\n};\nexport type DynamicFunction = <T = any>(\n  dynamicImport: DynamicImport<T>,\n  options?: DynamicOptions\n) => React.ComponentType<any>;\n\n/**\n * these types are defined by a Stencil hydrate app so we have to copy the minimal types here\n */\nexport interface RenderToStringOptions {\n  fullDocument?: boolean;\n  prettyHtml?: boolean;\n  /**\n   * Configure how Stencil serializes the components shadow root.\n   * - If set to `declarative-shadow-dom` the component will be rendered within a Declarative Shadow DOM.\n   * - If set to `scoped` Stencil will render the contents of the shadow root as a `scoped: true` component\n   *   and the shadow DOM will be created during client-side hydration.\n   * - Alternatively you can mix and match the two by providing an object with `declarative-shadow-dom` and `scoped` keys,\n   * the value arrays containing the tag names of the components that should be rendered in that mode.\n   *\n   * Examples:\n   * - `{ 'declarative-shadow-dom': ['my-component-1', 'another-component'], default: 'scoped' }`\n   * Render all components as `scoped` apart from `my-component-1` and `another-component`\n   * -  `{ 'scoped': ['an-option-component'], default: 'declarative-shadow-dom' }`\n   * Render all components within `declarative-shadow-dom` apart from `an-option-component`\n   * - `'scoped'` Render all components as `scoped`\n   * - `false` disables shadow root serialization\n   *\n   * *NOTE* `true` has been deprecated in favor of `declarative-shadow-dom` and `scoped`\n   * @default 'declarative-shadow-dom'\n   */\n  serializeShadowRoot?: SerializeShadowRootOptions;\n}\ninterface HydrateStyle {\n  href: string | null;\n  id: string;\n  content: string;\n}\ntype RenderToString = (\n  html: string,\n  options: RenderToStringOptions\n) => Promise<{ html: string | null; styles: HydrateStyle[] }>;\n\nexport type HydrateModule = {\n  renderToString: RenderToString;\n  serializeProperty: (value: any) => string;\n};\ninterface CreateComponentForServerSideRenderingOptions<I extends HTMLElement = HTMLElement, E extends EventNames = {}> {\n  clientModule: ReactWebComponent<I, E>;\n  tagName: string;\n  properties: Record<string, string>;\n  renderToString: RenderToString;\n  serializeProperty: (value: any) => string;\n  serializeShadowRoot?: SerializeShadowRootOptions;\n}\n\ntype StencilProps<I extends HTMLElement> = WebComponentProps<I>;\n\n// Definition comes from React but is not exported or part of the types package\n// see https://github.com/facebook/react/blob/372ec00c0384cd2089651154ea7c67693ee3f2a5/packages/react/src/ReactLazy.js#L46\ntype LazyComponent<T, P> = {\n  $$typeof: symbol | number;\n  _payload: P;\n  _init: (payload: P) => T;\n};\n\ntype ReactNodeExtended =\n  | ReactNode\n  | Component<any, any, any>\n  | LazyComponent<any, any>\n  | ((props: any, deprecatedLegacyContext?: any) => ReactNode);\n\n/**\n * returns true if the value is a primitive, e.g. string, number, boolean\n * @param value - the value to check\n * @returns true if the value is a primitive, false otherwise\n */\nconst isPrimitive = (value: unknown): value is string | number | boolean =>\n  typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean';\n\n/**\n * returns true if the value is empty, e.g. null or undefined\n * @param value - the value to check\n * @returns true if the value is empty, false otherwise\n */\nconst isEmpty = (value: unknown): value is null | undefined => value === null || value === undefined;\n\n/**\n * returns true if the value is iterable, e.g. an array\n * @param value - the value to check\n * @returns true if the value is iterable, false otherwise\n */\nconst isIterable = (value: unknown): value is Iterable<ReactNode> => Array.isArray(value);\n\n/**\n * returns true if the value is a JSX class element constructor\n * @param value - the value to check\n * @returns true if the value is a JSX class element constructor, false otherwise\n */\nconst isJSXClassElementConstructor = (\n  value: unknown\n): value is Exclude<JSXElementConstructor<any>, (props: any, legacyContext: any) => any> =>\n  !!value && /^\\s*class\\s+/.test(value.toString());\n\n/**\n * returns true if the value is a lazy exotic component\n * @param value - the value to check\n * @returns true if the value is a lazy exotic component, false otherwise\n */\nconst isLazyExoticComponent = (value: unknown): value is LazyComponent<any, any> =>\n  !!value && typeof value === 'object' && '_payload' in value;\n\n/**\n * Transform a React component into a Stencil component for server side rendering. This logic is executed\n * by a React framework e.g. Next.js in an Node.js environment. The function will:\n *\n *   - serialize the component (including the Light DOM) into a string (see `toSerializeWithChildren`)\n *   - transform the string with the Stencil component into a Declarative Shadow DOM component\n *   - parse the declarative shadow DOM component back into a React component\n *   - return the React component\n *\n * Note: this code should only be loaded on the server side, as it uses heavy Node.js dependencies,\n * e.g. `react-dom/server`, `html-react-parser` as well as the hydrate module, that when loaded on\n * the client side would increase the bundle size.\n */\nconst createComponentForServerSideRendering = <I extends HTMLElement, E extends EventNames = {}>(\n  options: CreateComponentForServerSideRenderingOptions<I, E>\n) => {\n  return (async ({ children, ...props }: StencilProps<I> = {}) => {\n    /**\n     * ensure we only run on server\n     */\n    if (!('process' in globalThis) || typeof window !== 'undefined') {\n      throw new Error('`createComponent` can only be run on the server');\n    }\n\n    /**\n     * compose element props into a string\n     */\n    let stringProps = '';\n    for (const [key, value] of Object.entries(props)) {\n      let propValue = isPrimitive(value)\n        ? `\"${value}\"`\n        : typeof value !== 'function'\n          ? options.serializeProperty(value)\n          : undefined;\n\n      /**\n       * parse the style object into a string\n       */\n      if (key === 'style' && typeof value === 'object' && value) {\n        propValue = `\"${stringifyCSSProperties(value)}\"`;\n      }\n\n      if (!propValue) {\n        continue;\n      }\n\n      const propName =\n        possibleStandardNames[key as keyof typeof possibleStandardNames] || options.properties[key] || key;\n      stringProps += ` ${propName}=${propValue}`;\n    }\n\n    /**\n     * Attempt to serialize the components light DOM as it may have an impact on how the Stencil\n     * component is being serialized. For example a Stencil component may render certain elements\n     * if its light DOM contains other elements.\n     */\n    let serializedChildren = '';\n    const toSerialize = `<${options.tagName}${stringProps} suppressHydrationWarning=\"true\">`;\n    const originalConsoleError = console.error;\n    try {\n      // Ignore potential console errors during serialization (for example if a hook is used, which\n      // is not allowed in SSR) as they are not relevant for the user and may cause confusion\n      if (!process.env.STENCIL_SSR_DEBUG) {\n        console.error = () => {};\n      }\n\n      // Pre-resolve all async components before rendering\n      const resolvedChildren = await resolveComponentTypes(children);\n      const ReactDOMServer = await import('react-dom/server');\n      serializedChildren = ReactDOMServer.renderToString(resolvedChildren);\n    } catch (err: unknown) {\n      /**\n       * if rendering the light DOM fails, we log a warning and continue to render the component\n       */\n      if (process.env.STENCIL_SSR_DEBUG) {\n        const error = err instanceof Error ? err : new Error('Unknown error');\n        console.warn(\n          `${LOG_PREFIX} Failed to serialize light DOM for ${toSerialize.slice(0, -1)} />: ${\n            error.stack\n          } - this may impact the hydration of the component`\n        );\n      }\n    } finally {\n      console.error = originalConsoleError;\n    }\n\n    const toSerializeWithChildren = `${toSerialize}${serializedChildren}</${options.tagName}>`;\n\n    /**\n     * first render the component with `prettyHtml` flag so it makes it easier to\n     * access the inner content of the component.\n     */\n    const { html, styles } = await options.renderToString(toSerializeWithChildren, {\n      fullDocument: false,\n      serializeShadowRoot: options.serializeShadowRoot ?? 'declarative-shadow-dom',\n      prettyHtml: true,\n    });\n\n    if (!html) {\n      throw new Error('No HTML returned from renderToString');\n    }\n\n    /**\n     * cut out the inner content of the component\n     */\n    const serializedComponentByLine = html.split('\\n');\n    const hydrationComment = '<!--r.1-->';\n    const isShadowComponent = serializedComponentByLine[1].includes('shadowrootmode=\"open\"');\n    let templateContent: undefined | string = undefined;\n    if (isShadowComponent) {\n      const templateEndTag = '  </template>';\n      templateContent = serializedComponentByLine\n        .slice(2, serializedComponentByLine.lastIndexOf(templateEndTag))\n        .join('\\n')\n        .trim();\n    }\n\n    /**\n     * `html-react-parser` is a Node.js dependency so we should make sure to only import it when\n     * run on the server and when needed.\n     */\n    const { default: parse } = await import('html-react-parser');\n    const typedParse = parse as unknown as typeof parse.default;\n\n    /**\n     * Parse the string back into a React component\n     */\n    const StencilElement = () =>\n      typedParse(html, {\n        transform(reactNode, domNode) {\n          /**\n           * only render the component we have been serializing before\n           */\n          if ('name' in domNode && domNode.name === options.tagName) {\n            const props = (reactNode as any).props;\n            /**\n             * remove the outer tag (e.g. `options.tagName`) so we only have the inner content\n             */\n            const CustomTag = `${options.tagName}`;\n\n            /**\n             * if the component is not a shadow component we can render it with the light DOM only\n             */\n            if (!isShadowComponent) {\n              const { children, ...customProps } = props || {};\n              const __html = serializedComponentByLine\n                /**\n                 * remove the components outer tags as we want to set the inner content only\n                 */\n                .slice(1, -1)\n                /**\n                 * bring the array back to a string\n                 */\n                .join('\\n')\n                .trim()\n                /**\n                 * remove any whitespace between tags that may cause hydration errors\n                 */\n                .replace(/(?<=>)\\s+(?=<)/g, '');\n\n              return (\n                <>\n                  {styles.map((style) => (\n                    <style key={style.id} id={style.id} dangerouslySetInnerHTML={{ __html: style.content }} />\n                  ))}\n                  <CustomTag {...customProps} suppressHydrationWarning={true} dangerouslySetInnerHTML={{ __html }} />\n                </>\n              );\n            }\n\n            /**\n             * return original component with given props and `suppressHydrationWarning` flag and\n             * set the template content based on our serialized Stencil component.\n             */\n            return (\n              <>\n                {styles.map((style) => (\n                  <style key={style.id} id={style.id} dangerouslySetInnerHTML={{ __html: style.content }} />\n                ))}\n                <CustomTag {...props} suppressHydrationWarning={true}>\n                  <template\n                    // @ts-expect-error\n                    shadowrootmode=\"open\"\n                    suppressHydrationWarning={true}\n                    dangerouslySetInnerHTML={{ __html: hydrationComment + templateContent }}\n                  ></template>\n                  {children}\n                </CustomTag>\n              </>\n            );\n          }\n\n          return;\n        },\n      });\n\n    const DynamicComponent = dynamic(async () => options.clientModule, {\n      /**\n       * Render Declarative Shadow DOM component\n       */\n      loading: () => <StencilElement />,\n      ssr: false,\n    });\n    return (\n      <DynamicComponent suppressHydrationWarning={true} {...props}>\n        {children}\n      </DynamicComponent>\n    );\n  }) as unknown as ReactWebComponent<I, E>;\n};\n\n/**\n * Resolve the component types for server side rendering.\n *\n * It walks through all component children and resolves them, e.g. call `createComponentForServerSideRendering` to\n * create a React component which we can pass into `ReactDOMServer.renderToString`. This enables us to include\n * the Light DOM of a component as part of Stencils serialization process.\n *\n * @param children - the children to resolve\n * @returns the resolved children\n */\nasync function resolveComponentTypes(children: ReactNode): Promise<ReactNode> {\n  /**\n   * If the children are empty or primitive, return them directly\n   */\n  if (isPrimitive(children) || isEmpty(children)) {\n    return children;\n  }\n\n  /**\n   * If the children are not iterable, make them an array\n   */\n  if (!isIterable(children)) {\n    children = [children];\n  }\n\n  return Promise.all(\n    Array.from(children).map(async (child) => {\n      if (isPrimitive(child) || isEmpty(child)) {\n        return child;\n      }\n\n      if (isIterable(child)) {\n        return resolveComponentTypes(child);\n      }\n\n      // Only ReactElements have type and props properties\n      if (!React.isValidElement(child)) {\n        return child;\n      }\n\n      const { type, props } = child as React.ReactElement<any>;\n\n      try {\n        const resolvedType = await resolveType(type, props);\n\n        /**\n         * If the resolved type is a ReactElement, return it directly\n         */\n        if (React.isValidElement(resolvedType)) {\n          return resolvedType;\n        }\n\n        const resolvedChildren = props?.children ? await resolveComponentTypes(props.children) : props?.children;\n\n        /**\n         * If the resolved type is a string (HTML element), create a new element\n         */\n        if (typeof resolvedType === 'string') {\n          return React.createElement(resolvedType, { ...props, children: resolvedChildren });\n        }\n\n        /**\n         * Otherwise, return the original child with resolved children\n         */\n        return React.cloneElement(child, { ...props, children: resolvedChildren });\n      } catch (error) {\n        if (process.env.STENCIL_SSR_DEBUG) {\n          console.warn('Failed to resolve component type:', error);\n        }\n        return child;\n      }\n    })\n  );\n}\n\n// Resolve the component type to a primitive element type\nconst resolveType = async (type: string | React.JSXElementConstructor<any>, props: any): Promise<ReactNodeExtended> => {\n  /**\n   * Child is a primitive element like 'div'\n   */\n  if (typeof type === 'string') {\n    return type;\n  }\n\n  try {\n    let resolvedType: ReactNodeExtended = null;\n\n    if (isJSXClassElementConstructor(type)) {\n      /**\n       * Child is a Class Component\n       */\n      const instance = new type(props);\n      resolvedType = instance.render ? await instance.render() : instance;\n    } else if (isLazyExoticComponent(type)) {\n      /**\n       * Handle React Lazy Component\n       */\n      const payload = type._payload;\n      const lazyResult =\n        payload._status === -1 // Uninitialized = -1 so we need to resolve the promise\n          ? await payload._result()\n          : payload._result;\n\n      const lazyComponent = lazyResult.default || lazyResult;\n      resolvedType = await resolveType(lazyComponent, props);\n    } else if (typeof type === 'function') {\n      /**\n       * Child is a Function Component (including async Server Components)\n       */\n      let result: any = type(props);\n\n      /**\n       * If the result is a Promise, await it\n       */\n      if (result && typeof result === 'object' && 'then' in result && typeof result.then === 'function') {\n        result = await result;\n      }\n\n      resolvedType = result as ReactNodeExtended;\n    }\n\n    /**\n     * Recursively resolve nested component types\n     */\n    while (\n      resolvedType &&\n      typeof resolvedType === 'object' &&\n      !React.isValidElement(resolvedType) &&\n      !isPrimitive(resolvedType) &&\n      'type' in resolvedType\n    ) {\n      resolvedType = await resolveType((resolvedType as any).type, props);\n    }\n\n    return resolvedType;\n  } catch (error) {\n    if (process.env.STENCIL_SSR_DEBUG) {\n      console.warn('Error resolving component type:', error);\n    }\n    return null;\n  }\n};\n\ntype CreateComponentForSSROptions<I extends HTMLElement, E extends EventNames = {}> = Omit<\n  CreateComponentForServerSideRenderingOptions<I, E>,\n  'renderToString' | 'serializeProperty'\n> & {\n  hydrateModule: Promise<HydrateModule>;\n};\n\n/**\n * Defines a custom element and creates a React component for server side rendering.\n * @public\n */\nexport const createComponent = <I extends HTMLElement, E extends EventNames = {}>(\n  options: CreateComponentForSSROptions<I, E>\n): ReactWebComponent<I, E> => {\n  /**\n   * If we are running in the browser, we can use the `createComponentWrapper` function\n   * to create a React component that can be used in the browser. This allows to import\n   * a Stencil component from one source and have a browser and server version of the component.\n   */\n  if (typeof window !== 'undefined') {\n    return options.clientModule;\n  }\n\n  /**\n   * IIFE to lazy load the `createComponentForServerSideRendering` function while allowing\n   * to return the correct type for the `ReactWebComponent`.\n   *\n   * Note: we want to lazy load the `./ssr` and `hydrateModule` modules to avoid\n   * bundling them in the runtime and serving them in the browser.\n   */\n  return (async (props: WebComponentProps<I>) => {\n    const resolvedHydrateModule = await options.hydrateModule;\n    return createComponentForServerSideRendering<I, E>({\n      renderToString: resolvedHydrateModule.renderToString,\n      serializeProperty: resolvedHydrateModule.serializeProperty,\n      ...options,\n    })(props as any);\n  }) as unknown as ReactWebComponent<I, E>;\n};\n"],"names":["unitlessKeys","DEFAULT_UNIT","isCSSPropertyValue","value","camelToKebab","str","match","applyCssUnits","property","unit","isUnitless","unitless","resolvedUnit","stringifyStyleDeclaration","styleDeclaration","options","importantSuffix","_","stringifyCSSProperties","cssProperties","optionsOrImportant","possibleStandardNames","LOG_PREFIX","isPrimitive","isEmpty","isIterable","isJSXClassElementConstructor","isLazyExoticComponent","createComponentForServerSideRendering","children","props","stringProps","key","propValue","propName","serializedChildren","toSerialize","originalConsoleError","resolvedChildren","resolveComponentTypes","err","error","toSerializeWithChildren","html","styles","serializedComponentByLine","hydrationComment","isShadowComponent","templateContent","parse","typedParse","StencilElement","reactNode","domNode","CustomTag","customProps","__html","React","style","DynamicComponent","dynamic","child","type","resolvedType","resolveType","instance","payload","lazyResult","lazyComponent","result","createComponent","resolvedHydrateModule"],"mappings":"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","x_google_ignoreList":[0,1]}